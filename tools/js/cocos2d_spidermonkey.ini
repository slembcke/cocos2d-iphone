#########################################################
#
#           cocos2d Mac
#
#########################################################
[cocos2d_mac]

# prefix that will be removed from the ObjC classes in order to generate the JS classes
# ex: If the class name is CCNode, then on Javascript it will be Node
obj_class_prefix_to_remove = CC

# Classes to generate. Use '*' to generate all the parsed classes.
# Subclasses will be parsed as well.
# ex: If CCSprite is parsed, then CCNode and NSObject will be parsed as well
# It supports regular expressions to match class names.
# eg: all cocos2d actions ending in 'By': CC(.*)By
classes_to_parse = CC(.*), Chipmunk*

# Classes to ignore.
# It is a good idea to add classes that you don't want to have a proxy object. Usually internal classes,
# or classes that are already native on Javascript should be added here.
# It supports regular expressions to match class names.
# eg: all NS classes: NS(.*)
classes_to_ignore = NS(.*), CCArray, CCWindow, CCGLView

# Class properties
# Options
#  manual               Means that the class is manually bound. No binding info will generated, but it can be used.
#  name                 New name of the class
class_properties =  NSObject = manual,
                NSEvent = manual,

# Whether or not to generate constructors from base classes for the current class.
# In Javascript, the "constructors" or "static methods" are not "inherited".
# It is recommended to set it to True
inherit_class_methods = True

# The prefix will be removed from function name.
# eg: if the C function is "cpBodyAddShape", then the JS name will be "bodyWithAddShape"
## For cocos2d add "cc"
function_prefix_to_remove = cc

# Free functions to be parsed
functions_to_parse = cc(.*)
# Free functions not to parse
functions_to_ignore = ccArray*, ccCArray*

# Rules used to rename methods
# options:
#   name:"js_name"         Rename methods.
#   ignore                 This method will be ignored.
#   callback               This method is a callback. It will be invoked from Objective-C
#   optional_args_since:2  It means that all arguments starting from the 2nd argument are optionals
#   variadic_2_array       It means that all arguments are variadic, and an Array will be created with them
#
method_properties =  CCNode#node = name:"create",
                CCLayer#node = name:"create",
                CCScene#node = name:"create",
                CCSprite#spriteWithFile: = ignore,
                CCSprite#spriteWithFile:rect: = name:"create"; optional_args_since:2,
                CCSprite#spriteWithTexture: = ignore,
                CCSprite#spriteWithTexture:rect: = ignore,
                CCSprite#spriteWithTexture:rect:offset: = name:"create"; optional_args_since:2,
                CCSprite#spriteWithSpriteFrame: = name:"createWithSpriteFrame",
                CCSprite#spriteWithSpriteFrameName: = name:"createWithSpriteFrameName",
                CCSpriteBatchNode#batchNodeWithFile: = ignore,
                CCSpriteBatchNode#batchNodeWithFile:capacity: = name:"create"; optional_args_since;2,
                CCSpriteBatchNode#batchNodeWithTexture: = ignore,
                CCSpriteBatchNode#batchNodeWithTexture:capacity: = name:"createWithTexture"; optional_args_since;2,
                CCSequence#actionWithArray: = variadic_2_array; name:"create",
                CCSpawn#actionWithArray: = variadic_2_array; name:"create",
                CCRepeatForever#actionWithAction: = name:"create",
                CCRotateBy#actionWithDuration:angle: = name:"create",
                CCScaleBy#actionWithDuration:scale: = name:"create",
                CCMoveBy#actionWithDuration:position: = name:"create",
                CCTintBy#actionWithDuration:red:green:blue: = name:"create",
                CCFadeIn#actionWithDuration: = name:"create",
                CCFadeOut#actionWithDuration: = name:"create",
                CCBlink#actionWithDuration:blinks: = name:"create",
                CCAnimate#actionWithAnimation: = name:"create",
                CCFlipY#actionWithFlipY: = name:"create",
                CCFlipX#actionWithFlipX: = name:"create",
                CCDelayTime#actionWithDuration: = name:"create",
                CCMenu#menuWithArray: = variadic_2_array; name:"create",
                CCNode#onEnter = callback,
                CCNode#onExit = callback,
                CCNode#update: = callback,
                CCNode#addChild: = ignore,
                CCNode#addChild:z: = ignore,
                CCNode#addChild:z:tag: = name:"addChild"; optional_args_since:2,
                ChipmunkSprite#spriteWithFile: = ignore,
                ChipmunkSprite#spriteWithFile:rect: = name:"create"; optional_args_since:2,
                ChipmunkSprite#spriteWithTexture: = ignore,
                ChipmunkSprite#spriteWithTexture:rect: = ignore,
                ChipmunkSprite#spriteWithTexture:rect:offset: = name:"create"; optional_args_since:2,
                ChipmunkSprite#spriteWithSpriteFrameName: = name:"createWithSpriteFrameName",
                CCSpriteFrameCache#sharedSpriteFrameCache = name:"getInstance",
                CCSpriteFrameCache#addSpriteFramesWithFile: = ignore,
                CCSpriteFrameCache#addSpriteFramesWithFile:textureFilename: = name:"addSpriteFrames"; optional_args_since:2,
                CCDirector#sharedDirector = name:"getInstance",
                CCAnimation#animationWithSpriteFrames: = ignore,
                CCAnimation#animationWithSpriteFrames:delay: = name:"create"; optional_args_since:2,
                CCLabelAtlas#labelWithString:fntFile: = name:"create",
                CCLabelBMFont#labelWithString:fntFile: = name:"create",
                CCLayer#ccMouseUp: = callback; no_swizzle; name:"onMouseUp",
                CCLayer#ccMouseDown: = callback; no_swizzle; name:"onMouseDown",
                CCLayer#ccMouseDragged: = callback; no_swizzle; name:"onMouseDragged",

#
# Struct properties
# options:
#   opaque              The structure will be treated as 'opaque' and can't not be inspected from JS.
#                       Opaque structures are much faster to generate than 'manual' or 'automatic' strcutures
#   manual:[func]       Manual conversion is provided for this structures. jsval_to_structname() and structname_to_jsval shall exists in your project
#                       If "func" is passed, it will call that conversion function
struct_properties = CGPoint = manual,
                    CGSize = manual,
                    CGRect = manual,
                    cpBody = opaque

# BridgeSupport files
# add as many as you need. Usually you will only one.
bridge_support_file = cocos2d-mac.bridgesupport, ChipmunkSprite.bridgesupport

# File that contains hierarchy and protocols (not present on BridgeSupport file)
hierarchy_protocol_file = cocos2d-mac-class_hierarchy-protocols.txt, ChipmunkSprite-class_hierarchy-protocols.txt


#########################################################
#
#           cocos2d iOS
#
#########################################################
[cocos2d_ios]

# prefix that will be removed from the ObjC classes in order to generate the JS classes
# ex: If the class name is CCNode, then on Javascript it will be Node
obj_class_prefix_to_remove = CC

# Classes to generate. Use '*' to generate all the parsed classes.
# Subclasses will be parsed as well.
# ex: If CCSprite is parsed, then CCNode and NSObject will be parsed as well
# It supports regular expressions to match class names.
# eg: all cocos2d actions ending in 'By': CC(.*)By
classes_to_parse = CC(.*), Chipmunk*

# Classes to ignore.
# It is a good idea to add classes that you don't want to have a proxy object. Usually internal classes,
# or classes that are already native on Javascript should be added here.
# It supports regular expressions to match class names.
# eg: all NS classes: NS(.*)
classes_to_ignore = NS(.*), CCArray, CCWindow, CCGLView, CCES2Renderer

# Class properties
# Options
#  manual               Means that the class is manually bound. No binding info will generated, but it can be used.
#  name                 New name of the class
class_properties =  NSObject = manual,
                UIEvent = manual,
                UITouch = manual,

# Whether or not to generate constructors from base classes for the current class.
# In Javascript, the "constructors" or "static methods" are not "inherited".
# It is recommended to set it to True
inherit_class_methods = True

# The prefix will be removed from function name.
# eg: if the C function is "cpBodyAddShape", then the JS name will be "bodyWithAddShape"
## For cocos2d add "cc"
function_prefix_to_remove = cc

# Free functions to be parsed
functions_to_parse = cc(.*)
# Free functions not to parse
functions_to_ignore = ccArray*, ccCArray*

# Rules used to rename methods
# options:
#   name:"js_name"         Rename methods.
#   ignore                 This method will be ignored.
#   callback               This method is a callback. It will be invoked from Objective-C
#   optional_args_since:2  It means that all arguments starting from the 2nd argument are optionals
#   variadic_2_array       It means that all arguments are variadic, and an Array will be created with them
#
method_properties =  CCNode#node = name:"create",
                CCLayer#node = name:"create",
                CCScene#node = name:"create",
                CCSprite#spriteWithFile: = ignore,
                CCSprite#spriteWithFile:rect: = name:"create"; optional_args_since:2,
                CCSprite#spriteWithTexture: = ignore,
                CCSprite#spriteWithTexture:rect: = ignore,
                CCSprite#spriteWithTexture:rect:offset: = name:"create"; optional_args_since:2,
                CCSprite#spriteWithSpriteFrame: = name:"createWithSpriteFrame",
                CCSprite#spriteWithSpriteFrameName: = name:"createWithSpriteFrameName",
                CCSpriteBatchNode#batchNodeWithFile: = ignore,
                CCSpriteBatchNode#batchNodeWithFile:capacity: = name:"create"; optional_args_since;2,
                CCSpriteBatchNode#batchNodeWithTexture: = ignore,
                CCSpriteBatchNode#batchNodeWithTexture:capacity: = name:"createWithTexture"; optional_args_since;2,
                CCSequence#actionWithArray: = variadic_2_array; name:"create",
                CCSpawn#actionWithArray: = variadic_2_array; name:"create",
                CCRepeatForever#actionWithAction: = name:"create",
                CCRotateBy#actionWithDuration:angle: = name:"create",
                CCScaleBy#actionWithDuration:scale: = name:"create",
                CCMoveBy#actionWithDuration:position: = name:"create",
                CCTintBy#actionWithDuration:red:green:blue: = name:"create",
                CCFadeIn#actionWithDuration: = name:"create",
                CCFadeOut#actionWithDuration: = name:"create",
                CCBlink#actionWithDuration:blinks: = name:"create",
                CCAnimate#actionWithAnimation: = name:"create",
                CCFlipY#actionWithFlipY: = name:"create",
                CCFlipX#actionWithFlipX: = name:"create",
                CCDelayTime#actionWithDuration: = name:"create",
                CCMenu#menuWithArray: = variadic_2_array; name:"create",
                CCNode#onEnter = callback,
                CCNode#onExit = callback,
                CCNode#update: = callback,
                CCNode#addChild: = ignore,
                CCNode#addChild:z: = ignore,
                CCNode#addChild:z:tag: = name:"addChild"; optional_args_since:2,
                ChipmunkSprite#spriteWithFile: = ignore,
                ChipmunkSprite#spriteWithFile:rect: = name:"create"; optional_args_since:2,
                ChipmunkSprite#spriteWithTexture: = ignore,
                ChipmunkSprite#spriteWithTexture:rect: = ignore,
                ChipmunkSprite#spriteWithTexture:rect:offset: = name:"create"; optional_args_since:2,
                ChipmunkSprite#spriteWithSpriteFrameName: = name:"createWithSpriteFrameName",
                CCSpriteFrameCache#sharedSpriteFrameCache = name:"getInstance",
                CCSpriteFrameCache#addSpriteFramesWithFile: = ignore,
                CCSpriteFrameCache#addSpriteFramesWithFile:textureFilename: = name:"addSpriteFrames"; optional_args_since:2,
                CCDirector#sharedDirector = name:"getInstance",
                CCAnimation#animationWithSpriteFrames: = ignore,
                CCAnimation#animationWithSpriteFrames:delay: = name:"create"; optional_args_since:2,
                CCLabelAtlas#labelWithString:fntFile: = name:"create",
                CCLabelBMFont#labelWithString:fntFile: = name:"create",
                CCLayer#ccTouchesBegan:withEvent: = callback; no_swizzle; name:"onTouchesBegan",
                CCLayer#ccTouchesCancelled:withEvent: = callback; no_swizzle; name:"onTouchesCancelled",
                CCLayer#ccTouchesEnded:withEvent: = callback; no_swizzle; name:"onTouchesEnded",
                CCLayer#ccTouchesMoved:withEvent: = callback; no_swizzle; name:"onTouchesMoved",

#
# Struct properties
# options:
#   opaque              The structure will be treated as 'opaque' and can't not be inspected from JS.
#                       Opaque structures are much faster to generate than 'manual' or 'automatic' strcutures
#   manual:[func]       Manual conversion is provided for this structures. jsval_to_structname() and structname_to_jsval shall exists in your project
#                       If "func" is passed, it will call that conversion function
struct_properties = CGPoint = manual,
                    CGSize = manual,
                    CGRect = manual,
                    cpBody = opaque

# BridgeSupport files
# add as many as you need. Usually you will only one.
bridge_support_file = cocos2d-ios.bridgesupport, ChipmunkSprite.bridgesupport

# File that contains hierarchy and protocols (not present on BridgeSupport file)
hierarchy_protocol_file = cocos2d-ios-class_hierarchy-protocols.txt, ChipmunkSprite-class_hierarchy-protocols.txt
