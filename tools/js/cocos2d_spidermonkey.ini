[cocos2d]

# prefix that will be removed from the ObjC classes in order to generate the JS classes
# ex: If the class name is CCNode, then on Javascript it will be Node
obj_class_prefix_to_remove = CC

# Classes to generate. Use '*' to generate all the parsed classes.
# Subclasses will be parsed as well.
# ex: If CCSprite is parsed, then CCNode and NSObject will be parsed as well
# It supports regular expressions to match class names.
# eg: all cocos2d actions ending in 'By': CC(.*)By
classes_to_parse = CC(.*)

# Classes to ignore.
# It is a good idea to add classes that you don't want to have a proxy object. Usually internal classes,
# or classes that are already native on Javascript should be added here.
# It supports regular expressions to match class names.
# eg: all NS classes: NS(.*)
classes_to_ignore = NS(.*) CCArray CCWindow CCGLView

# Whether or not to generate constructors from base classes for the current class.
# In Javascript, the "constructors" or "static methods" are not "inherited".
# It is recommended to set it to True
inherit_class_methods = True

# Free functions to be parsed
functions_to_parse = cc(.*)
# Free functions not to parse
functions_to_ignore =

# Which methods are callbacks. Class#methodName
# There are types of methods:
#  a) methods that are called from Javascript
#  b) methods that are called from Native.
# Here are the methods that are called from Native.
# These methods can't be called from Javascript. An infinite loop will occur.
callback_methods = CCNode#onEnter CCNode#onExit

# BridgeSupport file
bridge_support_file = ../../Resources-Mac/cocos2d-mac.bridgesupport

# File that contains hierarchy and protocols (not present on BridgeSupport file)
hierarchy_protocol_file = ../../Resources-Mac/cocos2d-mac-class_hierarchy-protocols.txt
