[CocosDenshion]

# prefix that will be removed from the ObjC classes in order to generate the JS classes
# ex: If the class name is CCNode, then on Javascript it will be Node
obj_class_prefix_to_remove = CD

# Classes to generate. Use '*' to generate all the parsed classes.
# Subclasses will be parsed as well.
# ex: If CCSprite is parsed, then CCNode and NSObject will be parsed as well
# It supports regular expressions to match class names.
# eg: all cocos2d actions ending in 'By': CC(.*)By
classes_to_parse = CD(.*), SimpleAudioEngine

# Classes to ignore.
# It is a good idea to add classes that you don't want to have a proxy object. Usually internal classes,
# or classes that are already native on Javascript should be added here.
# It supports regular expressions to match class names.
# eg: all NS classes: NS(.*)
classes_to_ignore = NS(.*), CDAsynchBufferLoader

# Whether or not to generate constructors from base classes for the current class.
# In Javascript, the "constructors" or "static methods" are not "inherited".
# It is recommended to set it to True
inherit_class_methods = True

# The prefix will be removed from function name.
# eg: if the C function is "cpBodyAddShape", then the JS name will be "bodyWithAddShape"
## For cocos2d add "cc"
function_prefix_to_remove = cd

# Free functions to be parsed
functions_to_parse = cd(.*)
# Free functions not to parse
functions_to_ignore = ccArray*, ccCArray*

# Rules used to rename methods
# options:
#   name:"js_name"         Rename methods.
#   ignore                 This method will be ignored.
#   callback               This method is a callback. It will be invoked from Objective-C
#   optional_args_since:2  It means that all arguments starting from the 2nd argument are optionals
#   variadic_2_array       It means that all arguments are variadic, and an Array will be created with them
#
method_properties = 

#
# Struct properties
# options:
#   opaque              The structure will be treated as 'opaque' and can't not be inspected from JS.
#                       Opaque structures are much faster to generate than 'manual' or 'automatic' strcutures
#   manual              Manual conversion is provided for this structures. jsval_to_structname() and structname_to_jsval shall exists in your project
struct_properties = 

# BridgeSupport files
# add as many as you need. Usually you will only one.
bridge_support_file = CocosDenshion.bridgesupport

# File that contains hierarchy and protocols (not present on BridgeSupport file)
hierarchy_protocol_file = CocosDenshion-class_hierarchy-protocols.txt
