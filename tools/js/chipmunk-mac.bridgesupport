<?xml version='1.0'?>
<signatures version='1.0'>
<struct type='{cpArbiter=&quot;e&quot;f&quot;u&quot;f&quot;surface_vr&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;a_private&quot;^{cpShape}&quot;b_private&quot;^{cpShape}&quot;body_a_private&quot;^{cpBody}&quot;body_b_private&quot;^{cpBody}&quot;thread_a_private&quot;{cpArbiterThread=&quot;next&quot;^{cpArbiter}&quot;prev&quot;^{cpArbiter}}&quot;thread_b_private&quot;{cpArbiterThread=&quot;next&quot;^{cpArbiter}&quot;prev&quot;^{cpArbiter}}&quot;numContacts_private&quot;i&quot;contacts_private&quot;^{cpContact}&quot;stamp_private&quot;I&quot;handler_private&quot;^{cpCollisionHandler}&quot;swappedColl_private&quot;i&quot;state_private&quot;i}' name='cpArbiter' type64='{cpArbiter=&quot;e&quot;d&quot;u&quot;d&quot;surface_vr&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;a_private&quot;^{cpShape}&quot;b_private&quot;^{cpShape}&quot;body_a_private&quot;^{cpBody}&quot;body_b_private&quot;^{cpBody}&quot;thread_a_private&quot;{cpArbiterThread=&quot;next&quot;^{cpArbiter}&quot;prev&quot;^{cpArbiter}}&quot;thread_b_private&quot;{cpArbiterThread=&quot;next&quot;^{cpArbiter}&quot;prev&quot;^{cpArbiter}}&quot;numContacts_private&quot;i&quot;contacts_private&quot;^{cpContact}&quot;stamp_private&quot;I&quot;handler_private&quot;^{cpCollisionHandler}&quot;swappedColl_private&quot;i&quot;state_private&quot;i}'>
<field declared_type='cpFloat' type='f' name='e' type64='d'/>
<field declared_type='cpFloat' type='f' name='u' type64='d'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='surface_vr' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='a_private' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<field declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='b_private' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<field declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body_a_private' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<field declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body_b_private' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<field declared_type='struct cpArbiterThread' type='{cpArbiterThread=&quot;next&quot;^{cpArbiter}&quot;prev&quot;^{cpArbiter}}' name='thread_a_private'/>
<field declared_type='struct cpArbiterThread' type='{cpArbiterThread=&quot;next&quot;^{cpArbiter}&quot;prev&quot;^{cpArbiter}}' name='thread_b_private'/>
<field declared_type='int' type='i' name='numContacts_private'/>
<field declared_type='cpContact*' type='^{cpContact={CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}fffffffI}' name='contacts_private' type64='^{cpContact={CGPoint=dd}{CGPoint=dd}d{CGPoint=dd}{CGPoint=dd}dddddddQ}'/>
<field declared_type='cpTimestamp' type='I' name='stamp_private'/>
<field declared_type='cpCollisionHandler*' type='^{cpCollisionHandler=II^?^?^?^?^v}' name='handler_private' type64='^{cpCollisionHandler=QQ^?^?^?^?^v}'/>
<field declared_type='cpBool' type='i' name='swappedColl_private'/>
<field declared_type='cpArbiterState' type='i' name='state_private'/>
</struct>
<struct type='{cpArbiterThread=&quot;next&quot;^{cpArbiter}&quot;prev&quot;^{cpArbiter}}' name='cpArbiterThread'>
<field declared_type='struct cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' name='next' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<field declared_type='struct cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' name='prev' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
</struct>
<struct type='{cpArray=&quot;num&quot;i&quot;max&quot;i&quot;arr&quot;^^v}' name='cpArray'>
<field declared_type='int' type='i' name='num'/>
<field declared_type='int' type='i' name='max'/>
<field declared_type='void**' type='^^v' name='arr'/>
</struct>
<struct type='{cpBB=&quot;l&quot;f&quot;b&quot;f&quot;r&quot;f&quot;t&quot;f}' name='cpBB' type64='{cpBB=&quot;l&quot;d&quot;b&quot;d&quot;r&quot;d&quot;t&quot;d}'>
<field declared_type='cpFloat' type='f' name='l' type64='d'/>
<field declared_type='cpFloat' type='f' name='b' type64='d'/>
<field declared_type='cpFloat' type='f' name='r' type64='d'/>
<field declared_type='cpFloat' type='f' name='t' type64='d'/>
</struct>
<struct type='{cpBody=&quot;velocity_func&quot;^?&quot;position_func&quot;^?&quot;m&quot;f&quot;m_inv&quot;f&quot;i&quot;f&quot;i_inv&quot;f&quot;p&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;v&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;f&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;a&quot;f&quot;w&quot;f&quot;t&quot;f&quot;rot&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;data&quot;^v&quot;v_limit&quot;f&quot;w_limit&quot;f&quot;v_bias_private&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;w_bias_private&quot;f&quot;space_private&quot;^{cpSpace}&quot;shapeList_private&quot;^{cpShape}&quot;arbiterList_private&quot;^{cpArbiter}&quot;constraintList_private&quot;^{cpConstraint}&quot;node_private&quot;{cpComponentNode=&quot;root&quot;^{cpBody}&quot;next&quot;^{cpBody}&quot;idleTime&quot;f}}' name='cpBody' type64='{cpBody=&quot;velocity_func&quot;^?&quot;position_func&quot;^?&quot;m&quot;d&quot;m_inv&quot;d&quot;i&quot;d&quot;i_inv&quot;d&quot;p&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;v&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;f&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;a&quot;d&quot;w&quot;d&quot;t&quot;d&quot;rot&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;data&quot;^v&quot;v_limit&quot;d&quot;w_limit&quot;d&quot;v_bias_private&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;w_bias_private&quot;d&quot;space_private&quot;^{cpSpace}&quot;shapeList_private&quot;^{cpShape}&quot;arbiterList_private&quot;^{cpArbiter}&quot;constraintList_private&quot;^{cpConstraint}&quot;node_private&quot;{cpComponentNode=&quot;root&quot;^{cpBody}&quot;next&quot;^{cpBody}&quot;idleTime&quot;d}}'>
<field declared_type='cpBodyVelocityFunc' type='^?' name='velocity_func' function_pointer='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<arg declared_type='cpFloat' type='f' type64='d'/>
<arg declared_type='cpFloat' type='f' type64='d'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpBodyPositionFunc' type='^?' name='position_func' function_pointer='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpFloat' type='f' type64='d'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpFloat' type='f' name='m' type64='d'/>
<field declared_type='cpFloat' type='f' name='m_inv' type64='d'/>
<field declared_type='cpFloat' type='f' name='i' type64='d'/>
<field declared_type='cpFloat' type='f' name='i_inv' type64='d'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='p' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='v' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='f' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpFloat' type='f' name='a' type64='d'/>
<field declared_type='cpFloat' type='f' name='w' type64='d'/>
<field declared_type='cpFloat' type='f' name='t' type64='d'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='rot' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpDataPointer' type='^v' name='data'/>
<field declared_type='cpFloat' type='f' name='v_limit' type64='d'/>
<field declared_type='cpFloat' type='f' name='w_limit' type64='d'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='v_bias_private' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpFloat' type='f' name='w_bias_private' type64='d'/>
<field declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space_private' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<field declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shapeList_private' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<field declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' name='arbiterList_private' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<field declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraintList_private' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<field declared_type='cpComponentNode' type='{cpComponentNode=&quot;root&quot;^{cpBody}&quot;next&quot;^{cpBody}&quot;idleTime&quot;f}' name='node_private' type64='{cpComponentNode=&quot;root&quot;^{cpBody}&quot;next&quot;^{cpBody}&quot;idleTime&quot;d}'/>
</struct>
<struct type='{cpCircleShape=&quot;shape&quot;{cpShape=&quot;klass_private&quot;^{cpShapeClass}&quot;body&quot;^{cpBody}&quot;bb&quot;{cpBB=&quot;l&quot;f&quot;b&quot;f&quot;r&quot;f&quot;t&quot;f}&quot;sensor&quot;i&quot;e&quot;f&quot;u&quot;f&quot;surface_v&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;data&quot;^v&quot;collision_type&quot;I&quot;group&quot;I&quot;layers&quot;I&quot;space_private&quot;^{cpSpace}&quot;next_private&quot;^{cpShape}&quot;prev_private&quot;^{cpShape}&quot;hashid_private&quot;I}&quot;c&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;tc&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;r&quot;f}' name='cpCircleShape' type64='{cpCircleShape=&quot;shape&quot;{cpShape=&quot;klass_private&quot;^{cpShapeClass}&quot;body&quot;^{cpBody}&quot;bb&quot;{cpBB=&quot;l&quot;d&quot;b&quot;d&quot;r&quot;d&quot;t&quot;d}&quot;sensor&quot;i&quot;e&quot;d&quot;u&quot;d&quot;surface_v&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;data&quot;^v&quot;collision_type&quot;Q&quot;group&quot;Q&quot;layers&quot;I&quot;space_private&quot;^{cpSpace}&quot;next_private&quot;^{cpShape}&quot;prev_private&quot;^{cpShape}&quot;hashid_private&quot;Q}&quot;c&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;tc&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;r&quot;d}'>
<field declared_type='cpShape' type='{cpShape=&quot;klass_private&quot;^{cpShapeClass}&quot;body&quot;^{cpBody}&quot;bb&quot;{cpBB=&quot;l&quot;f&quot;b&quot;f&quot;r&quot;f&quot;t&quot;f}&quot;sensor&quot;i&quot;e&quot;f&quot;u&quot;f&quot;surface_v&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;data&quot;^v&quot;collision_type&quot;I&quot;group&quot;I&quot;layers&quot;I&quot;space_private&quot;^{cpSpace}&quot;next_private&quot;^{cpShape}&quot;prev_private&quot;^{cpShape}&quot;hashid_private&quot;I}' name='shape' type64='{cpShape=&quot;klass_private&quot;^{cpShapeClass}&quot;body&quot;^{cpBody}&quot;bb&quot;{cpBB=&quot;l&quot;d&quot;b&quot;d&quot;r&quot;d&quot;t&quot;d}&quot;sensor&quot;i&quot;e&quot;d&quot;u&quot;d&quot;surface_v&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;data&quot;^v&quot;collision_type&quot;Q&quot;group&quot;Q&quot;layers&quot;I&quot;space_private&quot;^{cpSpace}&quot;next_private&quot;^{cpShape}&quot;prev_private&quot;^{cpShape}&quot;hashid_private&quot;Q}'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='c' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='tc' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpFloat' type='f' name='r' type64='d'/>
</struct>
<struct type='{cpCollisionHandler=&quot;a&quot;I&quot;b&quot;I&quot;begin&quot;^?&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;separate&quot;^?&quot;data&quot;^v}' name='cpCollisionHandler' type64='{cpCollisionHandler=&quot;a&quot;Q&quot;b&quot;Q&quot;begin&quot;^?&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;separate&quot;^?&quot;data&quot;^v}'>
<field declared_type='cpCollisionType' type='L' name='a' type64='Q'/>
<field declared_type='cpCollisionType' type='L' name='b' type64='Q'/>
<field declared_type='cpCollisionBeginFunc' type='^?' name='begin' function_pointer='true'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBool' type='i'/>
</field>
<field declared_type='cpCollisionPreSolveFunc' type='^?' name='preSolve' function_pointer='true'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBool' type='i'/>
</field>
<field declared_type='cpCollisionPostSolveFunc' type='^?' name='postSolve' function_pointer='true'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpCollisionSeparateFunc' type='^?' name='separate' function_pointer='true'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void*' type='^v' name='data'/>
</struct>
<struct type='{cpComponentNode=&quot;root&quot;^{cpBody}&quot;next&quot;^{cpBody}&quot;idleTime&quot;f}' name='cpComponentNode' type64='{cpComponentNode=&quot;root&quot;^{cpBody}&quot;next&quot;^{cpBody}&quot;idleTime&quot;d}'>
<field declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='root' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<field declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='next' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<field declared_type='cpFloat' type='f' name='idleTime' type64='d'/>
</struct>
<struct type='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}' name='cpConstraint' type64='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;d&quot;errorBias&quot;d&quot;maxBias&quot;d&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}'>
<field declared_type='cpConstraintClass*' type='^{cpConstraintClass=^?^?^?^?}' name='klass_private' const='true'/>
<field declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='a' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<field declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='b' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<field declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space_private' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<field declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='next_a_private' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<field declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='next_b_private' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<field declared_type='cpFloat' type='f' name='maxForce' type64='d'/>
<field declared_type='cpFloat' type='f' name='errorBias' type64='d'/>
<field declared_type='cpFloat' type='f' name='maxBias' type64='d'/>
<field declared_type='cpConstraintPreSolveFunc' type='^?' name='preSolve' function_pointer='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpConstraintPostSolveFunc' type='^?' name='postSolve' function_pointer='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpDataPointer' type='^v' name='data'/>
</struct>
<struct type='{cpConstraintClass=&quot;preStep&quot;^?&quot;applyCachedImpulse&quot;^?&quot;applyImpulse&quot;^?&quot;getImpulse&quot;^?}' name='cpConstraintClass'>
<field declared_type='cpConstraintPreStepImpl' type='^?' name='preStep' function_pointer='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpFloat' type='f' type64='d'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpConstraintApplyCachedImpulseImpl' type='^?' name='applyCachedImpulse' function_pointer='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpFloat' type='f' type64='d'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpConstraintApplyImpulseImpl' type='^?' name='applyImpulse' function_pointer='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpConstraintGetImpulseImpl' type='^?' name='getImpulse' function_pointer='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</field>
</struct>
<struct type='{cpContact=&quot;p&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;n&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;dist&quot;f&quot;r1&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;r2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;nMass&quot;f&quot;tMass&quot;f&quot;bounce&quot;f&quot;jnAcc&quot;f&quot;jtAcc&quot;f&quot;jBias&quot;f&quot;bias&quot;f&quot;hash&quot;I}' name='cpContact' type64='{cpContact=&quot;p&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;n&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;dist&quot;d&quot;r1&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;r2&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;nMass&quot;d&quot;tMass&quot;d&quot;bounce&quot;d&quot;jnAcc&quot;d&quot;jtAcc&quot;d&quot;jBias&quot;d&quot;bias&quot;d&quot;hash&quot;Q}'>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='p' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='n' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpFloat' type='f' name='dist' type64='d'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='r1' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='r2' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpFloat' type='f' name='nMass' type64='d'/>
<field declared_type='cpFloat' type='f' name='tMass' type64='d'/>
<field declared_type='cpFloat' type='f' name='bounce' type64='d'/>
<field declared_type='cpFloat' type='f' name='jnAcc' type64='d'/>
<field declared_type='cpFloat' type='f' name='jtAcc' type64='d'/>
<field declared_type='cpFloat' type='f' name='jBias' type64='d'/>
<field declared_type='cpFloat' type='f' name='bias' type64='d'/>
<field declared_type='cpHashValue' type='L' name='hash' type64='Q'/>
</struct>
<struct type='{cpContactPointSet=&quot;count&quot;i&quot;points&quot;[4{?=&quot;point&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;normal&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;dist&quot;f}]}' name='cpContactPointSet' type64='{cpContactPointSet=&quot;count&quot;i&quot;points&quot;[4{?=&quot;point&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;normal&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;dist&quot;d}]}'>
<field declared_type='int' type='i' name='count'/>
<field declared_type='struct cpContactPointSet::*' type='[4{?=&quot;point&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;normal&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;dist&quot;f}]' name='points' type64='[4{?=&quot;point&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;normal&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;dist&quot;d}]'/>
</struct>
<struct type='{cpDampedRotarySpring=&quot;constraint&quot;{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}&quot;restAngle&quot;f&quot;stiffness&quot;f&quot;damping&quot;f&quot;springTorqueFunc&quot;^?&quot;target_wrn&quot;f&quot;w_coef&quot;f&quot;iSum&quot;f}' name='cpDampedRotarySpring' type64='{cpDampedRotarySpring=&quot;constraint&quot;{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;d&quot;errorBias&quot;d&quot;maxBias&quot;d&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}&quot;restAngle&quot;d&quot;stiffness&quot;d&quot;damping&quot;d&quot;springTorqueFunc&quot;^?&quot;target_wrn&quot;d&quot;w_coef&quot;d&quot;iSum&quot;d}'>
<field declared_type='cpConstraint' type='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}' name='constraint' type64='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;d&quot;errorBias&quot;d&quot;maxBias&quot;d&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}'/>
<field declared_type='cpFloat' type='f' name='restAngle' type64='d'/>
<field declared_type='cpFloat' type='f' name='stiffness' type64='d'/>
<field declared_type='cpFloat' type='f' name='damping' type64='d'/>
<field declared_type='cpDampedRotarySpringTorqueFunc' type='^?' name='springTorqueFunc' function_pointer='true'>
<arg declared_type='struct cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpFloat' type='f' type64='d'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</field>
<field declared_type='cpFloat' type='f' name='target_wrn' type64='d'/>
<field declared_type='cpFloat' type='f' name='w_coef' type64='d'/>
<field declared_type='cpFloat' type='f' name='iSum' type64='d'/>
</struct>
<struct type='{cpDampedSpring=&quot;constraint&quot;{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}&quot;anchr1&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;anchr2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;restLength&quot;f&quot;stiffness&quot;f&quot;damping&quot;f&quot;springForceFunc&quot;^?&quot;target_vrn&quot;f&quot;v_coef&quot;f&quot;r1&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;r2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;nMass&quot;f&quot;n&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}}' name='cpDampedSpring' type64='{cpDampedSpring=&quot;constraint&quot;{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;d&quot;errorBias&quot;d&quot;maxBias&quot;d&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}&quot;anchr1&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;anchr2&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;restLength&quot;d&quot;stiffness&quot;d&quot;damping&quot;d&quot;springForceFunc&quot;^?&quot;target_vrn&quot;d&quot;v_coef&quot;d&quot;r1&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;r2&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;nMass&quot;d&quot;n&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}}'>
<field declared_type='cpConstraint' type='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}' name='constraint' type64='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;d&quot;errorBias&quot;d&quot;maxBias&quot;d&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='anchr1' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='anchr2' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpFloat' type='f' name='restLength' type64='d'/>
<field declared_type='cpFloat' type='f' name='stiffness' type64='d'/>
<field declared_type='cpFloat' type='f' name='damping' type64='d'/>
<field declared_type='cpDampedSpringForceFunc' type='^?' name='springForceFunc' function_pointer='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpFloat' type='f' type64='d'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</field>
<field declared_type='cpFloat' type='f' name='target_vrn' type64='d'/>
<field declared_type='cpFloat' type='f' name='v_coef' type64='d'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='r1' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='r2' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpFloat' type='f' name='nMass' type64='d'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='n' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
</struct>
<struct type='{cpGearJoint=&quot;constraint&quot;{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}&quot;phase&quot;f&quot;ratio&quot;f&quot;ratio_inv&quot;f&quot;iSum&quot;f&quot;bias&quot;f&quot;jAcc&quot;f&quot;jMax&quot;f}' name='cpGearJoint' type64='{cpGearJoint=&quot;constraint&quot;{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;d&quot;errorBias&quot;d&quot;maxBias&quot;d&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}&quot;phase&quot;d&quot;ratio&quot;d&quot;ratio_inv&quot;d&quot;iSum&quot;d&quot;bias&quot;d&quot;jAcc&quot;d&quot;jMax&quot;d}'>
<field declared_type='cpConstraint' type='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}' name='constraint' type64='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;d&quot;errorBias&quot;d&quot;maxBias&quot;d&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}'/>
<field declared_type='cpFloat' type='f' name='phase' type64='d'/>
<field declared_type='cpFloat' type='f' name='ratio' type64='d'/>
<field declared_type='cpFloat' type='f' name='ratio_inv' type64='d'/>
<field declared_type='cpFloat' type='f' name='iSum' type64='d'/>
<field declared_type='cpFloat' type='f' name='bias' type64='d'/>
<field declared_type='cpFloat' type='f' name='jAcc' type64='d'/>
<field declared_type='cpFloat' type='f' name='jMax' type64='d'/>
</struct>
<struct type='{cpGrooveJoint=&quot;constraint&quot;{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}&quot;grv_n&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;grv_a&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;grv_b&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;anchr2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;grv_tn&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;clamp&quot;f&quot;r1&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;r2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;k1&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;k2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;jAcc&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;jMaxLen&quot;f&quot;bias&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}}' name='cpGrooveJoint' type64='{cpGrooveJoint=&quot;constraint&quot;{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;d&quot;errorBias&quot;d&quot;maxBias&quot;d&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}&quot;grv_n&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;grv_a&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;grv_b&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;anchr2&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;grv_tn&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;clamp&quot;d&quot;r1&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;r2&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;k1&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;k2&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;jAcc&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;jMaxLen&quot;d&quot;bias&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}}'>
<field declared_type='cpConstraint' type='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}' name='constraint' type64='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;d&quot;errorBias&quot;d&quot;maxBias&quot;d&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='grv_n' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='grv_a' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='grv_b' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='anchr2' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='grv_tn' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpFloat' type='f' name='clamp' type64='d'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='r1' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='r2' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='k1' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='k2' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='jAcc' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpFloat' type='f' name='jMaxLen' type64='d'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='bias' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
</struct>
<struct type='{cpNearestPointQueryInfo=&quot;shape&quot;^{cpShape}&quot;p&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;d&quot;f}' name='cpNearestPointQueryInfo' type64='{cpNearestPointQueryInfo=&quot;shape&quot;^{cpShape}&quot;p&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;d&quot;d}'>
<field declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='p' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpFloat' type='f' name='d' type64='d'/>
</struct>
<struct type='{cpPinJoint=&quot;constraint&quot;{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}&quot;anchr1&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;anchr2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;dist&quot;f&quot;r1&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;r2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;n&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;nMass&quot;f&quot;jnAcc&quot;f&quot;jnMax&quot;f&quot;bias&quot;f}' name='cpPinJoint' type64='{cpPinJoint=&quot;constraint&quot;{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;d&quot;errorBias&quot;d&quot;maxBias&quot;d&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}&quot;anchr1&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;anchr2&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;dist&quot;d&quot;r1&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;r2&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;n&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;nMass&quot;d&quot;jnAcc&quot;d&quot;jnMax&quot;d&quot;bias&quot;d}'>
<field declared_type='cpConstraint' type='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}' name='constraint' type64='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;d&quot;errorBias&quot;d&quot;maxBias&quot;d&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='anchr1' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='anchr2' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpFloat' type='f' name='dist' type64='d'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='r1' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='r2' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='n' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpFloat' type='f' name='nMass' type64='d'/>
<field declared_type='cpFloat' type='f' name='jnAcc' type64='d'/>
<field declared_type='cpFloat' type='f' name='jnMax' type64='d'/>
<field declared_type='cpFloat' type='f' name='bias' type64='d'/>
</struct>
<struct type='{cpPivotJoint=&quot;constraint&quot;{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}&quot;anchr1&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;anchr2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;r1&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;r2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;k1&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;k2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;jAcc&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;jMaxLen&quot;f&quot;bias&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}}' name='cpPivotJoint' type64='{cpPivotJoint=&quot;constraint&quot;{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;d&quot;errorBias&quot;d&quot;maxBias&quot;d&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}&quot;anchr1&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;anchr2&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;r1&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;r2&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;k1&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;k2&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;jAcc&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;jMaxLen&quot;d&quot;bias&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}}'>
<field declared_type='cpConstraint' type='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}' name='constraint' type64='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;d&quot;errorBias&quot;d&quot;maxBias&quot;d&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='anchr1' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='anchr2' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='r1' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='r2' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='k1' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='k2' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='jAcc' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpFloat' type='f' name='jMaxLen' type64='d'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='bias' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
</struct>
<struct type='{cpPolyShape=&quot;shape&quot;{cpShape=&quot;klass_private&quot;^{cpShapeClass}&quot;body&quot;^{cpBody}&quot;bb&quot;{cpBB=&quot;l&quot;f&quot;b&quot;f&quot;r&quot;f&quot;t&quot;f}&quot;sensor&quot;i&quot;e&quot;f&quot;u&quot;f&quot;surface_v&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;data&quot;^v&quot;collision_type&quot;I&quot;group&quot;I&quot;layers&quot;I&quot;space_private&quot;^{cpSpace}&quot;next_private&quot;^{cpShape}&quot;prev_private&quot;^{cpShape}&quot;hashid_private&quot;I}&quot;numVerts&quot;i&quot;verts&quot;^{CGPoint}&quot;tVerts&quot;^{CGPoint}&quot;planes&quot;^{cpSplittingPlane}&quot;tPlanes&quot;^{cpSplittingPlane}}' name='cpPolyShape' type64='{cpPolyShape=&quot;shape&quot;{cpShape=&quot;klass_private&quot;^{cpShapeClass}&quot;body&quot;^{cpBody}&quot;bb&quot;{cpBB=&quot;l&quot;d&quot;b&quot;d&quot;r&quot;d&quot;t&quot;d}&quot;sensor&quot;i&quot;e&quot;d&quot;u&quot;d&quot;surface_v&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;data&quot;^v&quot;collision_type&quot;Q&quot;group&quot;Q&quot;layers&quot;I&quot;space_private&quot;^{cpSpace}&quot;next_private&quot;^{cpShape}&quot;prev_private&quot;^{cpShape}&quot;hashid_private&quot;Q}&quot;numVerts&quot;i&quot;verts&quot;^{CGPoint}&quot;tVerts&quot;^{CGPoint}&quot;planes&quot;^{cpSplittingPlane}&quot;tPlanes&quot;^{cpSplittingPlane}}'>
<field declared_type='cpShape' type='{cpShape=&quot;klass_private&quot;^{cpShapeClass}&quot;body&quot;^{cpBody}&quot;bb&quot;{cpBB=&quot;l&quot;f&quot;b&quot;f&quot;r&quot;f&quot;t&quot;f}&quot;sensor&quot;i&quot;e&quot;f&quot;u&quot;f&quot;surface_v&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;data&quot;^v&quot;collision_type&quot;I&quot;group&quot;I&quot;layers&quot;I&quot;space_private&quot;^{cpSpace}&quot;next_private&quot;^{cpShape}&quot;prev_private&quot;^{cpShape}&quot;hashid_private&quot;I}' name='shape' type64='{cpShape=&quot;klass_private&quot;^{cpShapeClass}&quot;body&quot;^{cpBody}&quot;bb&quot;{cpBB=&quot;l&quot;d&quot;b&quot;d&quot;r&quot;d&quot;t&quot;d}&quot;sensor&quot;i&quot;e&quot;d&quot;u&quot;d&quot;surface_v&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;data&quot;^v&quot;collision_type&quot;Q&quot;group&quot;Q&quot;layers&quot;I&quot;space_private&quot;^{cpSpace}&quot;next_private&quot;^{cpShape}&quot;prev_private&quot;^{cpShape}&quot;hashid_private&quot;Q}'/>
<field declared_type='int' type='i' name='numVerts'/>
<field declared_type='cpVect*' type='^{CGPoint=ff}' name='verts' type64='^{CGPoint=dd}'/>
<field declared_type='cpVect*' type='^{CGPoint=ff}' name='tVerts' type64='^{CGPoint=dd}'/>
<field declared_type='cpSplittingPlane*' type='^{cpSplittingPlane={CGPoint=ff}f}' name='planes' type64='^{cpSplittingPlane={CGPoint=dd}d}'/>
<field declared_type='cpSplittingPlane*' type='^{cpSplittingPlane={CGPoint=ff}f}' name='tPlanes' type64='^{cpSplittingPlane={CGPoint=dd}d}'/>
</struct>
<struct type='{cpRatchetJoint=&quot;constraint&quot;{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}&quot;angle&quot;f&quot;phase&quot;f&quot;ratchet&quot;f&quot;iSum&quot;f&quot;bias&quot;f&quot;jAcc&quot;f&quot;jMax&quot;f}' name='cpRatchetJoint' type64='{cpRatchetJoint=&quot;constraint&quot;{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;d&quot;errorBias&quot;d&quot;maxBias&quot;d&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}&quot;angle&quot;d&quot;phase&quot;d&quot;ratchet&quot;d&quot;iSum&quot;d&quot;bias&quot;d&quot;jAcc&quot;d&quot;jMax&quot;d}'>
<field declared_type='cpConstraint' type='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}' name='constraint' type64='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;d&quot;errorBias&quot;d&quot;maxBias&quot;d&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}'/>
<field declared_type='cpFloat' type='f' name='angle' type64='d'/>
<field declared_type='cpFloat' type='f' name='phase' type64='d'/>
<field declared_type='cpFloat' type='f' name='ratchet' type64='d'/>
<field declared_type='cpFloat' type='f' name='iSum' type64='d'/>
<field declared_type='cpFloat' type='f' name='bias' type64='d'/>
<field declared_type='cpFloat' type='f' name='jAcc' type64='d'/>
<field declared_type='cpFloat' type='f' name='jMax' type64='d'/>
</struct>
<struct type='{cpRotaryLimitJoint=&quot;constraint&quot;{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}&quot;min&quot;f&quot;max&quot;f&quot;iSum&quot;f&quot;bias&quot;f&quot;jAcc&quot;f&quot;jMax&quot;f}' name='cpRotaryLimitJoint' type64='{cpRotaryLimitJoint=&quot;constraint&quot;{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;d&quot;errorBias&quot;d&quot;maxBias&quot;d&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}&quot;min&quot;d&quot;max&quot;d&quot;iSum&quot;d&quot;bias&quot;d&quot;jAcc&quot;d&quot;jMax&quot;d}'>
<field declared_type='cpConstraint' type='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}' name='constraint' type64='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;d&quot;errorBias&quot;d&quot;maxBias&quot;d&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}'/>
<field declared_type='cpFloat' type='f' name='min' type64='d'/>
<field declared_type='cpFloat' type='f' name='max' type64='d'/>
<field declared_type='cpFloat' type='f' name='iSum' type64='d'/>
<field declared_type='cpFloat' type='f' name='bias' type64='d'/>
<field declared_type='cpFloat' type='f' name='jAcc' type64='d'/>
<field declared_type='cpFloat' type='f' name='jMax' type64='d'/>
</struct>
<struct type='{cpSegmentQueryInfo=&quot;shape&quot;^{cpShape}&quot;t&quot;f&quot;n&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}}' name='cpSegmentQueryInfo' type64='{cpSegmentQueryInfo=&quot;shape&quot;^{cpShape}&quot;t&quot;d&quot;n&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}}'>
<field declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<field declared_type='cpFloat' type='f' name='t' type64='d'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='n' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
</struct>
<struct type='{cpSegmentShape=&quot;shape&quot;{cpShape=&quot;klass_private&quot;^{cpShapeClass}&quot;body&quot;^{cpBody}&quot;bb&quot;{cpBB=&quot;l&quot;f&quot;b&quot;f&quot;r&quot;f&quot;t&quot;f}&quot;sensor&quot;i&quot;e&quot;f&quot;u&quot;f&quot;surface_v&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;data&quot;^v&quot;collision_type&quot;I&quot;group&quot;I&quot;layers&quot;I&quot;space_private&quot;^{cpSpace}&quot;next_private&quot;^{cpShape}&quot;prev_private&quot;^{cpShape}&quot;hashid_private&quot;I}&quot;a&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;b&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;n&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;ta&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;tb&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;tn&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;r&quot;f&quot;a_tangent&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;b_tangent&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}}' name='cpSegmentShape' type64='{cpSegmentShape=&quot;shape&quot;{cpShape=&quot;klass_private&quot;^{cpShapeClass}&quot;body&quot;^{cpBody}&quot;bb&quot;{cpBB=&quot;l&quot;d&quot;b&quot;d&quot;r&quot;d&quot;t&quot;d}&quot;sensor&quot;i&quot;e&quot;d&quot;u&quot;d&quot;surface_v&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;data&quot;^v&quot;collision_type&quot;Q&quot;group&quot;Q&quot;layers&quot;I&quot;space_private&quot;^{cpSpace}&quot;next_private&quot;^{cpShape}&quot;prev_private&quot;^{cpShape}&quot;hashid_private&quot;Q}&quot;a&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;b&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;n&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;ta&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;tb&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;tn&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;r&quot;d&quot;a_tangent&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;b_tangent&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}}'>
<field declared_type='cpShape' type='{cpShape=&quot;klass_private&quot;^{cpShapeClass}&quot;body&quot;^{cpBody}&quot;bb&quot;{cpBB=&quot;l&quot;f&quot;b&quot;f&quot;r&quot;f&quot;t&quot;f}&quot;sensor&quot;i&quot;e&quot;f&quot;u&quot;f&quot;surface_v&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;data&quot;^v&quot;collision_type&quot;I&quot;group&quot;I&quot;layers&quot;I&quot;space_private&quot;^{cpSpace}&quot;next_private&quot;^{cpShape}&quot;prev_private&quot;^{cpShape}&quot;hashid_private&quot;I}' name='shape' type64='{cpShape=&quot;klass_private&quot;^{cpShapeClass}&quot;body&quot;^{cpBody}&quot;bb&quot;{cpBB=&quot;l&quot;d&quot;b&quot;d&quot;r&quot;d&quot;t&quot;d}&quot;sensor&quot;i&quot;e&quot;d&quot;u&quot;d&quot;surface_v&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;data&quot;^v&quot;collision_type&quot;Q&quot;group&quot;Q&quot;layers&quot;I&quot;space_private&quot;^{cpSpace}&quot;next_private&quot;^{cpShape}&quot;prev_private&quot;^{cpShape}&quot;hashid_private&quot;Q}'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='a' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='b' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='n' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='ta' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='tb' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='tn' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpFloat' type='f' name='r' type64='d'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='a_tangent' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='b_tangent' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
</struct>
<struct type='{cpShape=&quot;klass_private&quot;^{cpShapeClass}&quot;body&quot;^{cpBody}&quot;bb&quot;{cpBB=&quot;l&quot;f&quot;b&quot;f&quot;r&quot;f&quot;t&quot;f}&quot;sensor&quot;i&quot;e&quot;f&quot;u&quot;f&quot;surface_v&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;data&quot;^v&quot;collision_type&quot;I&quot;group&quot;I&quot;layers&quot;I&quot;space_private&quot;^{cpSpace}&quot;next_private&quot;^{cpShape}&quot;prev_private&quot;^{cpShape}&quot;hashid_private&quot;I}' name='cpShape' type64='{cpShape=&quot;klass_private&quot;^{cpShapeClass}&quot;body&quot;^{cpBody}&quot;bb&quot;{cpBB=&quot;l&quot;d&quot;b&quot;d&quot;r&quot;d&quot;t&quot;d}&quot;sensor&quot;i&quot;e&quot;d&quot;u&quot;d&quot;surface_v&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;data&quot;^v&quot;collision_type&quot;Q&quot;group&quot;Q&quot;layers&quot;I&quot;space_private&quot;^{cpSpace}&quot;next_private&quot;^{cpShape}&quot;prev_private&quot;^{cpShape}&quot;hashid_private&quot;Q}'>
<field declared_type='cpShapeClass*' type='^{cpShapeClass=i^?^?^?^?}' name='klass_private' const='true'/>
<field declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<field declared_type='cpBB' type='{cpBB=&quot;l&quot;f&quot;b&quot;f&quot;r&quot;f&quot;t&quot;f}' name='bb' type64='{cpBB=&quot;l&quot;d&quot;b&quot;d&quot;r&quot;d&quot;t&quot;d}'/>
<field declared_type='cpBool' type='i' name='sensor'/>
<field declared_type='cpFloat' type='f' name='e' type64='d'/>
<field declared_type='cpFloat' type='f' name='u' type64='d'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='surface_v' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpDataPointer' type='^v' name='data'/>
<field declared_type='cpCollisionType' type='L' name='collision_type' type64='Q'/>
<field declared_type='cpGroup' type='L' name='group' type64='Q'/>
<field declared_type='cpLayers' type='I' name='layers'/>
<field declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space_private' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<field declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='next_private' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<field declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='prev_private' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<field declared_type='cpHashValue' type='L' name='hashid_private' type64='Q'/>
</struct>
<struct type='{cpShapeClass=&quot;type&quot;i&quot;cacheData&quot;^?&quot;destroy&quot;^?&quot;nearestPointQuery&quot;^?&quot;segmentQuery&quot;^?}' name='cpShapeClass'>
<field declared_type='cpShapeType' type='i' name='type'/>
<field declared_type='cpShapeCacheDataImpl' type='^?' name='cacheData' function_pointer='true'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<retval declared_type='cpBB' type='{cpBB=ffff}' type64='{cpBB=dddd}'/>
</field>
<field declared_type='cpShapeDestroyImpl' type='^?' name='destroy' function_pointer='true'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpShapeNearestPointQueryImpl' type='^?' name='nearestPointQuery' function_pointer='true'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<arg declared_type='cpNearestPointQueryInfo*' type='^{cpNearestPointQueryInfo=^{cpShape}{CGPoint=ff}f}' type64='^{cpNearestPointQueryInfo=^{cpShape}{CGPoint=dd}d}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpShapeSegmentQueryImpl' type='^?' name='segmentQuery' function_pointer='true'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<arg declared_type='cpSegmentQueryInfo*' type='^{cpSegmentQueryInfo=^{cpShape}f{CGPoint=ff}}' type64='^{cpSegmentQueryInfo=^{cpShape}d{CGPoint=dd}}'/>
<retval declared_type='void' type='v'/>
</field>
</struct>
<struct type='{cpSimpleMotor=&quot;constraint&quot;{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}&quot;rate&quot;f&quot;iSum&quot;f&quot;jAcc&quot;f&quot;jMax&quot;f}' name='cpSimpleMotor' type64='{cpSimpleMotor=&quot;constraint&quot;{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;d&quot;errorBias&quot;d&quot;maxBias&quot;d&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}&quot;rate&quot;d&quot;iSum&quot;d&quot;jAcc&quot;d&quot;jMax&quot;d}'>
<field declared_type='cpConstraint' type='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}' name='constraint' type64='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;d&quot;errorBias&quot;d&quot;maxBias&quot;d&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}'/>
<field declared_type='cpFloat' type='f' name='rate' type64='d'/>
<field declared_type='cpFloat' type='f' name='iSum' type64='d'/>
<field declared_type='cpFloat' type='f' name='jAcc' type64='d'/>
<field declared_type='cpFloat' type='f' name='jMax' type64='d'/>
</struct>
<struct type='{cpSlideJoint=&quot;constraint&quot;{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}&quot;anchr1&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;anchr2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;min&quot;f&quot;max&quot;f&quot;r1&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;r2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;n&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;nMass&quot;f&quot;jnAcc&quot;f&quot;jnMax&quot;f&quot;bias&quot;f}' name='cpSlideJoint' type64='{cpSlideJoint=&quot;constraint&quot;{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;d&quot;errorBias&quot;d&quot;maxBias&quot;d&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}&quot;anchr1&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;anchr2&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;min&quot;d&quot;max&quot;d&quot;r1&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;r2&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;n&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;nMass&quot;d&quot;jnAcc&quot;d&quot;jnMax&quot;d&quot;bias&quot;d}'>
<field declared_type='cpConstraint' type='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}' name='constraint' type64='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;d&quot;errorBias&quot;d&quot;maxBias&quot;d&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='anchr1' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='anchr2' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpFloat' type='f' name='min' type64='d'/>
<field declared_type='cpFloat' type='f' name='max' type64='d'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='r1' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='r2' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='n' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpFloat' type='f' name='nMass' type64='d'/>
<field declared_type='cpFloat' type='f' name='jnAcc' type64='d'/>
<field declared_type='cpFloat' type='f' name='jnMax' type64='d'/>
<field declared_type='cpFloat' type='f' name='bias' type64='d'/>
</struct>
<struct type='{cpSpace=&quot;iterations&quot;i&quot;gravity&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;damping&quot;f&quot;idleSpeedThreshold&quot;f&quot;sleepTimeThreshold&quot;f&quot;collisionSlop&quot;f&quot;collisionBias&quot;f&quot;collisionPersistence&quot;I&quot;enableContactGraph&quot;i&quot;data&quot;^v&quot;staticBody&quot;^{cpBody}&quot;stamp_private&quot;I&quot;curr_dt_private&quot;f&quot;bodies_private&quot;^{cpArray}&quot;rousedBodies_private&quot;^{cpArray}&quot;sleepingComponents_private&quot;^{cpArray}&quot;staticShapes_private&quot;^{cpSpatialIndex}&quot;activeShapes_private&quot;^{cpSpatialIndex}&quot;arbiters_private&quot;^{cpArray}&quot;contactBuffersHead_private&quot;^{cpContactBufferHeader}&quot;cachedArbiters_private&quot;^{cpHashSet}&quot;pooledArbiters_private&quot;^{cpArray}&quot;constraints_private&quot;^{cpArray}&quot;allocatedBuffers_private&quot;^{cpArray}&quot;locked_private&quot;i&quot;collisionHandlers_private&quot;^{cpHashSet}&quot;defaultHandler_private&quot;{cpCollisionHandler=&quot;a&quot;I&quot;b&quot;I&quot;begin&quot;^?&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;separate&quot;^?&quot;data&quot;^v}&quot;skipPostStep_private&quot;i&quot;postStepCallbacks_private&quot;^{cpArray}&quot;_staticBody_private&quot;{cpBody=&quot;velocity_func&quot;^?&quot;position_func&quot;^?&quot;m&quot;f&quot;m_inv&quot;f&quot;i&quot;f&quot;i_inv&quot;f&quot;p&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;v&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;f&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;a&quot;f&quot;w&quot;f&quot;t&quot;f&quot;rot&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;data&quot;^v&quot;v_limit&quot;f&quot;w_limit&quot;f&quot;v_bias_private&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;w_bias_private&quot;f&quot;space_private&quot;^{cpSpace}&quot;shapeList_private&quot;^{cpShape}&quot;arbiterList_private&quot;^{cpArbiter}&quot;constraintList_private&quot;^{cpConstraint}&quot;node_private&quot;{cpComponentNode=&quot;root&quot;^{cpBody}&quot;next&quot;^{cpBody}&quot;idleTime&quot;f}}}' name='cpSpace' type64='{cpSpace=&quot;iterations&quot;i&quot;gravity&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;damping&quot;d&quot;idleSpeedThreshold&quot;d&quot;sleepTimeThreshold&quot;d&quot;collisionSlop&quot;d&quot;collisionBias&quot;d&quot;collisionPersistence&quot;I&quot;enableContactGraph&quot;i&quot;data&quot;^v&quot;staticBody&quot;^{cpBody}&quot;stamp_private&quot;I&quot;curr_dt_private&quot;d&quot;bodies_private&quot;^{cpArray}&quot;rousedBodies_private&quot;^{cpArray}&quot;sleepingComponents_private&quot;^{cpArray}&quot;staticShapes_private&quot;^{cpSpatialIndex}&quot;activeShapes_private&quot;^{cpSpatialIndex}&quot;arbiters_private&quot;^{cpArray}&quot;contactBuffersHead_private&quot;^{cpContactBufferHeader}&quot;cachedArbiters_private&quot;^{cpHashSet}&quot;pooledArbiters_private&quot;^{cpArray}&quot;constraints_private&quot;^{cpArray}&quot;allocatedBuffers_private&quot;^{cpArray}&quot;locked_private&quot;i&quot;collisionHandlers_private&quot;^{cpHashSet}&quot;defaultHandler_private&quot;{cpCollisionHandler=&quot;a&quot;Q&quot;b&quot;Q&quot;begin&quot;^?&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;separate&quot;^?&quot;data&quot;^v}&quot;skipPostStep_private&quot;i&quot;postStepCallbacks_private&quot;^{cpArray}&quot;_staticBody_private&quot;{cpBody=&quot;velocity_func&quot;^?&quot;position_func&quot;^?&quot;m&quot;d&quot;m_inv&quot;d&quot;i&quot;d&quot;i_inv&quot;d&quot;p&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;v&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;f&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;a&quot;d&quot;w&quot;d&quot;t&quot;d&quot;rot&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;data&quot;^v&quot;v_limit&quot;d&quot;w_limit&quot;d&quot;v_bias_private&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;w_bias_private&quot;d&quot;space_private&quot;^{cpSpace}&quot;shapeList_private&quot;^{cpShape}&quot;arbiterList_private&quot;^{cpArbiter}&quot;constraintList_private&quot;^{cpConstraint}&quot;node_private&quot;{cpComponentNode=&quot;root&quot;^{cpBody}&quot;next&quot;^{cpBody}&quot;idleTime&quot;d}}}'>
<field declared_type='int' type='i' name='iterations'/>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='gravity' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpFloat' type='f' name='damping' type64='d'/>
<field declared_type='cpFloat' type='f' name='idleSpeedThreshold' type64='d'/>
<field declared_type='cpFloat' type='f' name='sleepTimeThreshold' type64='d'/>
<field declared_type='cpFloat' type='f' name='collisionSlop' type64='d'/>
<field declared_type='cpFloat' type='f' name='collisionBias' type64='d'/>
<field declared_type='cpTimestamp' type='I' name='collisionPersistence'/>
<field declared_type='cpBool' type='i' name='enableContactGraph'/>
<field declared_type='cpDataPointer' type='^v' name='data'/>
<field declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='staticBody' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<field declared_type='cpTimestamp' type='I' name='stamp_private'/>
<field declared_type='cpFloat' type='f' name='curr_dt_private' type64='d'/>
<field declared_type='cpArray*' type='^{cpArray=ii^^v}' name='bodies_private'/>
<field declared_type='cpArray*' type='^{cpArray=ii^^v}' name='rousedBodies_private'/>
<field declared_type='cpArray*' type='^{cpArray=ii^^v}' name='sleepingComponents_private'/>
<field declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}' name='staticShapes_private'/>
<field declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}' name='activeShapes_private'/>
<field declared_type='cpArray*' type='^{cpArray=ii^^v}' name='arbiters_private'/>
<field declared_type='cpContactBufferHeader*' type='^{cpContactBufferHeader=}' name='contactBuffersHead_private'/>
<field declared_type='cpHashSet*' type='^{cpHashSet=}' name='cachedArbiters_private'/>
<field declared_type='cpArray*' type='^{cpArray=ii^^v}' name='pooledArbiters_private'/>
<field declared_type='cpArray*' type='^{cpArray=ii^^v}' name='constraints_private'/>
<field declared_type='cpArray*' type='^{cpArray=ii^^v}' name='allocatedBuffers_private'/>
<field declared_type='int' type='i' name='locked_private'/>
<field declared_type='cpHashSet*' type='^{cpHashSet=}' name='collisionHandlers_private'/>
<field declared_type='cpCollisionHandler' type='{cpCollisionHandler=&quot;a&quot;I&quot;b&quot;I&quot;begin&quot;^?&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;separate&quot;^?&quot;data&quot;^v}' name='defaultHandler_private' type64='{cpCollisionHandler=&quot;a&quot;Q&quot;b&quot;Q&quot;begin&quot;^?&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;separate&quot;^?&quot;data&quot;^v}'/>
<field declared_type='cpBool' type='i' name='skipPostStep_private'/>
<field declared_type='cpArray*' type='^{cpArray=ii^^v}' name='postStepCallbacks_private'/>
<field declared_type='cpBody' type='{cpBody=&quot;velocity_func&quot;^?&quot;position_func&quot;^?&quot;m&quot;f&quot;m_inv&quot;f&quot;i&quot;f&quot;i_inv&quot;f&quot;p&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;v&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;f&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;a&quot;f&quot;w&quot;f&quot;t&quot;f&quot;rot&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;data&quot;^v&quot;v_limit&quot;f&quot;w_limit&quot;f&quot;v_bias_private&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;w_bias_private&quot;f&quot;space_private&quot;^{cpSpace}&quot;shapeList_private&quot;^{cpShape}&quot;arbiterList_private&quot;^{cpArbiter}&quot;constraintList_private&quot;^{cpConstraint}&quot;node_private&quot;{cpComponentNode=&quot;root&quot;^{cpBody}&quot;next&quot;^{cpBody}&quot;idleTime&quot;f}}' name='_staticBody_private' type64='{cpBody=&quot;velocity_func&quot;^?&quot;position_func&quot;^?&quot;m&quot;d&quot;m_inv&quot;d&quot;i&quot;d&quot;i_inv&quot;d&quot;p&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;v&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;f&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;a&quot;d&quot;w&quot;d&quot;t&quot;d&quot;rot&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;data&quot;^v&quot;v_limit&quot;d&quot;w_limit&quot;d&quot;v_bias_private&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;w_bias_private&quot;d&quot;space_private&quot;^{cpSpace}&quot;shapeList_private&quot;^{cpShape}&quot;arbiterList_private&quot;^{cpArbiter}&quot;constraintList_private&quot;^{cpConstraint}&quot;node_private&quot;{cpComponentNode=&quot;root&quot;^{cpBody}&quot;next&quot;^{cpBody}&quot;idleTime&quot;d}}'/>
</struct>
<struct type='{cpSpatialIndex=&quot;klass&quot;^{cpSpatialIndexClass}&quot;bbfunc&quot;^?&quot;staticIndex&quot;^{cpSpatialIndex}&quot;dynamicIndex&quot;^{cpSpatialIndex}}' name='cpSpatialIndex'>
<field declared_type='cpSpatialIndexClass*' type='^{cpSpatialIndexClass=^?^?^?^?^?^?^?^?^?^?^?}' name='klass'/>
<field declared_type='cpSpatialIndexBBFunc' type='^?' name='bbfunc' function_pointer='true'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBB' type='{cpBB=ffff}' type64='{cpBB=dddd}'/>
</field>
<field declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}' name='staticIndex'/>
<field declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}' name='dynamicIndex'/>
</struct>
<struct type='{cpSpatialIndexClass=&quot;destroy&quot;^?&quot;count&quot;^?&quot;each&quot;^?&quot;contains&quot;^?&quot;insert&quot;^?&quot;remove&quot;^?&quot;reindex&quot;^?&quot;reindexObject&quot;^?&quot;reindexQuery&quot;^?&quot;query&quot;^?&quot;segmentQuery&quot;^?}' name='cpSpatialIndexClass'>
<field declared_type='cpSpatialIndexDestroyImpl' type='^?' name='destroy' function_pointer='true'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpSpatialIndexCountImpl' type='^?' name='count' function_pointer='true'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='cpSpatialIndexEachImpl' type='^?' name='each' function_pointer='true'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='cpSpatialIndexIteratorFunc' type='^?'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpSpatialIndexContainsImpl' type='^?' name='contains' function_pointer='true'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='cpHashValue' type='L' type64='Q'/>
<retval declared_type='cpBool' type='i'/>
</field>
<field declared_type='cpSpatialIndexInsertImpl' type='^?' name='insert' function_pointer='true'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='cpHashValue' type='L' type64='Q'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpSpatialIndexRemoveImpl' type='^?' name='remove' function_pointer='true'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='cpHashValue' type='L' type64='Q'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpSpatialIndexReindexImpl' type='^?' name='reindex' function_pointer='true'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpSpatialIndexReindexObjectImpl' type='^?' name='reindexObject' function_pointer='true'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='cpHashValue' type='L' type64='Q'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpSpatialIndexReindexQueryImpl' type='^?' name='reindexQuery' function_pointer='true'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='cpSpatialIndexQueryFunc' type='^?'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpSpatialIndexQueryImpl' type='^?' name='query' function_pointer='true'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='cpBB' type='{cpBB=ffff}' type64='{cpBB=dddd}'/>
<arg declared_type='cpSpatialIndexQueryFunc' type='^?'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpSpatialIndexSegmentQueryImpl' type='^?' name='segmentQuery' function_pointer='true'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<arg declared_type='cpFloat' type='f' type64='d'/>
<arg declared_type='cpSpatialIndexSegmentQueryFunc' type='^?'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
</struct>
<struct type='{cpSplittingPlane=&quot;n&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;d&quot;f}' name='cpSplittingPlane' type64='{cpSplittingPlane=&quot;n&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;d&quot;d}'>
<field declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='n' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='cpFloat' type='f' name='d' type64='d'/>
</struct>
<struct type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}' name='cpVect' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'>
<field declared_type='CGFloat' type='f' name='x' type64='d'/>
<field declared_type='CGFloat' type='f' name='y' type64='d'/>
</struct>
<opaque type='^{cpBBTree=}' name='cpBBTree'/>
<opaque type='^{cpContactBufferHeader=}' name='cpContactBufferHeader'/>
<opaque type='^{cpHashSet=}' name='cpHashSet'/>
<opaque type='^{cpSpaceHash=}' name='cpSpaceHash'/>
<opaque type='^{cpSweep1D=}' name='cpSweep1D'/>
<constant declared_type='cpCollisionHandler' type='{cpCollisionHandler=II^?^?^?^?^v}' name='cpDefaultCollisionHandler' type64='{cpCollisionHandler=QQ^?^?^?^?^v}'/>
<constant declared_type='char*' type='*' name='cpVersionString' const='true'/>
<constant declared_type='cpVect' type='{CGPoint=ff}' name='cpvzero' const='true' type64='{CGPoint=dd}'/>
<enum name='CP_ALLOW_PRIVATE_ACCESS' value='1'/>
<enum name='CP_ALL_LAYERS' value='4294967295'/>
<enum name='CP_BUFFER_BYTES' value='32768'/>
<enum name='CP_CIRCLE_SHAPE' value='0'/>
<enum name='CP_HASH_COEF' value='3344921057'/>
<enum name='CP_MAX_CONTACTS_PER_ARBITER' value='4'/>
<enum name='CP_NO_GROUP' value='0'/>
<enum name='CP_NUM_SHAPES' value='3'/>
<enum name='CP_POLY_SHAPE' value='2'/>
<enum name='CP_SEGMENT_SHAPE' value='1'/>
<enum name='CP_USE_CGPOINTS' value='1'/>
<enum name='CP_USE_DOUBLES' value='0' value64='1'/>
<enum name='CP_VERSION_MAJOR' value='6'/>
<enum name='CP_VERSION_MINOR' value='1'/>
<enum name='CP_VERSION_RELEASE' value='1'/>
<enum name='cpArbiterStateCached' value='3'/>
<enum name='cpArbiterStateFirstColl' value='0'/>
<enum name='cpArbiterStateIgnore' value='2'/>
<enum name='cpArbiterStateNormal' value='1'/>
<enum name='cpFalse' value='0'/>
<enum name='cpTrue' value='1'/>
<function name='apply_bias_impulse' inline='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='j' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='r' type64='{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='apply_bias_impulses' inline='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='a' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='b' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='r1' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='r2' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='j' type64='{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='apply_impulse' inline='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='j' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='r' type64='{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='apply_impulses' inline='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='a' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='b' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='r1' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='r2' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='j' type64='{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='bias_coef' inline='true'>
<arg declared_type='cpFloat' type='f' name='errorBias' type64='d'/>
<arg declared_type='cpFloat' type='f' name='dt' type64='d'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpArbiterApplyCachedImpulse'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' name='arb' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpFloat' type='f' name='dt_coef' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterApplyImpulse'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' name='arb' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterCallSeparate' inline='true'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' name='arb' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterGetBodies' inline='true'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' name='arb' const='true' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpBody**' type='^^{cpBody}' name='a'/>
<arg declared_type='cpBody**' type='^^{cpBody}' name='b'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterGetContactPointSet'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' name='arb' const='true' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<retval declared_type='cpContactPointSet' type='{cpContactPointSet=i[4{?={CGPoint=ff}{CGPoint=ff}f}]}' type64='{cpContactPointSet=i[4{?={CGPoint=dd}{CGPoint=dd}d}]}'/>
</function>
<function name='cpArbiterGetCount'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' name='arb' const='true' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpArbiterGetDepth'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' name='arb' const='true' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='int' type='i' name='i'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpArbiterGetElasticity' inline='true'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' name='arb' const='true' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpArbiterGetFriction' inline='true'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' name='arb' const='true' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpArbiterGetNormal'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' name='arb' const='true' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='int' type='i' name='i'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpArbiterGetPoint'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' name='arb' const='true' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='int' type='i' name='i'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpArbiterGetShapes' inline='true'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' name='arb' const='true' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpShape**' type='^^{cpShape}' name='a'/>
<arg declared_type='cpShape**' type='^^{cpShape}' name='b'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterGetSurfaceVelocity' inline='true'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' name='arb' const='true' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpArbiterIgnore'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' name='arb' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterInit'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' name='arb' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='a' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='b' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<retval declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
</function>
<function name='cpArbiterIsFirstContact'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' name='arb' const='true' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpArbiterNext' inline='true'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' name='node' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<retval declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
</function>
<function name='cpArbiterPreStep'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' name='arb' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpFloat' type='f' name='dt' type64='d'/>
<arg declared_type='cpFloat' type='f' name='bias' type64='d'/>
<arg declared_type='cpFloat' type='f' name='slop' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterSetElasticity' inline='true'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' name='arb' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpFloat' type='f' name='value' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterSetFriction' inline='true'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' name='arb' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpFloat' type='f' name='value' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterSetSurfaceVelocity' inline='true'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' name='arb' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='value' type64='{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterThreadForBody' inline='true'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' name='arb' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<retval declared_type='struct cpArbiterThread*' type='^{cpArbiterThread=^{cpArbiter}^{cpArbiter}}'/>
</function>
<function name='cpArbiterTotalImpulse'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' name='arb' const='true' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpArbiterTotalImpulseWithFriction'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' name='arb' const='true' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpArbiterTotalKE'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' name='arb' const='true' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpArbiterUnthread'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' name='arb' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterUpdate'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' name='arb' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpContact*' type='^{cpContact={CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}fffffffI}' name='contacts' type64='^{cpContact={CGPoint=dd}{CGPoint=dd}d{CGPoint=dd}{CGPoint=dd}dddddddQ}'/>
<arg declared_type='int' type='i' name='numContacts'/>
<arg declared_type='struct cpCollisionHandler*' type='^{cpCollisionHandler=II^?^?^?^?^v}' name='handler' type64='^{cpCollisionHandler=QQ^?^?^?^?^v}'/>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='a' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='b' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpAreaForCircle'>
<arg declared_type='cpFloat' type='f' name='r1' type64='d'/>
<arg declared_type='cpFloat' type='f' name='r2' type64='d'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpAreaForPoly'>
<arg declared_type='int' type='i' name='numVerts' const='true'/>
<arg declared_type='cpVect*' type='^{CGPoint=ff}' name='verts' const='true' type64='^{CGPoint=dd}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpAreaForSegment'>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='a' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='b' type64='{CGPoint=dd}'/>
<arg declared_type='cpFloat' type='f' name='r' type64='d'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpArrayContains'>
<arg declared_type='cpArray*' type='^{cpArray=ii^^v}' name='arr'/>
<arg declared_type='void*' type='^v' name='ptr'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpArrayDeleteObj'>
<arg declared_type='cpArray*' type='^{cpArray=ii^^v}' name='arr'/>
<arg declared_type='void*' type='^v' name='obj'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArrayFree'>
<arg declared_type='cpArray*' type='^{cpArray=ii^^v}' name='arr'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArrayFreeEach'>
<arg declared_type='cpArray*' type='^{cpArray=ii^^v}' name='arr'/>
<arg declared_type='void (*)(void *)' type='^?' name='freeFunc' function_pointer='true'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArrayNew'>
<arg declared_type='int' type='i' name='size'/>
<retval declared_type='cpArray*' type='^{cpArray=ii^^v}'/>
</function>
<function name='cpArrayPop'>
<arg declared_type='cpArray*' type='^{cpArray=ii^^v}' name='arr'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='cpArrayPush'>
<arg declared_type='cpArray*' type='^{cpArray=ii^^v}' name='arr'/>
<arg declared_type='void*' type='^v' name='object'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBBArea' inline='true'>
<arg declared_type='cpBB' type='{cpBB=ffff}' name='bb' type64='{cpBB=dddd}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpBBClampVect'>
<arg declared_type='cpBB' type='{cpBB=ffff}' name='bb' const='true' type64='{cpBB=dddd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v' const='true' type64='{CGPoint=dd}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpBBContainsBB' inline='true'>
<arg declared_type='cpBB' type='{cpBB=ffff}' name='bb' const='true' type64='{cpBB=dddd}'/>
<arg declared_type='cpBB' type='{cpBB=ffff}' name='other' const='true' type64='{cpBB=dddd}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpBBContainsVect' inline='true'>
<arg declared_type='cpBB' type='{cpBB=ffff}' name='bb' const='true' type64='{cpBB=dddd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v' const='true' type64='{CGPoint=dd}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpBBExpand' inline='true'>
<arg declared_type='cpBB' type='{cpBB=ffff}' name='bb' const='true' type64='{cpBB=dddd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v' const='true' type64='{CGPoint=dd}'/>
<retval declared_type='cpBB' type='{cpBB=ffff}' type64='{cpBB=dddd}'/>
</function>
<function name='cpBBIntersects' inline='true'>
<arg declared_type='cpBB' type='{cpBB=ffff}' name='a' const='true' type64='{cpBB=dddd}'/>
<arg declared_type='cpBB' type='{cpBB=ffff}' name='b' const='true' type64='{cpBB=dddd}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpBBIntersectsSegment' inline='true'>
<arg declared_type='cpBB' type='{cpBB=ffff}' name='bb' type64='{cpBB=dddd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='a' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='b' type64='{CGPoint=dd}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpBBMerge' inline='true'>
<arg declared_type='cpBB' type='{cpBB=ffff}' name='a' const='true' type64='{cpBB=dddd}'/>
<arg declared_type='cpBB' type='{cpBB=ffff}' name='b' const='true' type64='{cpBB=dddd}'/>
<retval declared_type='cpBB' type='{cpBB=ffff}' type64='{cpBB=dddd}'/>
</function>
<function name='cpBBMergedArea' inline='true'>
<arg declared_type='cpBB' type='{cpBB=ffff}' name='a' type64='{cpBB=dddd}'/>
<arg declared_type='cpBB' type='{cpBB=ffff}' name='b' type64='{cpBB=dddd}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpBBNew' inline='true'>
<arg declared_type='cpFloat' type='f' name='l' const='true' type64='d'/>
<arg declared_type='cpFloat' type='f' name='b' const='true' type64='d'/>
<arg declared_type='cpFloat' type='f' name='r' const='true' type64='d'/>
<arg declared_type='cpFloat' type='f' name='t' const='true' type64='d'/>
<retval declared_type='cpBB' type='{cpBB=ffff}' type64='{cpBB=dddd}'/>
</function>
<function name='cpBBNewForCircle' inline='true'>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='p' const='true' type64='{CGPoint=dd}'/>
<arg declared_type='cpFloat' type='f' name='r' const='true' type64='d'/>
<retval declared_type='cpBB' type='{cpBB=ffff}' type64='{cpBB=dddd}'/>
</function>
<function name='cpBBSegmentQuery' inline='true'>
<arg declared_type='cpBB' type='{cpBB=ffff}' name='bb' type64='{cpBB=dddd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='a' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='b' type64='{CGPoint=dd}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpBBTreeAlloc'>
<retval declared_type='cpBBTree*' type='^{cpBBTree=}'/>
</function>
<function name='cpBBTreeInit'>
<arg declared_type='cpBBTree*' type='^{cpBBTree=}' name='tree'/>
<arg declared_type='cpSpatialIndexBBFunc' type='^?' name='bbfunc' function_pointer='true'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBB' type='{cpBB=ffff}' type64='{cpBB=dddd}'/>
</arg>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}' name='staticIndex'/>
<retval declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
</function>
<function name='cpBBTreeNew'>
<arg declared_type='cpSpatialIndexBBFunc' type='^?' name='bbfunc' function_pointer='true'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBB' type='{cpBB=ffff}' type64='{cpBB=dddd}'/>
</arg>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}' name='staticIndex'/>
<retval declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
</function>
<function name='cpBBTreeOptimize'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}' name='index'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBBTreeSetVelocityFunc'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}' name='index'/>
<arg declared_type='cpBBTreeVelocityFunc' type='^?' name='func' function_pointer='true'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBBWrapVect'>
<arg declared_type='cpBB' type='{cpBB=ffff}' name='bb' const='true' type64='{cpBB=dddd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v' const='true' type64='{CGPoint=dd}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpBodyActivate'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyActivateStatic'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='filter' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyAddShape'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyAlloc'>
<retval declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
</function>
<function name='cpBodyApplyForce'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='f' const='true' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='r' const='true' type64='{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyApplyImpulse'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='j' const='true' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='r' const='true' type64='{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyDestroy'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyEachArbiter'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpBodyArbiterIteratorFunc' type='^?' name='func' function_pointer='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' type='^v' name='data'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyEachConstraint'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpBodyConstraintIteratorFunc' type='^?' name='func' function_pointer='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' type='^v' name='data'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyEachShape'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpBodyShapeIteratorFunc' type='^?' name='func' function_pointer='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' type='^v' name='data'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyFree'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyGetAngVel' inline='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' const='true' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpBodyGetAngVelLimit' inline='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' const='true' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpBodyGetAngle' inline='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' const='true' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpBodyGetForce' inline='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' const='true' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpBodyGetMass' inline='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' const='true' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpBodyGetMoment' inline='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' const='true' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpBodyGetPos' inline='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' const='true' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpBodyGetRot' inline='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' const='true' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpBodyGetSpace' inline='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' const='true' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<retval declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
</function>
<function name='cpBodyGetTorque' inline='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' const='true' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpBodyGetUserData' inline='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' const='true' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<retval declared_type='cpDataPointer' type='^v'/>
</function>
<function name='cpBodyGetVel' inline='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' const='true' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpBodyGetVelAtLocalPoint'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='point' type64='{CGPoint=dd}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpBodyGetVelAtWorldPoint'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='point' type64='{CGPoint=dd}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpBodyGetVelLimit' inline='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' const='true' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpBodyInit'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpFloat' type='f' name='m' type64='d'/>
<arg declared_type='cpFloat' type='f' name='i' type64='d'/>
<retval declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
</function>
<function name='cpBodyInitStatic'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<retval declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
</function>
<function name='cpBodyIsRogue' inline='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' const='true' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpBodyIsSleeping' inline='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' const='true' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpBodyIsStatic' inline='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' const='true' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpBodyKineticEnergy' inline='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' const='true' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpBodyLocal2World' inline='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' const='true' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v' const='true' type64='{CGPoint=dd}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpBodyNew'>
<arg declared_type='cpFloat' type='f' name='m' type64='d'/>
<arg declared_type='cpFloat' type='f' name='i' type64='d'/>
<retval declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
</function>
<function name='cpBodyNewStatic'>
<retval declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
</function>
<function name='cpBodyRemoveConstraint'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyRemoveShape'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyResetForces'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySanityCheck'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetAngVel' inline='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpFloat' type='f' name='value' const='true' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetAngVelLimit' inline='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpFloat' type='f' name='value' const='true' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetAngle'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpFloat' type='f' name='a' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetForce' inline='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='value' const='true' type64='{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetMass'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpFloat' type='f' name='m' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetMoment'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpFloat' type='f' name='i' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetPos'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='pos' type64='{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetTorque' inline='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpFloat' type='f' name='value' const='true' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetUserData' inline='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpDataPointer' type='^v' name='value' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetVel' inline='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='value' const='true' type64='{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetVelLimit' inline='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpFloat' type='f' name='value' const='true' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySleep'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySleepWithGroup'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='group' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyUpdatePosition'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpFloat' type='f' name='dt' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyUpdateVelocity'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='gravity' type64='{CGPoint=dd}'/>
<arg declared_type='cpFloat' type='f' name='damping' type64='d'/>
<arg declared_type='cpFloat' type='f' name='dt' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyWorld2Local' inline='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' const='true' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v' const='true' type64='{CGPoint=dd}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpBoxShapeInit'>
<arg declared_type='cpPolyShape*' type='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}i^{CGPoint}^{CGPoint}^{cpSplittingPlane}^{cpSplittingPlane}}' name='poly' type64='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}i^{CGPoint}^{CGPoint}^{cpSplittingPlane}^{cpSplittingPlane}}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpFloat' type='f' name='width' type64='d'/>
<arg declared_type='cpFloat' type='f' name='height' type64='d'/>
<retval declared_type='cpPolyShape*' type='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}i^{CGPoint}^{CGPoint}^{cpSplittingPlane}^{cpSplittingPlane}}' type64='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}i^{CGPoint}^{CGPoint}^{cpSplittingPlane}^{cpSplittingPlane}}'/>
</function>
<function name='cpBoxShapeInit2'>
<arg declared_type='cpPolyShape*' type='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}i^{CGPoint}^{CGPoint}^{cpSplittingPlane}^{cpSplittingPlane}}' name='poly' type64='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}i^{CGPoint}^{CGPoint}^{cpSplittingPlane}^{cpSplittingPlane}}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpBB' type='{cpBB=ffff}' name='box' type64='{cpBB=dddd}'/>
<retval declared_type='cpPolyShape*' type='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}i^{CGPoint}^{CGPoint}^{cpSplittingPlane}^{cpSplittingPlane}}' type64='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}i^{CGPoint}^{CGPoint}^{cpSplittingPlane}^{cpSplittingPlane}}'/>
</function>
<function name='cpBoxShapeNew'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpFloat' type='f' name='width' type64='d'/>
<arg declared_type='cpFloat' type='f' name='height' type64='d'/>
<retval declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
</function>
<function name='cpBoxShapeNew2'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpBB' type='{cpBB=ffff}' name='box' type64='{cpBB=dddd}'/>
<retval declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
</function>
<function name='cpCentroidForPoly'>
<arg declared_type='int' type='i' name='numVerts' const='true'/>
<arg declared_type='cpVect*' type='^{CGPoint=ff}' name='verts' const='true' type64='^{CGPoint=dd}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpCircleShapeAlloc'>
<retval declared_type='cpCircleShape*' type='^{cpCircleShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}{CGPoint=ff}{CGPoint=ff}f}' type64='^{cpCircleShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}{CGPoint=dd}{CGPoint=dd}d}'/>
</function>
<function name='cpCircleShapeGetOffset'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' const='true' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpCircleShapeGetRadius'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' const='true' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpCircleShapeInit'>
<arg declared_type='cpCircleShape*' type='^{cpCircleShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}{CGPoint=ff}{CGPoint=ff}f}' name='circle' type64='^{cpCircleShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}{CGPoint=dd}{CGPoint=dd}d}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpFloat' type='f' name='radius' type64='d'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='offset' type64='{CGPoint=dd}'/>
<retval declared_type='cpCircleShape*' type='^{cpCircleShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}{CGPoint=ff}{CGPoint=ff}f}' type64='^{cpCircleShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}{CGPoint=dd}{CGPoint=dd}d}'/>
</function>
<function name='cpCircleShapeNew'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpFloat' type='f' name='radius' type64='d'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='offset' type64='{CGPoint=dd}'/>
<retval declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
</function>
<function name='cpCircleShapeSetOffset'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='offset' type64='{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpCircleShapeSetRadius'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<arg declared_type='cpFloat' type='f' name='radius' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpClosetPointOnSegment' inline='true'>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='p' const='true' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='a' const='true' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='b' const='true' type64='{CGPoint=dd}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpCollideShapes'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='a' const='true' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='b' const='true' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<arg declared_type='cpContact*' type='^{cpContact={CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}fffffffI}' name='arr' type64='^{cpContact={CGPoint=dd}{CGPoint=dd}d{CGPoint=dd}{CGPoint=dd}dddddddQ}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpConstraintActivateBodies' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpConstraintDestroy'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpConstraintFree'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpConstraintGetA' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' const='true' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
</function>
<function name='cpConstraintGetB' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' const='true' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
</function>
<function name='cpConstraintGetErrorBias' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' const='true' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpConstraintGetImpulse' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpConstraintGetMaxBias' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' const='true' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpConstraintGetMaxForce' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' const='true' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpConstraintGetPostSolveFunc' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' const='true' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpConstraintPostSolveFunc' type='^?' function_pointer='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='cpConstraintGetPreSolveFunc' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' const='true' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpConstraintPreSolveFunc' type='^?' function_pointer='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='cpConstraintGetSpace' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' const='true' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
</function>
<function name='cpConstraintGetUserData' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' const='true' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpDataPointer' type='^v'/>
</function>
<function name='cpConstraintInit'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpConstraintClass*' type='^{cpConstraintClass=^?^?^?^?}' name='klass' const='true'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='a' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='b' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpConstraintNext' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='node' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
</function>
<function name='cpConstraintSetErrorBias' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpFloat' type='f' name='value' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpConstraintSetMaxBias' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpFloat' type='f' name='value' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpConstraintSetMaxForce' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpFloat' type='f' name='value' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpConstraintSetPostSolveFunc' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpConstraintPostSolveFunc' type='^?' name='value' function_pointer='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='cpConstraintSetPreSolveFunc' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpConstraintPreSolveFunc' type='^?' name='value' function_pointer='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='cpConstraintSetUserData' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpDataPointer' type='^v' name='value'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpContactBufferGetArray'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<retval declared_type='cpContact*' type='^{cpContact={CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}fffffffI}' type64='^{cpContact={CGPoint=dd}{CGPoint=dd}d{CGPoint=dd}{CGPoint=dd}dddddddQ}'/>
</function>
<function name='cpContactInit'>
<arg declared_type='cpContact*' type='^{cpContact={CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}fffffffI}' name='con' type64='^{cpContact={CGPoint=dd}{CGPoint=dd}d{CGPoint=dd}{CGPoint=dd}dddddddQ}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='p' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='n' type64='{CGPoint=dd}'/>
<arg declared_type='cpFloat' type='f' name='dist' type64='d'/>
<arg declared_type='cpHashValue' type='L' name='hash' type64='Q'/>
<retval declared_type='cpContact*' type='^{cpContact={CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}fffffffI}' type64='^{cpContact={CGPoint=dd}{CGPoint=dd}d{CGPoint=dd}{CGPoint=dd}dddddddQ}'/>
</function>
<function name='cpConvexHull'>
<arg declared_type='int' type='i' name='count'/>
<arg declared_type='cpVect*' type='^{CGPoint=ff}' name='verts' type64='^{CGPoint=dd}'/>
<arg declared_type='cpVect*' type='^{CGPoint=ff}' name='result' type64='^{CGPoint=dd}'/>
<arg declared_type='int*' type='^i' name='first'/>
<arg declared_type='cpFloat' type='f' name='tol' type64='d'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpDampedRotarySpringAlloc'>
<retval declared_type='cpDampedRotarySpring*' type='^{cpDampedRotarySpring={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}fff^?fff}' type64='^{cpDampedRotarySpring={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}ddd^?ddd}'/>
</function>
<function name='cpDampedRotarySpringGetClass'>
<retval declared_type='cpConstraintClass*' type='^{cpConstraintClass=^?^?^?^?}' const='true'/>
</function>
<function name='cpDampedRotarySpringGetDamping' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' const='true' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpDampedRotarySpringGetRestAngle' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' const='true' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpDampedRotarySpringGetSpringTorqueFunc' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' const='true' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpDampedRotarySpringTorqueFunc' type='^?' function_pointer='true'>
<arg declared_type='struct cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpFloat' type='f' type64='d'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</retval>
</function>
<function name='cpDampedRotarySpringGetStiffness' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' const='true' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpDampedRotarySpringInit'>
<arg declared_type='cpDampedRotarySpring*' type='^{cpDampedRotarySpring={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}fff^?fff}' name='joint' type64='^{cpDampedRotarySpring={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}ddd^?ddd}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='a' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='b' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpFloat' type='f' name='restAngle' type64='d'/>
<arg declared_type='cpFloat' type='f' name='stiffness' type64='d'/>
<arg declared_type='cpFloat' type='f' name='damping' type64='d'/>
<retval declared_type='cpDampedRotarySpring*' type='^{cpDampedRotarySpring={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}fff^?fff}' type64='^{cpDampedRotarySpring={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}ddd^?ddd}'/>
</function>
<function name='cpDampedRotarySpringNew'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='a' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='b' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpFloat' type='f' name='restAngle' type64='d'/>
<arg declared_type='cpFloat' type='f' name='stiffness' type64='d'/>
<arg declared_type='cpFloat' type='f' name='damping' type64='d'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
</function>
<function name='cpDampedRotarySpringSetDamping' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpFloat' type='f' name='value' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpDampedRotarySpringSetRestAngle' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpFloat' type='f' name='value' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpDampedRotarySpringSetSpringTorqueFunc' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpDampedRotarySpringTorqueFunc' type='^?' name='value' function_pointer='true'>
<arg declared_type='struct cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpFloat' type='f' type64='d'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='cpDampedRotarySpringSetStiffness' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpFloat' type='f' name='value' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpDampedSpringAlloc'>
<retval declared_type='cpDampedSpring*' type='^{cpDampedSpring={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}fff^?ff{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}}' type64='^{cpDampedSpring={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}{CGPoint=dd}{CGPoint=dd}ddd^?dd{CGPoint=dd}{CGPoint=dd}d{CGPoint=dd}}'/>
</function>
<function name='cpDampedSpringGetAnchr1' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' const='true' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpDampedSpringGetAnchr2' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' const='true' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpDampedSpringGetClass'>
<retval declared_type='cpConstraintClass*' type='^{cpConstraintClass=^?^?^?^?}' const='true'/>
</function>
<function name='cpDampedSpringGetDamping' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' const='true' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpDampedSpringGetRestLength' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' const='true' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpDampedSpringGetSpringForceFunc' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' const='true' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpDampedSpringForceFunc' type='^?' function_pointer='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpFloat' type='f' type64='d'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</retval>
</function>
<function name='cpDampedSpringGetStiffness' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' const='true' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpDampedSpringInit'>
<arg declared_type='cpDampedSpring*' type='^{cpDampedSpring={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}fff^?ff{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}}' name='joint' type64='^{cpDampedSpring={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}{CGPoint=dd}{CGPoint=dd}ddd^?dd{CGPoint=dd}{CGPoint=dd}d{CGPoint=dd}}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='a' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='b' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='anchr1' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='anchr2' type64='{CGPoint=dd}'/>
<arg declared_type='cpFloat' type='f' name='restLength' type64='d'/>
<arg declared_type='cpFloat' type='f' name='stiffness' type64='d'/>
<arg declared_type='cpFloat' type='f' name='damping' type64='d'/>
<retval declared_type='cpDampedSpring*' type='^{cpDampedSpring={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}fff^?ff{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}}' type64='^{cpDampedSpring={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}{CGPoint=dd}{CGPoint=dd}ddd^?dd{CGPoint=dd}{CGPoint=dd}d{CGPoint=dd}}'/>
</function>
<function name='cpDampedSpringNew'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='a' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='b' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='anchr1' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='anchr2' type64='{CGPoint=dd}'/>
<arg declared_type='cpFloat' type='f' name='restLength' type64='d'/>
<arg declared_type='cpFloat' type='f' name='stiffness' type64='d'/>
<arg declared_type='cpFloat' type='f' name='damping' type64='d'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
</function>
<function name='cpDampedSpringSetAnchr1' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='value' type64='{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpDampedSpringSetAnchr2' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='value' type64='{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpDampedSpringSetDamping' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpFloat' type='f' name='value' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpDampedSpringSetRestLength' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpFloat' type='f' name='value' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpDampedSpringSetSpringForceFunc' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpDampedSpringForceFunc' type='^?' name='value' function_pointer='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpFloat' type='f' type64='d'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='cpDampedSpringSetStiffness' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpFloat' type='f' name='value' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpGearJointAlloc'>
<retval declared_type='cpGearJoint*' type='^{cpGearJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}fffffff}' type64='^{cpGearJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}ddddddd}'/>
</function>
<function name='cpGearJointGetClass'>
<retval declared_type='cpConstraintClass*' type='^{cpConstraintClass=^?^?^?^?}' const='true'/>
</function>
<function name='cpGearJointGetPhase' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' const='true' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpGearJointGetRatio' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' const='true' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpGearJointInit'>
<arg declared_type='cpGearJoint*' type='^{cpGearJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}fffffff}' name='joint' type64='^{cpGearJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}ddddddd}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='a' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='b' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpFloat' type='f' name='phase' type64='d'/>
<arg declared_type='cpFloat' type='f' name='ratio' type64='d'/>
<retval declared_type='cpGearJoint*' type='^{cpGearJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}fffffff}' type64='^{cpGearJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}ddddddd}'/>
</function>
<function name='cpGearJointNew'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='a' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='b' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpFloat' type='f' name='phase' type64='d'/>
<arg declared_type='cpFloat' type='f' name='ratio' type64='d'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
</function>
<function name='cpGearJointSetPhase' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpFloat' type='f' name='value' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpGearJointSetRatio'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpFloat' type='f' name='value' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpGrooveJointAlloc'>
<retval declared_type='cpGrooveJoint*' type='^{cpGrooveJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}}' type64='^{cpGrooveJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}d{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}d{CGPoint=dd}}'/>
</function>
<function name='cpGrooveJointGetAnchr2' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' const='true' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpGrooveJointGetClass'>
<retval declared_type='cpConstraintClass*' type='^{cpConstraintClass=^?^?^?^?}' const='true'/>
</function>
<function name='cpGrooveJointGetGrooveA' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' const='true' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpGrooveJointGetGrooveB' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' const='true' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpGrooveJointInit'>
<arg declared_type='cpGrooveJoint*' type='^{cpGrooveJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}}' name='joint' type64='^{cpGrooveJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}d{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}d{CGPoint=dd}}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='a' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='b' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='groove_a' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='groove_b' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='anchr2' type64='{CGPoint=dd}'/>
<retval declared_type='cpGrooveJoint*' type='^{cpGrooveJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}}' type64='^{cpGrooveJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}d{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}d{CGPoint=dd}}'/>
</function>
<function name='cpGrooveJointNew'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='a' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='b' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='groove_a' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='groove_b' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='anchr2' type64='{CGPoint=dd}'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
</function>
<function name='cpGrooveJointSetAnchr2' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='value' type64='{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpGrooveJointSetGrooveA'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='value' type64='{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpGrooveJointSetGrooveB'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='value' type64='{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpHashSetCount'>
<arg declared_type='cpHashSet*' type='^{cpHashSet=}' name='set'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpHashSetEach'>
<arg declared_type='cpHashSet*' type='^{cpHashSet=}' name='set'/>
<arg declared_type='cpHashSetIteratorFunc' type='^?' name='func' function_pointer='true'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' type='^v' name='data'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpHashSetFilter'>
<arg declared_type='cpHashSet*' type='^{cpHashSet=}' name='set'/>
<arg declared_type='cpHashSetFilterFunc' type='^?' name='func' function_pointer='true'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBool' type='i'/>
</arg>
<arg declared_type='void*' type='^v' name='data'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpHashSetFind'>
<arg declared_type='cpHashSet*' type='^{cpHashSet=}' name='set'/>
<arg declared_type='cpHashValue' type='L' name='hash' type64='Q'/>
<arg declared_type='void*' type='^v' name='ptr'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='cpHashSetFree'>
<arg declared_type='cpHashSet*' type='^{cpHashSet=}' name='set'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpHashSetInsert'>
<arg declared_type='cpHashSet*' type='^{cpHashSet=}' name='set'/>
<arg declared_type='cpHashValue' type='L' name='hash' type64='Q'/>
<arg declared_type='void*' type='^v' name='ptr'/>
<arg declared_type='void*' type='^v' name='data'/>
<arg declared_type='cpHashSetTransFunc' type='^?' name='trans' function_pointer='true'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void*' type='^v'/>
</arg>
<retval declared_type='void*' type='^v'/>
</function>
<function name='cpHashSetNew'>
<arg declared_type='int' type='i' name='size'/>
<arg declared_type='cpHashSetEqlFunc' type='^?' name='eqlFunc' function_pointer='true'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBool' type='i'/>
</arg>
<retval declared_type='cpHashSet*' type='^{cpHashSet=}'/>
</function>
<function name='cpHashSetRemove'>
<arg declared_type='cpHashSet*' type='^{cpHashSet=}' name='set'/>
<arg declared_type='cpHashValue' type='L' name='hash' type64='Q'/>
<arg declared_type='void*' type='^v' name='ptr'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='cpHashSetSetDefaultValue'>
<arg declared_type='cpHashSet*' type='^{cpHashSet=}' name='set'/>
<arg declared_type='void*' type='^v' name='default_value'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpInitChipmunk'>
<retval declared_type='void' type='v'/>
</function>
<function name='cpLoopIndexes'>
<arg declared_type='cpVect*' type='^{CGPoint=ff}' name='verts' type64='^{CGPoint=dd}'/>
<arg declared_type='int' type='i' name='count'/>
<arg declared_type='int*' type='^i' name='start'/>
<arg declared_type='int*' type='^i' name='end'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpMessage' variadic='true'>
<arg declared_type='char*' type='*' name='condition' const='true'/>
<arg declared_type='char*' type='*' name='file' const='true'/>
<arg declared_type='int' type='i' name='line'/>
<arg declared_type='int' type='i' name='isError'/>
<arg declared_type='int' type='i' name='isHardError'/>
<arg declared_type='char*' type='*' name='message' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpMomentForBox'>
<arg declared_type='cpFloat' type='f' name='m' type64='d'/>
<arg declared_type='cpFloat' type='f' name='width' type64='d'/>
<arg declared_type='cpFloat' type='f' name='height' type64='d'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpMomentForBox2'>
<arg declared_type='cpFloat' type='f' name='m' type64='d'/>
<arg declared_type='cpBB' type='{cpBB=ffff}' name='box' type64='{cpBB=dddd}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpMomentForCircle'>
<arg declared_type='cpFloat' type='f' name='m' type64='d'/>
<arg declared_type='cpFloat' type='f' name='r1' type64='d'/>
<arg declared_type='cpFloat' type='f' name='r2' type64='d'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='offset' type64='{CGPoint=dd}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpMomentForPoly'>
<arg declared_type='cpFloat' type='f' name='m' type64='d'/>
<arg declared_type='int' type='i' name='numVerts'/>
<arg declared_type='cpVect*' type='^{CGPoint=ff}' name='verts' const='true' type64='^{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='offset' type64='{CGPoint=dd}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpMomentForSegment'>
<arg declared_type='cpFloat' type='f' name='m' type64='d'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='a' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='b' type64='{CGPoint=dd}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpPinJointAlloc'>
<retval declared_type='cpPinJoint*' type='^{cpPinJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}ffff}' type64='^{cpPinJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}{CGPoint=dd}{CGPoint=dd}d{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}dddd}'/>
</function>
<function name='cpPinJointGetAnchr1' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' const='true' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpPinJointGetAnchr2' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' const='true' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpPinJointGetClass'>
<retval declared_type='cpConstraintClass*' type='^{cpConstraintClass=^?^?^?^?}' const='true'/>
</function>
<function name='cpPinJointGetDist' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' const='true' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpPinJointInit'>
<arg declared_type='cpPinJoint*' type='^{cpPinJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}ffff}' name='joint' type64='^{cpPinJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}{CGPoint=dd}{CGPoint=dd}d{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}dddd}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='a' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='b' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='anchr1' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='anchr2' type64='{CGPoint=dd}'/>
<retval declared_type='cpPinJoint*' type='^{cpPinJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}ffff}' type64='^{cpPinJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}{CGPoint=dd}{CGPoint=dd}d{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}dddd}'/>
</function>
<function name='cpPinJointNew'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='a' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='b' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='anchr1' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='anchr2' type64='{CGPoint=dd}'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
</function>
<function name='cpPinJointSetAnchr1' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='value' type64='{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpPinJointSetAnchr2' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='value' type64='{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpPinJointSetDist' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpFloat' type='f' name='value' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpPivotJointAlloc'>
<retval declared_type='cpPivotJoint*' type='^{cpPivotJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}}' type64='^{cpPivotJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}d{CGPoint=dd}}'/>
</function>
<function name='cpPivotJointGetAnchr1' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' const='true' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpPivotJointGetAnchr2' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' const='true' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpPivotJointGetClass'>
<retval declared_type='cpConstraintClass*' type='^{cpConstraintClass=^?^?^?^?}' const='true'/>
</function>
<function name='cpPivotJointInit'>
<arg declared_type='cpPivotJoint*' type='^{cpPivotJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}}' name='joint' type64='^{cpPivotJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}d{CGPoint=dd}}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='a' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='b' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='anchr1' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='anchr2' type64='{CGPoint=dd}'/>
<retval declared_type='cpPivotJoint*' type='^{cpPivotJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}}' type64='^{cpPivotJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}d{CGPoint=dd}}'/>
</function>
<function name='cpPivotJointNew'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='a' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='b' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='pivot' type64='{CGPoint=dd}'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
</function>
<function name='cpPivotJointNew2'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='a' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='b' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='anchr1' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='anchr2' type64='{CGPoint=dd}'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
</function>
<function name='cpPivotJointSetAnchr1' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='value' type64='{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpPivotJointSetAnchr2' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='value' type64='{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpPolyShapeAlloc'>
<retval declared_type='cpPolyShape*' type='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}i^{CGPoint}^{CGPoint}^{cpSplittingPlane}^{cpSplittingPlane}}' type64='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}i^{CGPoint}^{CGPoint}^{cpSplittingPlane}^{cpSplittingPlane}}'/>
</function>
<function name='cpPolyShapeContainsVert' inline='true'>
<arg declared_type='cpPolyShape*' type='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}i^{CGPoint}^{CGPoint}^{cpSplittingPlane}^{cpSplittingPlane}}' name='poly' const='true' type64='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}i^{CGPoint}^{CGPoint}^{cpSplittingPlane}^{cpSplittingPlane}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v' const='true' type64='{CGPoint=dd}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpPolyShapeContainsVertPartial' inline='true'>
<arg declared_type='cpPolyShape*' type='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}i^{CGPoint}^{CGPoint}^{cpSplittingPlane}^{cpSplittingPlane}}' name='poly' const='true' type64='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}i^{CGPoint}^{CGPoint}^{cpSplittingPlane}^{cpSplittingPlane}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v' const='true' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='n' const='true' type64='{CGPoint=dd}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpPolyShapeGetNumVerts'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpPolyShapeGetVert'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<arg declared_type='int' type='i' name='idx'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpPolyShapeInit'>
<arg declared_type='cpPolyShape*' type='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}i^{CGPoint}^{CGPoint}^{cpSplittingPlane}^{cpSplittingPlane}}' name='poly' type64='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}i^{CGPoint}^{CGPoint}^{cpSplittingPlane}^{cpSplittingPlane}}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='int' type='i' name='numVerts'/>
<arg declared_type='cpVect*' type='^{CGPoint=ff}' name='verts' type64='^{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='offset' type64='{CGPoint=dd}'/>
<retval declared_type='cpPolyShape*' type='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}i^{CGPoint}^{CGPoint}^{cpSplittingPlane}^{cpSplittingPlane}}' type64='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}i^{CGPoint}^{CGPoint}^{cpSplittingPlane}^{cpSplittingPlane}}'/>
</function>
<function name='cpPolyShapeNew'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='int' type='i' name='numVerts'/>
<arg declared_type='cpVect*' type='^{CGPoint=ff}' name='verts' type64='^{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='offset' type64='{CGPoint=dd}'/>
<retval declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
</function>
<function name='cpPolyShapeSetVerts'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<arg declared_type='int' type='i' name='numVerts'/>
<arg declared_type='cpVect*' type='^{CGPoint=ff}' name='verts' type64='^{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='offset' type64='{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpPolyShapeValueOnAxis' inline='true'>
<arg declared_type='cpPolyShape*' type='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}i^{CGPoint}^{CGPoint}^{cpSplittingPlane}^{cpSplittingPlane}}' name='poly' const='true' type64='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}i^{CGPoint}^{CGPoint}^{cpSplittingPlane}^{cpSplittingPlane}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='n' const='true' type64='{CGPoint=dd}'/>
<arg declared_type='cpFloat' type='f' name='d' const='true' type64='d'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpPolyValidate'>
<arg declared_type='cpVect*' type='^{CGPoint=ff}' name='verts' const='true' type64='^{CGPoint=dd}'/>
<arg declared_type='int' type='i' name='numVerts' const='true'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpRatchetJointAlloc'>
<retval declared_type='cpRatchetJoint*' type='^{cpRatchetJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}fffffff}' type64='^{cpRatchetJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}ddddddd}'/>
</function>
<function name='cpRatchetJointGetAngle' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' const='true' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpRatchetJointGetClass'>
<retval declared_type='cpConstraintClass*' type='^{cpConstraintClass=^?^?^?^?}' const='true'/>
</function>
<function name='cpRatchetJointGetPhase' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' const='true' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpRatchetJointGetRatchet' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' const='true' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpRatchetJointInit'>
<arg declared_type='cpRatchetJoint*' type='^{cpRatchetJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}fffffff}' name='joint' type64='^{cpRatchetJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}ddddddd}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='a' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='b' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpFloat' type='f' name='phase' type64='d'/>
<arg declared_type='cpFloat' type='f' name='ratchet' type64='d'/>
<retval declared_type='cpRatchetJoint*' type='^{cpRatchetJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}fffffff}' type64='^{cpRatchetJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}ddddddd}'/>
</function>
<function name='cpRatchetJointNew'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='a' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='b' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpFloat' type='f' name='phase' type64='d'/>
<arg declared_type='cpFloat' type='f' name='ratchet' type64='d'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
</function>
<function name='cpRatchetJointSetAngle' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpFloat' type='f' name='value' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpRatchetJointSetPhase' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpFloat' type='f' name='value' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpRatchetJointSetRatchet' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpFloat' type='f' name='value' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpRecenterPoly'>
<arg declared_type='int' type='i' name='numVerts' const='true'/>
<arg declared_type='cpVect*' type='^{CGPoint=ff}' name='verts' type64='^{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpResetShapeIdCounter'>
<retval declared_type='void' type='v'/>
</function>
<function name='cpRotaryLimitJointAlloc'>
<retval declared_type='cpRotaryLimitJoint*' type='^{cpRotaryLimitJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}ffffff}' type64='^{cpRotaryLimitJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}dddddd}'/>
</function>
<function name='cpRotaryLimitJointGetClass'>
<retval declared_type='cpConstraintClass*' type='^{cpConstraintClass=^?^?^?^?}' const='true'/>
</function>
<function name='cpRotaryLimitJointGetMax' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' const='true' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpRotaryLimitJointGetMin' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' const='true' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpRotaryLimitJointInit'>
<arg declared_type='cpRotaryLimitJoint*' type='^{cpRotaryLimitJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}ffffff}' name='joint' type64='^{cpRotaryLimitJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}dddddd}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='a' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='b' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpFloat' type='f' name='min' type64='d'/>
<arg declared_type='cpFloat' type='f' name='max' type64='d'/>
<retval declared_type='cpRotaryLimitJoint*' type='^{cpRotaryLimitJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}ffffff}' type64='^{cpRotaryLimitJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}dddddd}'/>
</function>
<function name='cpRotaryLimitJointNew'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='a' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='b' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpFloat' type='f' name='min' type64='d'/>
<arg declared_type='cpFloat' type='f' name='max' type64='d'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
</function>
<function name='cpRotaryLimitJointSetMax' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpFloat' type='f' name='value' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpRotaryLimitJointSetMin' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpFloat' type='f' name='value' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSegmentQueryHitDist' inline='true'>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='start' const='true' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='end' const='true' type64='{CGPoint=dd}'/>
<arg declared_type='cpSegmentQueryInfo' type='{cpSegmentQueryInfo=^{cpShape}f{CGPoint=ff}}' name='info' const='true' type64='{cpSegmentQueryInfo=^{cpShape}d{CGPoint=dd}}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpSegmentQueryHitPoint' inline='true'>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='start' const='true' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='end' const='true' type64='{CGPoint=dd}'/>
<arg declared_type='cpSegmentQueryInfo' type='{cpSegmentQueryInfo=^{cpShape}f{CGPoint=ff}}' name='info' const='true' type64='{cpSegmentQueryInfo=^{cpShape}d{CGPoint=dd}}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpSegmentShapeAlloc'>
<retval declared_type='cpSegmentShape*' type='^{cpSegmentShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}}' type64='^{cpSegmentShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}d{CGPoint=dd}{CGPoint=dd}}'/>
</function>
<function name='cpSegmentShapeGetA'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' const='true' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpSegmentShapeGetB'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' const='true' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpSegmentShapeGetNormal'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' const='true' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpSegmentShapeGetRadius'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' const='true' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpSegmentShapeInit'>
<arg declared_type='cpSegmentShape*' type='^{cpSegmentShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}}' name='seg' type64='^{cpSegmentShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}d{CGPoint=dd}{CGPoint=dd}}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='a' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='b' type64='{CGPoint=dd}'/>
<arg declared_type='cpFloat' type='f' name='radius' type64='d'/>
<retval declared_type='cpSegmentShape*' type='^{cpSegmentShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}}' type64='^{cpSegmentShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}d{CGPoint=dd}{CGPoint=dd}}'/>
</function>
<function name='cpSegmentShapeNew'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='a' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='b' type64='{CGPoint=dd}'/>
<arg declared_type='cpFloat' type='f' name='radius' type64='d'/>
<retval declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
</function>
<function name='cpSegmentShapeSetEndpoints'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='a' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='b' type64='{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSegmentShapeSetNeighbors'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='prev' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='next' type64='{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSegmentShapeSetRadius'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<arg declared_type='cpFloat' type='f' name='radius' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeActive' inline='true'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpShapeCacheBB'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<retval declared_type='cpBB' type='{cpBB=ffff}' type64='{cpBB=dddd}'/>
</function>
<function name='cpShapeDestroy'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeFree'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeGetBB' inline='true'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' const='true' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<retval declared_type='cpBB' type='{cpBB=ffff}' type64='{cpBB=dddd}'/>
</function>
<function name='cpShapeGetBody' inline='true'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' const='true' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<retval declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
</function>
<function name='cpShapeGetCollisionType' inline='true'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' const='true' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<retval declared_type='cpCollisionType' type='L' type64='Q'/>
</function>
<function name='cpShapeGetElasticity' inline='true'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' const='true' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpShapeGetFriction' inline='true'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' const='true' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpShapeGetGroup' inline='true'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' const='true' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<retval declared_type='cpGroup' type='L' type64='Q'/>
</function>
<function name='cpShapeGetLayers' inline='true'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' const='true' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<retval declared_type='cpLayers' type='I'/>
</function>
<function name='cpShapeGetSensor' inline='true'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' const='true' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpShapeGetSpace' inline='true'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' const='true' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<retval declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
</function>
<function name='cpShapeGetSurfaceVelocity' inline='true'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' const='true' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpShapeGetUserData' inline='true'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' const='true' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<retval declared_type='cpDataPointer' type='^v'/>
</function>
<function name='cpShapeInit'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<arg declared_type='cpShapeClass*' type='^{cpShapeClass=i^?^?^?^?}' name='klass' const='true'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<retval declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
</function>
<function name='cpShapeNearestPointQuery'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='p' type64='{CGPoint=dd}'/>
<arg declared_type='cpNearestPointQueryInfo*' type='^{cpNearestPointQueryInfo=^{cpShape}{CGPoint=ff}f}' name='out' type64='^{cpNearestPointQueryInfo=^{cpShape}{CGPoint=dd}d}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpShapePointQuery'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='p' type64='{CGPoint=dd}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpShapeSegmentQuery'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='a' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='b' type64='{CGPoint=dd}'/>
<arg declared_type='cpSegmentQueryInfo*' type='^{cpSegmentQueryInfo=^{cpShape}f{CGPoint=ff}}' name='info' type64='^{cpSegmentQueryInfo=^{cpShape}d{CGPoint=dd}}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpShapeSetBody'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeSetCollisionType' inline='true'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<arg declared_type='cpCollisionType' type='L' name='value' type64='Q'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeSetElasticity' inline='true'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<arg declared_type='cpFloat' type='f' name='value' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeSetFriction' inline='true'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<arg declared_type='cpFloat' type='f' name='value' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeSetGroup' inline='true'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<arg declared_type='cpGroup' type='L' name='value' type64='Q'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeSetLayers' inline='true'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<arg declared_type='cpLayers' type='I' name='value'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeSetSensor' inline='true'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<arg declared_type='cpBool' type='i' name='value'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeSetSurfaceVelocity' inline='true'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='value' type64='{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeSetUserData' inline='true'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<arg declared_type='cpDataPointer' type='^v' name='value'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeUpdate'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='pos' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='rot' type64='{CGPoint=dd}'/>
<retval declared_type='cpBB' type='{cpBB=ffff}' type64='{cpBB=dddd}'/>
</function>
<function name='cpShapeUpdateFunc'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<arg declared_type='void*' type='^v' name='unused'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSimpleMotorAlloc'>
<retval declared_type='cpSimpleMotor*' type='^{cpSimpleMotor={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}ffff}' type64='^{cpSimpleMotor={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}dddd}'/>
</function>
<function name='cpSimpleMotorGetClass'>
<retval declared_type='cpConstraintClass*' type='^{cpConstraintClass=^?^?^?^?}' const='true'/>
</function>
<function name='cpSimpleMotorGetRate' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' const='true' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpSimpleMotorInit'>
<arg declared_type='cpSimpleMotor*' type='^{cpSimpleMotor={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}ffff}' name='joint' type64='^{cpSimpleMotor={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}dddd}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='a' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='b' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpFloat' type='f' name='rate' type64='d'/>
<retval declared_type='cpSimpleMotor*' type='^{cpSimpleMotor={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}ffff}' type64='^{cpSimpleMotor={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}dddd}'/>
</function>
<function name='cpSimpleMotorNew'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='a' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='b' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpFloat' type='f' name='rate' type64='d'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
</function>
<function name='cpSimpleMotorSetRate' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpFloat' type='f' name='value' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSlideJointAlloc'>
<retval declared_type='cpSlideJoint*' type='^{cpSlideJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}ff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}ffff}' type64='^{cpSlideJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}{CGPoint=dd}{CGPoint=dd}dd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}dddd}'/>
</function>
<function name='cpSlideJointGetAnchr1' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' const='true' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpSlideJointGetAnchr2' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' const='true' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpSlideJointGetClass'>
<retval declared_type='cpConstraintClass*' type='^{cpConstraintClass=^?^?^?^?}' const='true'/>
</function>
<function name='cpSlideJointGetMax' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' const='true' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpSlideJointGetMin' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' const='true' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpSlideJointInit'>
<arg declared_type='cpSlideJoint*' type='^{cpSlideJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}ff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}ffff}' name='joint' type64='^{cpSlideJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}{CGPoint=dd}{CGPoint=dd}dd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}dddd}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='a' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='b' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='anchr1' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='anchr2' type64='{CGPoint=dd}'/>
<arg declared_type='cpFloat' type='f' name='min' type64='d'/>
<arg declared_type='cpFloat' type='f' name='max' type64='d'/>
<retval declared_type='cpSlideJoint*' type='^{cpSlideJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}ff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}ffff}' type64='^{cpSlideJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}{CGPoint=dd}{CGPoint=dd}dd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}dddd}'/>
</function>
<function name='cpSlideJointNew'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='a' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='b' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='anchr1' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='anchr2' type64='{CGPoint=dd}'/>
<arg declared_type='cpFloat' type='f' name='min' type64='d'/>
<arg declared_type='cpFloat' type='f' name='max' type64='d'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
</function>
<function name='cpSlideJointSetAnchr1' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='value' type64='{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSlideJointSetAnchr2' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='value' type64='{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSlideJointSetMax' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpFloat' type='f' name='value' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSlideJointSetMin' inline='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='cpFloat' type='f' name='value' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceActivateBody'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceActivateShapesTouchingShape'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceAddBody'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<retval declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
</function>
<function name='cpSpaceAddCollisionHandler'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpCollisionType' type='L' name='a' type64='Q'/>
<arg declared_type='cpCollisionType' type='L' name='b' type64='Q'/>
<arg declared_type='cpCollisionBeginFunc' type='^?' name='begin' function_pointer='true'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBool' type='i'/>
</arg>
<arg declared_type='cpCollisionPreSolveFunc' type='^?' name='preSolve' function_pointer='true'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBool' type='i'/>
</arg>
<arg declared_type='cpCollisionPostSolveFunc' type='^?' name='postSolve' function_pointer='true'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='cpCollisionSeparateFunc' type='^?' name='separate' function_pointer='true'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' type='^v' name='data'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceAddConstraint'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
</function>
<function name='cpSpaceAddPostStepCallback'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpPostStepFunc' type='^?' name='func' function_pointer='true'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' type='^v' name='key'/>
<arg declared_type='void*' type='^v' name='data'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceAddShape'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<retval declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
</function>
<function name='cpSpaceAddStaticShape'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<retval declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
</function>
<function name='cpSpaceAlloc'>
<retval declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
</function>
<function name='cpSpaceArbiterSetFilter'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' name='arb' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpSpaceBBQuery'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpBB' type='{cpBB=ffff}' name='bb' type64='{cpBB=dddd}'/>
<arg declared_type='cpLayers' type='I' name='layers'/>
<arg declared_type='cpGroup' type='L' name='group' type64='Q'/>
<arg declared_type='cpSpaceBBQueryFunc' type='^?' name='func' function_pointer='true'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' type='^v' name='data'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceCollideShapes'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='a' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='b' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceContainsBody'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpSpaceContainsConstraint'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpSpaceContainsShape'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpSpaceDestroy'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceEachBody'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpSpaceBodyIteratorFunc' type='^?' name='func' function_pointer='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' type='^v' name='data'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceEachConstraint'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpSpaceConstraintIteratorFunc' type='^?' name='func' function_pointer='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' type='^v' name='data'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceEachShape'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpSpaceShapeIteratorFunc' type='^?' name='func' function_pointer='true'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' type='^v' name='data'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceFilterArbiters'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='filter' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceFree'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceGetCollisionBias' inline='true'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' const='true' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpSpaceGetCollisionPersistence' inline='true'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' const='true' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<retval declared_type='cpTimestamp' type='I'/>
</function>
<function name='cpSpaceGetCollisionSlop' inline='true'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' const='true' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpSpaceGetCurrentTimeStep' inline='true'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' const='true' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpSpaceGetDamping' inline='true'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' const='true' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpSpaceGetEnableContactGraph' inline='true'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' const='true' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpSpaceGetGravity' inline='true'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' const='true' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpSpaceGetIdleSpeedThreshold' inline='true'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' const='true' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpSpaceGetIterations' inline='true'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' const='true' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpSpaceGetPostStepData'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='void*' type='^v' name='key'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='cpSpaceGetSleepTimeThreshold' inline='true'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' const='true' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpSpaceGetStaticBody' inline='true'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' const='true' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<retval declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
</function>
<function name='cpSpaceGetUserData' inline='true'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' const='true' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<retval declared_type='cpDataPointer' type='^v'/>
</function>
<function name='cpSpaceHashAlloc'>
<retval declared_type='cpSpaceHash*' type='^{cpSpaceHash=}'/>
</function>
<function name='cpSpaceHashInit'>
<arg declared_type='cpSpaceHash*' type='^{cpSpaceHash=}' name='hash'/>
<arg declared_type='cpFloat' type='f' name='celldim' type64='d'/>
<arg declared_type='int' type='i' name='numcells'/>
<arg declared_type='cpSpatialIndexBBFunc' type='^?' name='bbfunc' function_pointer='true'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBB' type='{cpBB=ffff}' type64='{cpBB=dddd}'/>
</arg>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}' name='staticIndex'/>
<retval declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
</function>
<function name='cpSpaceHashNew'>
<arg declared_type='cpFloat' type='f' name='celldim' type64='d'/>
<arg declared_type='int' type='i' name='cells'/>
<arg declared_type='cpSpatialIndexBBFunc' type='^?' name='bbfunc' function_pointer='true'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBB' type='{cpBB=ffff}' type64='{cpBB=dddd}'/>
</arg>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}' name='staticIndex'/>
<retval declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
</function>
<function name='cpSpaceHashResize'>
<arg declared_type='cpSpaceHash*' type='^{cpSpaceHash=}' name='hash'/>
<arg declared_type='cpFloat' type='f' name='celldim' type64='d'/>
<arg declared_type='int' type='i' name='numcells'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceInit'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<retval declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
</function>
<function name='cpSpaceIsLocked' inline='true'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpSpaceLock'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceLookupHandler' inline='true'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpCollisionType' type='L' name='a' type64='Q'/>
<arg declared_type='cpCollisionType' type='L' name='b' type64='Q'/>
<retval declared_type='cpCollisionHandler*' type='^{cpCollisionHandler=II^?^?^?^?^v}' type64='^{cpCollisionHandler=QQ^?^?^?^?^v}'/>
</function>
<function name='cpSpaceNearestPointQuery'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='point' type64='{CGPoint=dd}'/>
<arg declared_type='cpFloat' type='f' name='maxDistance' type64='d'/>
<arg declared_type='cpLayers' type='I' name='layers'/>
<arg declared_type='cpGroup' type='L' name='group' type64='Q'/>
<arg declared_type='cpSpaceNearestPointQueryFunc' type='^?' name='func' function_pointer='true'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<arg declared_type='cpFloat' type='f' type64='d'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' type='^v' name='data'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceNearestPointQueryNearest'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='point' type64='{CGPoint=dd}'/>
<arg declared_type='cpFloat' type='f' name='maxDistance' type64='d'/>
<arg declared_type='cpLayers' type='I' name='layers'/>
<arg declared_type='cpGroup' type='L' name='group' type64='Q'/>
<arg declared_type='cpNearestPointQueryInfo*' type='^{cpNearestPointQueryInfo=^{cpShape}{CGPoint=ff}f}' name='out' type64='^{cpNearestPointQueryInfo=^{cpShape}{CGPoint=dd}d}'/>
<retval declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
</function>
<function name='cpSpaceNew'>
<retval declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
</function>
<function name='cpSpacePointQuery'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='point' type64='{CGPoint=dd}'/>
<arg declared_type='cpLayers' type='I' name='layers'/>
<arg declared_type='cpGroup' type='L' name='group' type64='Q'/>
<arg declared_type='cpSpacePointQueryFunc' type='^?' name='func' function_pointer='true'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' type='^v' name='data'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpacePointQueryFirst'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='point' type64='{CGPoint=dd}'/>
<arg declared_type='cpLayers' type='I' name='layers'/>
<arg declared_type='cpGroup' type='L' name='group' type64='Q'/>
<retval declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
</function>
<function name='cpSpaceProcessComponents'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpFloat' type='f' name='dt' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpacePushContacts'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='int' type='i' name='count'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpacePushFreshContactBuffer'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceReindexShape'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceReindexShapesForBody'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceReindexStatic'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceRemoveBody'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceRemoveCollisionHandler'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpCollisionType' type='L' name='a' type64='Q'/>
<arg declared_type='cpCollisionType' type='L' name='b' type64='Q'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceRemoveConstraint'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}' name='constraint' type64='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}ddd^?^?^v}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceRemoveShape'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceRemoveStaticShape'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSegmentQuery'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='start' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='end' type64='{CGPoint=dd}'/>
<arg declared_type='cpLayers' type='I' name='layers'/>
<arg declared_type='cpGroup' type='L' name='group' type64='Q'/>
<arg declared_type='cpSpaceSegmentQueryFunc' type='^?' name='func' function_pointer='true'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<arg declared_type='cpFloat' type='f' type64='d'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' type='^v' name='data'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSegmentQueryFirst'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='start' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='end' type64='{CGPoint=dd}'/>
<arg declared_type='cpLayers' type='I' name='layers'/>
<arg declared_type='cpGroup' type='L' name='group' type64='Q'/>
<arg declared_type='cpSegmentQueryInfo*' type='^{cpSegmentQueryInfo=^{cpShape}f{CGPoint=ff}}' name='out' type64='^{cpSegmentQueryInfo=^{cpShape}d{CGPoint=dd}}'/>
<retval declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
</function>
<function name='cpSpaceSetCollisionBias' inline='true'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpFloat' type='f' name='value' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSetCollisionPersistence' inline='true'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpTimestamp' type='I' name='value'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSetCollisionSlop' inline='true'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpFloat' type='f' name='value' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSetDamping' inline='true'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpFloat' type='f' name='value' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSetDefaultCollisionHandler'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpCollisionBeginFunc' type='^?' name='begin' function_pointer='true'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBool' type='i'/>
</arg>
<arg declared_type='cpCollisionPreSolveFunc' type='^?' name='preSolve' function_pointer='true'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBool' type='i'/>
</arg>
<arg declared_type='cpCollisionPostSolveFunc' type='^?' name='postSolve' function_pointer='true'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='cpCollisionSeparateFunc' type='^?' name='separate' function_pointer='true'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' type='^v' name='data'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSetEnableContactGraph' inline='true'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpBool' type='i' name='value'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSetGravity' inline='true'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='value' type64='{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSetIdleSpeedThreshold' inline='true'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpFloat' type='f' name='value' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSetIterations' inline='true'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='int' type='i' name='value'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSetSleepTimeThreshold' inline='true'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpFloat' type='f' name='value' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSetUserData' inline='true'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpDataPointer' type='^v' name='value'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceShapeQuery'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' name='shape' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<arg declared_type='cpSpaceShapeQueryFunc' type='^?' name='func' function_pointer='true'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}' type64='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=dddd}idd{CGPoint=dd}^vQQI^{cpSpace}^{cpShape}^{cpShape}Q}'/>
<arg declared_type='cpContactPointSet*' type='^{cpContactPointSet=i[4{?={CGPoint=ff}{CGPoint=ff}f}]}' type64='^{cpContactPointSet=i[4{?={CGPoint=dd}{CGPoint=dd}d}]}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' type='^v' name='data'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpSpaceStep'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpFloat' type='f' name='dt' type64='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceUncacheArbiter' inline='true'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}' name='arb' type64='^{cpArbiter=dd{CGPoint=dd}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceUnlock'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpBool' type='i' name='runPostStep'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceUseSpatialHash'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}' name='space' type64='^{cpSpace=i{CGPoint=dd}dddddIi^v^{cpBody}Id^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=QQ^?^?^?^?^v}i^{cpArray}{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}}'/>
<arg declared_type='cpFloat' type='f' name='dim' type64='d'/>
<arg declared_type='int' type='i' name='count'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpatialIndexCollideStatic'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}' name='dynamicIndex'/>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}' name='staticIndex'/>
<arg declared_type='cpSpatialIndexQueryFunc' type='^?' name='func' function_pointer='true'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' type='^v' name='data'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpatialIndexContains' inline='true'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}' name='index'/>
<arg declared_type='void*' type='^v' name='obj'/>
<arg declared_type='cpHashValue' type='L' name='hashid' type64='Q'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpSpatialIndexCount' inline='true'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}' name='index'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpSpatialIndexDestroy' inline='true'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}' name='index'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpatialIndexEach' inline='true'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}' name='index'/>
<arg declared_type='cpSpatialIndexIteratorFunc' type='^?' name='func' function_pointer='true'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' type='^v' name='data'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpatialIndexFree'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}' name='index'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpatialIndexInit'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}' name='index'/>
<arg declared_type='cpSpatialIndexClass*' type='^{cpSpatialIndexClass=^?^?^?^?^?^?^?^?^?^?^?}' name='klass'/>
<arg declared_type='cpSpatialIndexBBFunc' type='^?' name='bbfunc' function_pointer='true'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBB' type='{cpBB=ffff}' type64='{cpBB=dddd}'/>
</arg>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}' name='staticIndex'/>
<retval declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
</function>
<function name='cpSpatialIndexInsert' inline='true'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}' name='index'/>
<arg declared_type='void*' type='^v' name='obj'/>
<arg declared_type='cpHashValue' type='L' name='hashid' type64='Q'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpatialIndexQuery' inline='true'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}' name='index'/>
<arg declared_type='void*' type='^v' name='obj'/>
<arg declared_type='cpBB' type='{cpBB=ffff}' name='bb' type64='{cpBB=dddd}'/>
<arg declared_type='cpSpatialIndexQueryFunc' type='^?' name='func' function_pointer='true'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' type='^v' name='data'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpatialIndexReindex' inline='true'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}' name='index'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpatialIndexReindexObject' inline='true'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}' name='index'/>
<arg declared_type='void*' type='^v' name='obj'/>
<arg declared_type='cpHashValue' type='L' name='hashid' type64='Q'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpatialIndexReindexQuery' inline='true'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}' name='index'/>
<arg declared_type='cpSpatialIndexQueryFunc' type='^?' name='func' function_pointer='true'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' type='^v' name='data'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpatialIndexRemove' inline='true'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}' name='index'/>
<arg declared_type='void*' type='^v' name='obj'/>
<arg declared_type='cpHashValue' type='L' name='hashid' type64='Q'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpatialIndexSegmentQuery' inline='true'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}' name='index'/>
<arg declared_type='void*' type='^v' name='obj'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='a' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='b' type64='{CGPoint=dd}'/>
<arg declared_type='cpFloat' type='f' name='t_exit' type64='d'/>
<arg declared_type='cpSpatialIndexSegmentQueryFunc' type='^?' name='func' function_pointer='true'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</arg>
<arg declared_type='void*' type='^v' name='data'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSplittingPlaneCompare' inline='true'>
<arg declared_type='cpSplittingPlane' type='{cpSplittingPlane={CGPoint=ff}f}' name='plane' type64='{cpSplittingPlane={CGPoint=dd}d}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v' type64='{CGPoint=dd}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpSplittingPlaneNew' inline='true'>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='a' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='b' type64='{CGPoint=dd}'/>
<retval declared_type='cpSplittingPlane' type='{cpSplittingPlane={CGPoint=ff}f}' type64='{cpSplittingPlane={CGPoint=dd}d}'/>
</function>
<function name='cpSweep1DAlloc'>
<retval declared_type='cpSweep1D*' type='^{cpSweep1D=}'/>
</function>
<function name='cpSweep1DInit'>
<arg declared_type='cpSweep1D*' type='^{cpSweep1D=}' name='sweep'/>
<arg declared_type='cpSpatialIndexBBFunc' type='^?' name='bbfunc' function_pointer='true'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBB' type='{cpBB=ffff}' type64='{cpBB=dddd}'/>
</arg>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}' name='staticIndex'/>
<retval declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
</function>
<function name='cpSweep1DNew'>
<arg declared_type='cpSpatialIndexBBFunc' type='^?' name='bbfunc' function_pointer='true'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBB' type='{cpBB=ffff}' type64='{cpBB=dddd}'/>
</arg>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}' name='staticIndex'/>
<retval declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
</function>
<function name='cpfabs' inline='true'>
<arg declared_type='cpFloat' type='f' name='f' type64='d'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpfclamp' inline='true'>
<arg declared_type='cpFloat' type='f' name='f' type64='d'/>
<arg declared_type='cpFloat' type='f' name='min' type64='d'/>
<arg declared_type='cpFloat' type='f' name='max' type64='d'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpfclamp01' inline='true'>
<arg declared_type='cpFloat' type='f' name='f' type64='d'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpflerp' inline='true'>
<arg declared_type='cpFloat' type='f' name='f1' type64='d'/>
<arg declared_type='cpFloat' type='f' name='f2' type64='d'/>
<arg declared_type='cpFloat' type='f' name='t' type64='d'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpflerpconst' inline='true'>
<arg declared_type='cpFloat' type='f' name='f1' type64='d'/>
<arg declared_type='cpFloat' type='f' name='f2' type64='d'/>
<arg declared_type='cpFloat' type='f' name='d' type64='d'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpfmax' inline='true'>
<arg declared_type='cpFloat' type='f' name='a' type64='d'/>
<arg declared_type='cpFloat' type='f' name='b' type64='d'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpfmin' inline='true'>
<arg declared_type='cpFloat' type='f' name='a' type64='d'/>
<arg declared_type='cpFloat' type='f' name='b' type64='d'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpv' inline='true'>
<arg declared_type='cpFloat' type='f' name='x' const='true' type64='d'/>
<arg declared_type='cpFloat' type='f' name='y' const='true' type64='d'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpvadd' inline='true'>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v1' const='true' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v2' const='true' type64='{CGPoint=dd}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpvclamp' inline='true'>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v' const='true' type64='{CGPoint=dd}'/>
<arg declared_type='cpFloat' type='f' name='len' const='true' type64='d'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpvcross' inline='true'>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v1' const='true' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v2' const='true' type64='{CGPoint=dd}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpvdist' inline='true'>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v1' const='true' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v2' const='true' type64='{CGPoint=dd}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpvdistsq' inline='true'>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v1' const='true' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v2' const='true' type64='{CGPoint=dd}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpvdot' inline='true'>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v1' const='true' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v2' const='true' type64='{CGPoint=dd}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpveql' inline='true'>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v1' const='true' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v2' const='true' type64='{CGPoint=dd}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpvforangle'>
<arg declared_type='cpFloat' type='f' name='a' const='true' type64='d'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpvlength'>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v' const='true' type64='{CGPoint=dd}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpvlengthsq' inline='true'>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v' const='true' type64='{CGPoint=dd}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpvlerp' inline='true'>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v1' const='true' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v2' const='true' type64='{CGPoint=dd}'/>
<arg declared_type='cpFloat' type='f' name='t' const='true' type64='d'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpvlerpconst' inline='true'>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v1' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v2' type64='{CGPoint=dd}'/>
<arg declared_type='cpFloat' type='f' name='d' type64='d'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpvmult' inline='true'>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v' const='true' type64='{CGPoint=dd}'/>
<arg declared_type='cpFloat' type='f' name='s' const='true' type64='d'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpvnear' inline='true'>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v1' const='true' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v2' const='true' type64='{CGPoint=dd}'/>
<arg declared_type='cpFloat' type='f' name='dist' const='true' type64='d'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpvneg' inline='true'>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v' const='true' type64='{CGPoint=dd}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpvnormalize' inline='true'>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v' const='true' type64='{CGPoint=dd}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpvnormalize_safe' inline='true'>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v' const='true' type64='{CGPoint=dd}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpvperp' inline='true'>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v' const='true' type64='{CGPoint=dd}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpvproject' inline='true'>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v1' const='true' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v2' const='true' type64='{CGPoint=dd}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpvrotate' inline='true'>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v1' const='true' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v2' const='true' type64='{CGPoint=dd}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpvrperp' inline='true'>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v' const='true' type64='{CGPoint=dd}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpvslerp'>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v1' const='true' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v2' const='true' type64='{CGPoint=dd}'/>
<arg declared_type='cpFloat' type='f' name='t' const='true' type64='d'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpvslerpconst'>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v1' const='true' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v2' const='true' type64='{CGPoint=dd}'/>
<arg declared_type='cpFloat' type='f' name='a' const='true' type64='d'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpvstr'>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v' const='true' type64='{CGPoint=dd}'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='cpvsub' inline='true'>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v1' const='true' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v2' const='true' type64='{CGPoint=dd}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='cpvtoangle'>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v' const='true' type64='{CGPoint=dd}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='cpvunrotate' inline='true'>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v1' const='true' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='v2' const='true' type64='{CGPoint=dd}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='k_scalar' inline='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='a' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='b' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='r1' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='r2' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='n' type64='{CGPoint=dd}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='k_scalar_body' inline='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='body' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='r' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='n' type64='{CGPoint=dd}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='k_tensor' inline='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='a' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='b' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='r1' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='r2' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect*' type='^{CGPoint=ff}' name='k1' type64='^{CGPoint=dd}'/>
<arg declared_type='cpVect*' type='^{CGPoint=ff}' name='k2' type64='^{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='mult_k' inline='true'>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='vr' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='k1' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='k2' type64='{CGPoint=dd}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function name='normal_relative_velocity' inline='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='a' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='b' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='r1' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='r2' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='n' type64='{CGPoint=dd}'/>
<retval declared_type='cpFloat' type='f' type64='d'/>
</function>
<function name='relative_velocity' inline='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='a' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}' name='b' type64='^{cpBody=^?^?dddd{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}ddd{CGPoint=dd}^vdd{CGPoint=dd}d^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}d}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='r1' type64='{CGPoint=dd}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}' name='r2' type64='{CGPoint=dd}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</function>
<function_alias name='cpcalloc' original='calloc'/>
<function_alias name='cpfacos' original='acos'/>
<function_alias name='cpfatan2' original='atan2'/>
<function_alias name='cpfceil' original='ceil'/>
<function_alias name='cpfcos' original='cos'/>
<function_alias name='cpfexp' original='exp'/>
<function_alias name='cpffloor' original='floor'/>
<function_alias name='cpfmod' original='fmod'/>
<function_alias name='cpfpow' original='pow'/>
<function_alias name='cpfree' original='free'/>
<function_alias name='cpfsin' original='sin'/>
<function_alias name='cpfsqrt' original='sqrt'/>
<function_alias name='cprealloc' original='realloc'/>
</signatures>
