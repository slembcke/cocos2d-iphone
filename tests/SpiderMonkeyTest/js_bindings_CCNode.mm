/*
* AUTOGENERATED FILE. DO NOT EDIT IT
* Generated by ../../tools/js/generate_spidermonkey_bindings.py on 2012-05-24
*/

// needed for callbacks from objective-c to JS
#import <objc/runtime.h>
#import "JRSwizzle.h"

#import "jstypedarray.h"
#import "ScriptingCore.h"   

#import "js_bindings_CCNode.h"


JSClass* JSPROXY_CCNode_class = NULL;
JSObject* JSPROXY_CCNode_object = NULL;
 // Constructor
JSBool JSPROXY_CCNode_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCNode_class, JSPROXY_CCNode_object, NULL);
    CCNode *realObj = [CCNode alloc];

    JSPROXY_CCNode *proxy = [[JSPROXY_CCNode alloc] initWithJSObject:jsobj andRealObject:realObj];

    [realObj release];

    JS_SetPrivate(jsobj, proxy);
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */
    
    return JS_TRUE;
}

// Destructor
void JSPROXY_CCNode_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCNode *pt = (JSPROXY_CCNode*)JS_GetPrivate(obj);
	if (pt) {
		id real = [pt realObj];
	
	/* no callbacks */

		[real release];
	
		[pt release];

		JS_free(cx, pt);
	}
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_cleanup(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real cleanup ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_draw(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real draw ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: ccGLServerState
JSBool JSPROXY_CCNode_glServerState(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 0, @"Invalid number of arguments" );
	ccGLServerState ret_val;

	ret_val = [real glServerState ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCNode_ignoreAnchorPointForPosition(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	ret_val = [real ignoreAnchorPointForPosition ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCNode_isRunning(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	ret_val = [real isRunning ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSUInteger
JSBool JSPROXY_CCNode_numberOfRunningActions(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSUInteger ret_val;

	ret_val = [real numberOfRunningActions ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_onEnter(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real onEnter ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real onEnterTransitionDidFinish ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_onExit(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real onExit ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real onExitTransitionDidStart ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSUInteger
JSBool JSPROXY_CCNode_orderOfArrival(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSUInteger ret_val;

	ret_val = [real orderOfArrival ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_pauseSchedulerAndActions(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real pauseSchedulerAndActions ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCNode_removeAllChildrenWithCleanup_(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 1, @"Invalid number of arguments" );
	JSBool arg0; JS_ValueToBoolean( cx, vp[2], &arg0 );

	[real removeAllChildrenWithCleanup:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSInteger, BOOL
// Ret value: None
JSBool JSPROXY_CCNode_removeChildByTag_cleanup_(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 2, @"Invalid number of arguments" );
	int32_t arg0; JS_ValueToECMAInt32( cx, vp[2], &arg0 );
	JSBool arg1; JS_ValueToBoolean( cx, vp[3], &arg1 );

	[real removeChildByTag:(NSInteger)arg0 cleanup:(BOOL)arg1  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCNode_removeFromParentAndCleanup_(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 1, @"Invalid number of arguments" );
	JSBool arg0; JS_ValueToBoolean( cx, vp[2], &arg0 );

	[real removeFromParentAndCleanup:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_resumeSchedulerAndActions(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real resumeSchedulerAndActions ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCNode_rotation(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	ret_val = [real rotation ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCNode_scale(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	ret_val = [real scale ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCNode_scaleX(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	ret_val = [real scaleX ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCNode_scaleY(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	ret_val = [real scaleY ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_scheduleUpdate(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real scheduleUpdate ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSInteger
// Ret value: None
JSBool JSPROXY_CCNode_scheduleUpdateWithPriority_(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 1, @"Invalid number of arguments" );
	int32_t arg0; JS_ValueToECMAInt32( cx, vp[2], &arg0 );

	[real scheduleUpdateWithPriority:(NSInteger)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: ccGLServerState
// Ret value: None
JSBool JSPROXY_CCNode_setGlServerState_(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 1, @"Invalid number of arguments" );
	int32_t arg0; JS_ValueToECMAInt32( cx, vp[2], &arg0 );

	[real setGlServerState:(ccGLServerState)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCNode_setIgnoreAnchorPointForPosition_(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 1, @"Invalid number of arguments" );
	JSBool arg0; JS_ValueToBoolean( cx, vp[2], &arg0 );

	[real setIgnoreAnchorPointForPosition:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSUInteger
// Ret value: None
JSBool JSPROXY_CCNode_setOrderOfArrival_(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 1, @"Invalid number of arguments" );
	uint32_t arg0; JS_ValueToECMAUint32( cx, vp[2], &arg0 );

	[real setOrderOfArrival:(NSUInteger)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCNode_setRotation_(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 1, @"Invalid number of arguments" );
	double arg0; JS_ValueToNumber( cx, vp[2], &arg0 );

	[real setRotation:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCNode_setScale_(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 1, @"Invalid number of arguments" );
	double arg0; JS_ValueToNumber( cx, vp[2], &arg0 );

	[real setScale:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCNode_setScaleX_(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 1, @"Invalid number of arguments" );
	double arg0; JS_ValueToNumber( cx, vp[2], &arg0 );

	[real setScaleX:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCNode_setScaleY_(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 1, @"Invalid number of arguments" );
	double arg0; JS_ValueToNumber( cx, vp[2], &arg0 );

	[real setScaleY:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCNode_setSkewX_(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 1, @"Invalid number of arguments" );
	double arg0; JS_ValueToNumber( cx, vp[2], &arg0 );

	[real setSkewX:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCNode_setSkewY_(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 1, @"Invalid number of arguments" );
	double arg0; JS_ValueToNumber( cx, vp[2], &arg0 );

	[real setSkewY:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSInteger
// Ret value: None
JSBool JSPROXY_CCNode_setTag_(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 1, @"Invalid number of arguments" );
	int32_t arg0; JS_ValueToECMAInt32( cx, vp[2], &arg0 );

	[real setTag:(NSInteger)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCNode_setVertexZ_(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 1, @"Invalid number of arguments" );
	double arg0; JS_ValueToNumber( cx, vp[2], &arg0 );

	[real setVertexZ:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCNode_setVisible_(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 1, @"Invalid number of arguments" );
	JSBool arg0; JS_ValueToBoolean( cx, vp[2], &arg0 );

	[real setVisible:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSUInteger
// Ret value: None
JSBool JSPROXY_CCNode_setZOrder_(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 1, @"Invalid number of arguments" );
	uint32_t arg0; JS_ValueToECMAUint32( cx, vp[2], &arg0 );

	[real setZOrder:(NSUInteger)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCNode_skewX(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	ret_val = [real skewX ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCNode_skewY(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	ret_val = [real skewY ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_sortAllChildren(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real sortAllChildren ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSInteger
// Ret value: None
JSBool JSPROXY_CCNode_stopActionByTag_(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 1, @"Invalid number of arguments" );
	int32_t arg0; JS_ValueToECMAInt32( cx, vp[2], &arg0 );

	[real stopActionByTag:(NSInteger)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_stopAllActions(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real stopAllActions ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSInteger
JSBool JSPROXY_CCNode_tag(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSInteger ret_val;

	ret_val = [real tag ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_transform(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real transform ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_transformAncestors(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real transformAncestors ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_unscheduleAllSelectors(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real unscheduleAllSelectors ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_unscheduleUpdate(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real unscheduleUpdate ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCNode_vertexZ(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	ret_val = [real vertexZ ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCNode_visible(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	ret_val = [real visible ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_visit(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real visit ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSInteger
JSBool JSPROXY_CCNode_zOrder(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy isInitialized], @"Object not initialzied. error");
	
	CCNode * real = (CCNode*)[proxy realObj];
	NSCAssert( real, @"Invalid real object");

	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSInteger ret_val;

	ret_val = [real zOrder ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

@implementation JSPROXY_CCNode

+(void) createClassWithContext:(JSContext*)cx object:(JSObject*)globalObj name:(NSString*)name
{
	JSPROXY_CCNode_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCNode_class->name = [name UTF8String];
	JSPROXY_CCNode_class->addProperty = JS_PropertyStub;
	JSPROXY_CCNode_class->delProperty = JS_PropertyStub;
	JSPROXY_CCNode_class->getProperty = JS_PropertyStub;
	JSPROXY_CCNode_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCNode_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCNode_class->resolve = JS_ResolveStub;
	JSPROXY_CCNode_class->convert = JS_ConvertStub;
	JSPROXY_CCNode_class->finalize = JSPROXY_CCNode_finalize;
	JSPROXY_CCNode_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};

	static JSFunctionSpec funcs[] = {
		JS_FN("cleanup", JSPROXY_CCNode_cleanup, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("draw", JSPROXY_CCNode_draw, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("glServerState", JSPROXY_CCNode_glServerState, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("ignoreAnchorPointForPosition", JSPROXY_CCNode_ignoreAnchorPointForPosition, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("isRunning", JSPROXY_CCNode_isRunning, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("numberOfRunningActions", JSPROXY_CCNode_numberOfRunningActions, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("onEnter", JSPROXY_CCNode_onEnter, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("onEnterTransitionDidFinish", JSPROXY_CCNode_onEnterTransitionDidFinish, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("onExit", JSPROXY_CCNode_onExit, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("onExitTransitionDidStart", JSPROXY_CCNode_onExitTransitionDidStart, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("orderOfArrival", JSPROXY_CCNode_orderOfArrival, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("pauseSchedulerAndActions", JSPROXY_CCNode_pauseSchedulerAndActions, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("removeAllChildrenWithCleanup", JSPROXY_CCNode_removeAllChildrenWithCleanup_, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("removeChildByTagcleanup", JSPROXY_CCNode_removeChildByTag_cleanup_, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("removeFromParentAndCleanup", JSPROXY_CCNode_removeFromParentAndCleanup_, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("resumeSchedulerAndActions", JSPROXY_CCNode_resumeSchedulerAndActions, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("rotation", JSPROXY_CCNode_rotation, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("scale", JSPROXY_CCNode_scale, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("scaleX", JSPROXY_CCNode_scaleX, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("scaleY", JSPROXY_CCNode_scaleY, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("scheduleUpdate", JSPROXY_CCNode_scheduleUpdate, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("scheduleUpdateWithPriority", JSPROXY_CCNode_scheduleUpdateWithPriority_, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("setGlServerState", JSPROXY_CCNode_setGlServerState_, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("setIgnoreAnchorPointForPosition", JSPROXY_CCNode_setIgnoreAnchorPointForPosition_, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("setOrderOfArrival", JSPROXY_CCNode_setOrderOfArrival_, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("setRotation", JSPROXY_CCNode_setRotation_, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("setScale", JSPROXY_CCNode_setScale_, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("setScaleX", JSPROXY_CCNode_setScaleX_, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("setScaleY", JSPROXY_CCNode_setScaleY_, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("setSkewX", JSPROXY_CCNode_setSkewX_, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("setSkewY", JSPROXY_CCNode_setSkewY_, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("setTag", JSPROXY_CCNode_setTag_, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("setVertexZ", JSPROXY_CCNode_setVertexZ_, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("setVisible", JSPROXY_CCNode_setVisible_, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("setZOrder", JSPROXY_CCNode_setZOrder_, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("skewX", JSPROXY_CCNode_skewX, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("skewY", JSPROXY_CCNode_skewY, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("sortAllChildren", JSPROXY_CCNode_sortAllChildren, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("stopActionByTag", JSPROXY_CCNode_stopActionByTag_, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("stopAllActions", JSPROXY_CCNode_stopAllActions, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("tag", JSPROXY_CCNode_tag, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("transform", JSPROXY_CCNode_transform, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("transformAncestors", JSPROXY_CCNode_transformAncestors, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("unscheduleAllSelectors", JSPROXY_CCNode_unscheduleAllSelectors, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("unscheduleUpdate", JSPROXY_CCNode_unscheduleUpdate, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("vertexZ", JSPROXY_CCNode_vertexZ, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("visible", JSPROXY_CCNode_visible, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("visit", JSPROXY_CCNode_visit, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("zOrder", JSPROXY_CCNode_zOrder, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FS_END
	};

	static JSFunctionSpec st_funcs[] = {
		JS_FS_END
	};

	JSPROXY_CCNode_object = JS_InitClass(cx, globalObj, JSPROXY_NSObject_object, JSPROXY_CCNode_class, JSPROXY_CCNode_constructor,0,properties,funcs,NULL,st_funcs);
}

@end
