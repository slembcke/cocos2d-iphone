/*
* AUTOGENERATED FILE. DO NOT EDIT IT
* Generated by ../../tools/js/generate_spidermonkey_bindings.py on 2012-05-30
*/

// needed for callbacks from objective-c to JS
#import <objc/runtime.h>
#import "JRSwizzle.h"

#import "jstypedarray.h"
#import "ScriptingCore.h"   

#import "js_bindings_CCLayerColor.h"


JSClass* JSPROXY_CCLayerColor_class = NULL;
JSObject* JSPROXY_CCLayerColor_object = NULL;
 // Constructor
JSBool JSPROXY_CCLayerColor_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCLayerColor_class, JSPROXY_CCLayerColor_object, NULL);

    JSPROXY_CCLayerColor *proxy = [[JSPROXY_CCLayerColor alloc] initWithJSObject:jsobj];

    JS_SetPrivate(jsobj, proxy);
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */
    
    return JS_TRUE;
}

// Destructor
void JSPROXY_CCLayerColor_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCLayerColor *pt = (JSPROXY_CCLayerColor*)JS_GetPrivate(obj);
	if (pt) {
		// id real = [pt realObj];
	
		/* no callbacks */

		[pt release];

		JS_free(cx, pt);
	}
}

// Arguments: GLfloat
// Ret value: None
JSBool JSPROXY_CCLayerColor_changeHeight_(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	double arg0; JS_ValueToNumber( cx, vp[2], &arg0 );

	CCLayerColor *real = (CCLayerColor*) [proxy realObj];
	[real changeHeight:(GLfloat)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: GLfloat
// Ret value: None
JSBool JSPROXY_CCLayerColor_changeWidth_(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	double arg0; JS_ValueToNumber( cx, vp[2], &arg0 );

	CCLayerColor *real = (CCLayerColor*) [proxy realObj];
	[real changeWidth:(GLfloat)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: GLfloat, GLfloat
// Ret value: None
JSBool JSPROXY_CCLayerColor_changeWidth_height_(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	double arg0; JS_ValueToNumber( cx, vp[2], &arg0 );
	double arg1; JS_ValueToNumber( cx, vp[3], &arg1 );

	CCLayerColor *real = (CCLayerColor*) [proxy realObj];
	[real changeWidth:(GLfloat)arg0 height:(GLfloat)arg1  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: ccColor4B
// Ret value: None
JSBool JSPROXY_CCLayerColor_initWithColor_(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, vp[2], &tmp_arg0 );
	ccColor4B arg0 = *(ccColor4B*)JS_GetTypedArrayData( tmp_arg0);

	CCLayerColor *real = [[CCLayerColor alloc] initWithColor:(ccColor4B)arg0  ];
	[proxy setRealObj: real];
	[real release];

	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: ccColor4B, GLfloat, GLfloat
// Ret value: None
JSBool JSPROXY_CCLayerColor_initWithColor_width_height_(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 3, @"Invalid number of arguments" );

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, vp[2], &tmp_arg0 );
	ccColor4B arg0 = *(ccColor4B*)JS_GetTypedArrayData( tmp_arg0);
	double arg1; JS_ValueToNumber( cx, vp[3], &arg1 );
	double arg2; JS_ValueToNumber( cx, vp[4], &arg2 );

	CCLayerColor *real = [[CCLayerColor alloc] initWithColor:(ccColor4B)arg0 width:(GLfloat)arg1 height:(GLfloat)arg2  ];
	[proxy setRealObj: real];
	[real release];

	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: GLubyte
JSBool JSPROXY_CCLayerColor_opacity(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	GLubyte ret_val;

	CCLayerColor *real = (CCLayerColor*) [proxy realObj];
	ret_val = [real opacity ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: ccBlendFunc
// Ret value: None
JSBool JSPROXY_CCLayerColor_setBlendFunc_(JSContext *cx, uint32_t argc, jsval *vp) {
	
	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, vp[2], &tmp_arg0 );
	ccBlendFunc arg0 = *(ccBlendFunc*)JS_GetTypedArrayData( tmp_arg0);

	CCLayerColor *real = (CCLayerColor*) [proxy realObj];
	[real setBlendFunc:(ccBlendFunc)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

@implementation JSPROXY_CCLayerColor

+(void) createClassWithContext:(JSContext*)cx object:(JSObject*)globalObj name:(NSString*)name
{
	JSPROXY_CCLayerColor_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCLayerColor_class->name = [name UTF8String];
	JSPROXY_CCLayerColor_class->addProperty = JS_PropertyStub;
	JSPROXY_CCLayerColor_class->delProperty = JS_PropertyStub;
	JSPROXY_CCLayerColor_class->getProperty = JS_PropertyStub;
	JSPROXY_CCLayerColor_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCLayerColor_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCLayerColor_class->resolve = JS_ResolveStub;
	JSPROXY_CCLayerColor_class->convert = JS_ConvertStub;
	JSPROXY_CCLayerColor_class->finalize = JSPROXY_CCLayerColor_finalize;
	JSPROXY_CCLayerColor_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};

	static JSFunctionSpec funcs[] = {
		JS_FN("changeHeight", JSPROXY_CCLayerColor_changeHeight_, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("changeWidth", JSPROXY_CCLayerColor_changeWidth_, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("changeWidthheight", JSPROXY_CCLayerColor_changeWidth_height_, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("initWithColor", JSPROXY_CCLayerColor_initWithColor_, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("initWithColorwidthheight", JSPROXY_CCLayerColor_initWithColor_width_height_, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("opacity", JSPROXY_CCLayerColor_opacity, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FN("setBlendFunc", JSPROXY_CCLayerColor_setBlendFunc_, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FS_END
	};

	static JSFunctionSpec st_funcs[] = {
		JS_FS_END
	};

	JSPROXY_CCLayerColor_object = JS_InitClass(cx, globalObj, JSPROXY_CCLayer_object, JSPROXY_CCLayerColor_class, JSPROXY_CCLayerColor_constructor,0,properties,funcs,NULL,st_funcs);
}

@end
