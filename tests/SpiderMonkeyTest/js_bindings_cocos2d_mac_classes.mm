/*
* AUTOGENERATED FILE. DO NOT EDIT IT
* Generated by "generate_spidermonkey_bindings.py -c cocos2d_spidermonkey.ini" on 2012-06-29
*/

// needed for callbacks from objective-c to JS
#import <objc/runtime.h>
#import "JRSwizzle.h"

#import "jstypedarray.h"
#import "ScriptingCore.h"

#import "js_bindings_cocos2d_mac_classes.h"


/*
 * CCDirectorMac
 */
#pragma mark - CCDirectorMac

JSClass* JSPROXY_CCDirectorMac_class = NULL;
JSObject* JSPROXY_CCDirectorMac_object = NULL;
 // Constructor
JSBool JSPROXY_CCDirectorMac_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCDirectorMac createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCDirectorMac_finalize(JSContext *cx, JSObject *obj)
{
	CCLOGINFO(@"spidermonkey: finalizing JS object %p (CCDirectorMac)", obj);
}

// Arguments: CGPoint
// Ret value: CGPoint ({CGPoint=ff})
JSBool JSPROXY_CCDirectorMac_convertToLogicalCoordinates_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	CGPoint arg0; 


	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	arg0 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg0);
	CGPoint ret_val;

	CCDirectorMac *real = (CCDirectorMac*) [proxy realObj];
	ret_val = [real convertToLogicalCoordinates:(CGPoint)arg0  ];

	JSObject *typedArray = js_CreateTypedArray(cx, js::TypedArray::TYPE_FLOAT32, 2 );
	CGPoint* buffer = (CGPoint*)JS_GetTypedArrayData(typedArray);
	*buffer = ret_val;
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(typedArray));
	
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSPROXY_CCDirectorMac_isFullScreen(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CCDirectorMac *real = (CCDirectorMac*) [proxy realObj];
	ret_val = [real isFullScreen ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: CGSize ({CGSize=ff})
JSBool JSPROXY_CCDirectorMac_originalWinSize(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CGSize ret_val;

	CCDirectorMac *real = (CCDirectorMac*) [proxy realObj];
	ret_val = [real originalWinSize ];

	JSObject *typedArray = js_CreateTypedArray(cx, js::TypedArray::TYPE_FLOAT32, 2 );
	CGSize* buffer = (CGSize*)JS_GetTypedArrayData(typedArray);
	*buffer = ret_val;
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(typedArray));
	
	return JS_TRUE;
}

// Arguments: 
// Ret value: int (i)
JSBool JSPROXY_CCDirectorMac_resizeMode(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	int ret_val;

	CCDirectorMac *real = (CCDirectorMac*) [proxy realObj];
	ret_val = [real resizeMode ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: void (None)
JSBool JSPROXY_CCDirectorMac_setFullScreen_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; 

	JS_ValueToBoolean( cx, *argvp++, &arg0 );

	CCDirectorMac *real = (CCDirectorMac*) [proxy realObj];
	[real setFullScreen:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: CGSize
// Ret value: void (None)
JSBool JSPROXY_CCDirectorMac_setOriginalWinSize_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	CGSize arg0; 


	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	arg0 = *(CGSize*)JS_GetTypedArrayData( tmp_arg0);

	CCDirectorMac *real = (CCDirectorMac*) [proxy realObj];
	[real setOriginalWinSize:(CGSize)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: int
// Ret value: void (None)
JSBool JSPROXY_CCDirectorMac_setResizeMode_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	int32_t arg0; 

	JS_ValueToECMAInt32( cx, *argvp++, &arg0 );

	CCDirectorMac *real = (CCDirectorMac*) [proxy realObj];
	[real setResizeMode:(int)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

void JSPROXY_CCDirectorMac_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCDirectorMac_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCDirectorMac_class->name = name;
	JSPROXY_CCDirectorMac_class->addProperty = JS_PropertyStub;
	JSPROXY_CCDirectorMac_class->delProperty = JS_PropertyStub;
	JSPROXY_CCDirectorMac_class->getProperty = JS_PropertyStub;
	JSPROXY_CCDirectorMac_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCDirectorMac_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCDirectorMac_class->resolve = JS_ResolveStub;
	JSPROXY_CCDirectorMac_class->convert = JS_ConvertStub;
	JSPROXY_CCDirectorMac_class->finalize = JSPROXY_CCDirectorMac_finalize;
	JSPROXY_CCDirectorMac_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("convertToLogicalCoordinates", JSPROXY_CCDirectorMac_convertToLogicalCoordinates_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("isFullScreen", JSPROXY_CCDirectorMac_isFullScreen, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("originalWinSize", JSPROXY_CCDirectorMac_originalWinSize, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("resizeMode", JSPROXY_CCDirectorMac_resizeMode, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setFullScreen", JSPROXY_CCDirectorMac_setFullScreen_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setOriginalWinSize", JSPROXY_CCDirectorMac_setOriginalWinSize_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setResizeMode", JSPROXY_CCDirectorMac_setResizeMode_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FS_END
	};

	JSPROXY_CCDirectorMac_object = JS_InitClass(cx, globalObj, JSPROXY_CCDirector_object, JSPROXY_CCDirectorMac_class, JSPROXY_CCDirectorMac_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCDirectorMac

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCDirectorMac_class, JSPROXY_CCDirectorMac_object, NULL);
	JSPROXY_CCDirectorMac *proxy = [[JSPROXY_CCDirectorMac alloc] initWithJSObject:jsobj class:[CCDirectorMac class]];
	[proxy setRealObj:realObj];

	if( realObj ) {
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
		[proxy release];
	}

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCLayer
 */
#pragma mark - CCLayer

JSClass* JSPROXY_CCLayer_class = NULL;
JSObject* JSPROXY_CCLayer_object = NULL;
 // Constructor
JSBool JSPROXY_CCLayer_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCLayer createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCLayer_finalize(JSContext *cx, JSObject *obj)
{
	CCLOGINFO(@"spidermonkey: finalizing JS object %p (CCLayer)", obj);
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSPROXY_CCLayer_isKeyboardEnabled(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CCLayer *real = (CCLayer*) [proxy realObj];
	ret_val = [real isKeyboardEnabled ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSPROXY_CCLayer_isMouseEnabled(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CCLayer *real = (CCLayer*) [proxy realObj];
	ret_val = [real isMouseEnabled ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSPROXY_CCLayer_isTouchEnabled(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CCLayer *real = (CCLayer*) [proxy realObj];
	ret_val = [real isTouchEnabled ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSInteger (i)
JSBool JSPROXY_CCLayer_keyboardDelegatePriority(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSInteger ret_val;

	CCLayer *real = (CCLayer*) [proxy realObj];
	ret_val = [real keyboardDelegatePriority ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSInteger (i)
JSBool JSPROXY_CCLayer_mouseDelegatePriority(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSInteger ret_val;

	CCLayer *real = (CCLayer*) [proxy realObj];
	ret_val = [real mouseDelegatePriority ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: void (None)
JSBool JSPROXY_CCLayer_setIsKeyboardEnabled_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; 

	JS_ValueToBoolean( cx, *argvp++, &arg0 );

	CCLayer *real = (CCLayer*) [proxy realObj];
	[real setIsKeyboardEnabled:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: void (None)
JSBool JSPROXY_CCLayer_setIsMouseEnabled_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; 

	JS_ValueToBoolean( cx, *argvp++, &arg0 );

	CCLayer *real = (CCLayer*) [proxy realObj];
	[real setIsMouseEnabled:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: void (None)
JSBool JSPROXY_CCLayer_setIsTouchEnabled_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; 

	JS_ValueToBoolean( cx, *argvp++, &arg0 );

	CCLayer *real = (CCLayer*) [proxy realObj];
	[real setIsTouchEnabled:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSInteger (i)
JSBool JSPROXY_CCLayer_touchDelegatePriority(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSInteger ret_val;

	CCLayer *real = (CCLayer*) [proxy realObj];
	ret_val = [real touchDelegatePriority ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: NSEvent*
// Ret value: BOOL (b)
JSBool JSPROXY_CCLayer_ccFlagsChanged_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	id arg0; 

	arg0 = (NSEvent*) jsval_to_nsobject( cx, *argvp++);
	BOOL ret_val;

	CCLayer *real = (CCLayer*) [proxy realObj];
	ret_val = [real ccFlagsChanged:(NSEvent*)arg0  ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: NSEvent*
// Ret value: BOOL (b)
JSBool JSPROXY_CCLayer_ccKeyDown_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	id arg0; 

	arg0 = (NSEvent*) jsval_to_nsobject( cx, *argvp++);
	BOOL ret_val;

	CCLayer *real = (CCLayer*) [proxy realObj];
	ret_val = [real ccKeyDown:(NSEvent*)arg0  ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: NSEvent*
// Ret value: BOOL (b)
JSBool JSPROXY_CCLayer_ccKeyUp_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	id arg0; 

	arg0 = (NSEvent*) jsval_to_nsobject( cx, *argvp++);
	BOOL ret_val;

	CCLayer *real = (CCLayer*) [proxy realObj];
	ret_val = [real ccKeyUp:(NSEvent*)arg0  ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: NSEvent*
// Ret value: void (None)
JSBool JSPROXY_CCLayer_ccMouseEntered_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	id arg0; 

	arg0 = (NSEvent*) jsval_to_nsobject( cx, *argvp++);

	CCLayer *real = (CCLayer*) [proxy realObj];
	[real ccMouseEntered:(NSEvent*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: NSEvent*
// Ret value: void (None)
JSBool JSPROXY_CCLayer_ccMouseExited_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	id arg0; 

	arg0 = (NSEvent*) jsval_to_nsobject( cx, *argvp++);

	CCLayer *real = (CCLayer*) [proxy realObj];
	[real ccMouseExited:(NSEvent*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: NSEvent*
// Ret value: BOOL (b)
JSBool JSPROXY_CCLayer_ccMouseMoved_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	id arg0; 

	arg0 = (NSEvent*) jsval_to_nsobject( cx, *argvp++);
	BOOL ret_val;

	CCLayer *real = (CCLayer*) [proxy realObj];
	ret_val = [real ccMouseMoved:(NSEvent*)arg0  ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: NSEvent*
// Ret value: BOOL (b)
JSBool JSPROXY_CCLayer_ccOtherMouseDown_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	id arg0; 

	arg0 = (NSEvent*) jsval_to_nsobject( cx, *argvp++);
	BOOL ret_val;

	CCLayer *real = (CCLayer*) [proxy realObj];
	ret_val = [real ccOtherMouseDown:(NSEvent*)arg0  ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: NSEvent*
// Ret value: BOOL (b)
JSBool JSPROXY_CCLayer_ccOtherMouseDragged_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	id arg0; 

	arg0 = (NSEvent*) jsval_to_nsobject( cx, *argvp++);
	BOOL ret_val;

	CCLayer *real = (CCLayer*) [proxy realObj];
	ret_val = [real ccOtherMouseDragged:(NSEvent*)arg0  ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: NSEvent*
// Ret value: BOOL (b)
JSBool JSPROXY_CCLayer_ccOtherMouseUp_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	id arg0; 

	arg0 = (NSEvent*) jsval_to_nsobject( cx, *argvp++);
	BOOL ret_val;

	CCLayer *real = (CCLayer*) [proxy realObj];
	ret_val = [real ccOtherMouseUp:(NSEvent*)arg0  ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: NSEvent*
// Ret value: BOOL (b)
JSBool JSPROXY_CCLayer_ccRightMouseDown_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	id arg0; 

	arg0 = (NSEvent*) jsval_to_nsobject( cx, *argvp++);
	BOOL ret_val;

	CCLayer *real = (CCLayer*) [proxy realObj];
	ret_val = [real ccRightMouseDown:(NSEvent*)arg0  ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: NSEvent*
// Ret value: BOOL (b)
JSBool JSPROXY_CCLayer_ccRightMouseDragged_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	id arg0; 

	arg0 = (NSEvent*) jsval_to_nsobject( cx, *argvp++);
	BOOL ret_val;

	CCLayer *real = (CCLayer*) [proxy realObj];
	ret_val = [real ccRightMouseDragged:(NSEvent*)arg0  ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: NSEvent*
// Ret value: BOOL (b)
JSBool JSPROXY_CCLayer_ccRightMouseUp_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	id arg0; 

	arg0 = (NSEvent*) jsval_to_nsobject( cx, *argvp++);
	BOOL ret_val;

	CCLayer *real = (CCLayer*) [proxy realObj];
	ret_val = [real ccRightMouseUp:(NSEvent*)arg0  ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: NSEvent*
// Ret value: BOOL (b)
JSBool JSPROXY_CCLayer_ccScrollWheel_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	id arg0; 

	arg0 = (NSEvent*) jsval_to_nsobject( cx, *argvp++);
	BOOL ret_val;

	CCLayer *real = (CCLayer*) [proxy realObj];
	ret_val = [real ccScrollWheel:(NSEvent*)arg0  ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: NSEvent*
// Ret value: BOOL (b)
JSBool JSPROXY_CCLayer_ccTouchesBeganWithEvent_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	id arg0; 

	arg0 = (NSEvent*) jsval_to_nsobject( cx, *argvp++);
	BOOL ret_val;

	CCLayer *real = (CCLayer*) [proxy realObj];
	ret_val = [real ccTouchesBeganWithEvent:(NSEvent*)arg0  ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: NSEvent*
// Ret value: BOOL (b)
JSBool JSPROXY_CCLayer_ccTouchesCancelledWithEvent_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	id arg0; 

	arg0 = (NSEvent*) jsval_to_nsobject( cx, *argvp++);
	BOOL ret_val;

	CCLayer *real = (CCLayer*) [proxy realObj];
	ret_val = [real ccTouchesCancelledWithEvent:(NSEvent*)arg0  ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: NSEvent*
// Ret value: BOOL (b)
JSBool JSPROXY_CCLayer_ccTouchesEndedWithEvent_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	id arg0; 

	arg0 = (NSEvent*) jsval_to_nsobject( cx, *argvp++);
	BOOL ret_val;

	CCLayer *real = (CCLayer*) [proxy realObj];
	ret_val = [real ccTouchesEndedWithEvent:(NSEvent*)arg0  ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: NSEvent*
// Ret value: BOOL (b)
JSBool JSPROXY_CCLayer_ccTouchesMovedWithEvent_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	id arg0; 

	arg0 = (NSEvent*) jsval_to_nsobject( cx, *argvp++);
	BOOL ret_val;

	CCLayer *real = (CCLayer*) [proxy realObj];
	ret_val = [real ccTouchesMovedWithEvent:(NSEvent*)arg0  ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

void JSPROXY_CCLayer_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCLayer_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCLayer_class->name = name;
	JSPROXY_CCLayer_class->addProperty = JS_PropertyStub;
	JSPROXY_CCLayer_class->delProperty = JS_PropertyStub;
	JSPROXY_CCLayer_class->getProperty = JS_PropertyStub;
	JSPROXY_CCLayer_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCLayer_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCLayer_class->resolve = JS_ResolveStub;
	JSPROXY_CCLayer_class->convert = JS_ConvertStub;
	JSPROXY_CCLayer_class->finalize = JSPROXY_CCLayer_finalize;
	JSPROXY_CCLayer_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("isKeyboardEnabled", JSPROXY_CCLayer_isKeyboardEnabled, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("isMouseEnabled", JSPROXY_CCLayer_isMouseEnabled, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("isTouchEnabled", JSPROXY_CCLayer_isTouchEnabled, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("keyboardDelegatePriority", JSPROXY_CCLayer_keyboardDelegatePriority, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("mouseDelegatePriority", JSPROXY_CCLayer_mouseDelegatePriority, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setIsKeyboardEnabled", JSPROXY_CCLayer_setIsKeyboardEnabled_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setIsMouseEnabled", JSPROXY_CCLayer_setIsMouseEnabled_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setIsTouchEnabled", JSPROXY_CCLayer_setIsTouchEnabled_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("touchDelegatePriority", JSPROXY_CCLayer_touchDelegatePriority, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("ccFlagsChanged", JSPROXY_CCLayer_ccFlagsChanged_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("ccKeyDown", JSPROXY_CCLayer_ccKeyDown_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("ccKeyUp", JSPROXY_CCLayer_ccKeyUp_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("ccMouseEntered", JSPROXY_CCLayer_ccMouseEntered_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("ccMouseExited", JSPROXY_CCLayer_ccMouseExited_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("ccMouseMoved", JSPROXY_CCLayer_ccMouseMoved_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("ccOtherMouseDown", JSPROXY_CCLayer_ccOtherMouseDown_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("ccOtherMouseDragged", JSPROXY_CCLayer_ccOtherMouseDragged_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("ccOtherMouseUp", JSPROXY_CCLayer_ccOtherMouseUp_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("ccRightMouseDown", JSPROXY_CCLayer_ccRightMouseDown_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("ccRightMouseDragged", JSPROXY_CCLayer_ccRightMouseDragged_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("ccRightMouseUp", JSPROXY_CCLayer_ccRightMouseUp_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("ccScrollWheel", JSPROXY_CCLayer_ccScrollWheel_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("ccTouchesBeganWithEvent", JSPROXY_CCLayer_ccTouchesBeganWithEvent_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("ccTouchesCancelledWithEvent", JSPROXY_CCLayer_ccTouchesCancelledWithEvent_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("ccTouchesEndedWithEvent", JSPROXY_CCLayer_ccTouchesEndedWithEvent_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("ccTouchesMovedWithEvent", JSPROXY_CCLayer_ccTouchesMovedWithEvent_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FS_END
	};

	JSPROXY_CCLayer_object = JS_InitClass(cx, globalObj, JSPROXY_CCNode_object, JSPROXY_CCLayer_class, JSPROXY_CCLayer_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCLayer

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCLayer_class, JSPROXY_CCLayer_object, NULL);
	JSPROXY_CCLayer *proxy = [[JSPROXY_CCLayer alloc] initWithJSObject:jsobj class:[CCLayer class]];
	[proxy setRealObj:realObj];

	if( realObj ) {
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
		[proxy release];
	}

	[self swizzleMethods];

	return jsobj;
}

+(void) swizzleMethods
{
	[super swizzleMethods];

	static BOOL CCLayer_already_swizzled = NO;
	if( ! CCLayer_already_swizzled ) {
		NSError *error;

		CCLayer_already_swizzled = YES;
	}
}

-(BOOL) ccMouseUp:(NSEvent*)event 
{
	if (_jsObj) {
		JSContext* cx = [[ScriptingCore sharedInstance] globalContext];
		JSBool found;
		JS_HasProperty(cx, _jsObj, "onMouseUp", &found);
		if (found == JS_TRUE) {
			jsval rval, fval;
			unsigned argc=1;
			jsval argv[1];
			argv[0] = OBJECT_TO_JSVAL( get_or_create_jsobject_from_realobj( cx, event ) );

			JS_GetProperty(cx, _jsObj, "onMouseUp", &fval);
			JS_CallFunctionValue(cx, _jsObj, fval, argc, argv, &rval);
		}
	}
}

-(BOOL) ccMouseDragged:(NSEvent*)event 
{
	if (_jsObj) {
		JSContext* cx = [[ScriptingCore sharedInstance] globalContext];
		JSBool found;
		JS_HasProperty(cx, _jsObj, "onMouseDragged", &found);
		if (found == JS_TRUE) {
			jsval rval, fval;
			unsigned argc=1;
			jsval argv[1];
			argv[0] = OBJECT_TO_JSVAL( get_or_create_jsobject_from_realobj( cx, event ) );

			JS_GetProperty(cx, _jsObj, "onMouseDragged", &fval);
			JS_CallFunctionValue(cx, _jsObj, fval, argc, argv, &rval);
		}
	}
}

-(BOOL) ccMouseDown:(NSEvent*)event 
{
	if (_jsObj) {
		JSContext* cx = [[ScriptingCore sharedInstance] globalContext];
		JSBool found;
		JS_HasProperty(cx, _jsObj, "onMouseDown", &found);
		if (found == JS_TRUE) {
			jsval rval, fval;
			unsigned argc=1;
			jsval argv[1];
			argv[0] = OBJECT_TO_JSVAL( get_or_create_jsobject_from_realobj( cx, event ) );

			JS_GetProperty(cx, _jsObj, "onMouseDown", &fval);
			JS_CallFunctionValue(cx, _jsObj, fval, argc, argv, &rval);
		}
	}
}

@end
@implementation CCLayer (SpiderMonkey)

-(BOOL) ccMouseUp:(NSEvent*)event 
{

	JSPROXY_CCLayer *proxy = objc_getAssociatedObject(self, &JSPROXY_association_proxy_key);
	if( proxy )
		[proxy ccMouseUp:event ];
}

-(BOOL) ccMouseDragged:(NSEvent*)event 
{

	JSPROXY_CCLayer *proxy = objc_getAssociatedObject(self, &JSPROXY_association_proxy_key);
	if( proxy )
		[proxy ccMouseDragged:event ];
}

-(BOOL) ccMouseDown:(NSEvent*)event 
{

	JSPROXY_CCLayer *proxy = objc_getAssociatedObject(self, &JSPROXY_association_proxy_key);
	if( proxy )
		[proxy ccMouseDown:event ];
}
@end

/*
 * CCLayerMultiplex
 */
#pragma mark - CCLayerMultiplex

JSClass* JSPROXY_CCLayerMultiplex_class = NULL;
JSObject* JSPROXY_CCLayerMultiplex_object = NULL;
 // Constructor
JSBool JSPROXY_CCLayerMultiplex_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCLayerMultiplex createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCLayerMultiplex_finalize(JSContext *cx, JSObject *obj)
{
	CCLOGINFO(@"spidermonkey: finalizing JS object %p (CCLayerMultiplex)", obj);
}

// Arguments: unsigned int
// Ret value: void (None)
JSBool JSPROXY_CCLayerMultiplex_switchTo_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	uint32_t arg0; 

	JS_ValueToECMAUint32( cx, *argvp++, &arg0 );

	CCLayerMultiplex *real = (CCLayerMultiplex*) [proxy realObj];
	[real switchTo:(unsigned int)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: unsigned int
// Ret value: void (None)
JSBool JSPROXY_CCLayerMultiplex_switchToAndReleaseMe_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	uint32_t arg0; 

	JS_ValueToECMAUint32( cx, *argvp++, &arg0 );

	CCLayerMultiplex *real = (CCLayerMultiplex*) [proxy realObj];
	[real switchToAndReleaseMe:(unsigned int)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

void JSPROXY_CCLayerMultiplex_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCLayerMultiplex_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCLayerMultiplex_class->name = name;
	JSPROXY_CCLayerMultiplex_class->addProperty = JS_PropertyStub;
	JSPROXY_CCLayerMultiplex_class->delProperty = JS_PropertyStub;
	JSPROXY_CCLayerMultiplex_class->getProperty = JS_PropertyStub;
	JSPROXY_CCLayerMultiplex_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCLayerMultiplex_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCLayerMultiplex_class->resolve = JS_ResolveStub;
	JSPROXY_CCLayerMultiplex_class->convert = JS_ConvertStub;
	JSPROXY_CCLayerMultiplex_class->finalize = JSPROXY_CCLayerMultiplex_finalize;
	JSPROXY_CCLayerMultiplex_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("switchTo", JSPROXY_CCLayerMultiplex_switchTo_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("switchToAndReleaseMe", JSPROXY_CCLayerMultiplex_switchToAndReleaseMe_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FS_END
	};

	JSPROXY_CCLayerMultiplex_object = JS_InitClass(cx, globalObj, JSPROXY_CCLayer_object, JSPROXY_CCLayerMultiplex_class, JSPROXY_CCLayerMultiplex_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCLayerMultiplex

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCLayerMultiplex_class, JSPROXY_CCLayerMultiplex_object, NULL);
	JSPROXY_CCLayerMultiplex *proxy = [[JSPROXY_CCLayerMultiplex alloc] initWithJSObject:jsobj class:[CCLayerMultiplex class]];
	[proxy setRealObj:realObj];

	if( realObj ) {
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
		[proxy release];
	}

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCLayerColor
 */
#pragma mark - CCLayerColor

JSClass* JSPROXY_CCLayerColor_class = NULL;
JSObject* JSPROXY_CCLayerColor_object = NULL;
 // Constructor
JSBool JSPROXY_CCLayerColor_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCLayerColor createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCLayerColor_finalize(JSContext *cx, JSObject *obj)
{
	CCLOGINFO(@"spidermonkey: finalizing JS object %p (CCLayerColor)", obj);
}

// Arguments: 
// Ret value: ccBlendFunc ({_ccBlendFunc=II})
JSBool JSPROXY_CCLayerColor_blendFunc(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	ccBlendFunc ret_val;

	CCLayerColor *real = (CCLayerColor*) [proxy realObj];
	ret_val = [real blendFunc ];

	JSObject *typedArray = js_CreateTypedArray(cx, js::TypedArray::TYPE_UINT32, 2 );
	ccBlendFunc* buffer = (ccBlendFunc*)JS_GetTypedArrayData(typedArray);
	*buffer = ret_val;
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(typedArray));
	
	return JS_TRUE;
}

// Arguments: GLfloat
// Ret value: void (None)
JSBool JSPROXY_CCLayerColor_changeHeight_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; 

	JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCLayerColor *real = (CCLayerColor*) [proxy realObj];
	[real changeHeight:(GLfloat)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: GLfloat
// Ret value: void (None)
JSBool JSPROXY_CCLayerColor_changeWidth_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; 

	JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCLayerColor *real = (CCLayerColor*) [proxy realObj];
	[real changeWidth:(GLfloat)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: GLfloat, GLfloat
// Ret value: void (None)
JSBool JSPROXY_CCLayerColor_changeWidth_height_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; double arg1; 

	JS_ValueToNumber( cx, *argvp++, &arg0 );
	JS_ValueToNumber( cx, *argvp++, &arg1 );

	CCLayerColor *real = (CCLayerColor*) [proxy realObj];
	[real changeWidth:(GLfloat)arg0 height:(GLfloat)arg1  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: ccColor3B ({_ccColor3B=CCC})
JSBool JSPROXY_CCLayerColor_color(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	ccColor3B ret_val;

	CCLayerColor *real = (CCLayerColor*) [proxy realObj];
	ret_val = [real color ];

	JSObject *typedArray = js_CreateTypedArray(cx, js::TypedArray::TYPE_UINT8, 3 );
	ccColor3B* buffer = (ccColor3B*)JS_GetTypedArrayData(typedArray);
	*buffer = ret_val;
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(typedArray));
	
	return JS_TRUE;
}

// Arguments: ccColor4B
// Ret value: None (None)
JSBool JSPROXY_CCLayerColor_initWithColor_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	ccColor4B arg0; 


	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	arg0 = *(ccColor4B*)JS_GetTypedArrayData( tmp_arg0);

	CCLayerColor *real = [(CCLayerColor*)[proxy.klass alloc] initWithColor:(ccColor4B)arg0  ];
	[proxy setRealObj: real];
	[real autorelease];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
	[proxy release];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: ccColor4B, GLfloat, GLfloat
// Ret value: None (None)
JSBool JSPROXY_CCLayerColor_initWithColor_width_height_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 3, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	ccColor4B arg0; double arg1; double arg2; 


	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	arg0 = *(ccColor4B*)JS_GetTypedArrayData( tmp_arg0);
	JS_ValueToNumber( cx, *argvp++, &arg1 );
	JS_ValueToNumber( cx, *argvp++, &arg2 );

	CCLayerColor *real = [(CCLayerColor*)[proxy.klass alloc] initWithColor:(ccColor4B)arg0 width:(GLfloat)arg1 height:(GLfloat)arg2  ];
	[proxy setRealObj: real];
	[real autorelease];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
	[proxy release];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: ccColor4B
// Ret value: CCLayerColor* (o)
JSBool JSPROXY_CCLayerColor_layerWithColor__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	ccColor4B arg0; 


	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	arg0 = *(ccColor4B*)JS_GetTypedArrayData( tmp_arg0);
	CCLayerColor* ret_val;

	ret_val = [CCLayerColor layerWithColor:(ccColor4B)arg0  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( cx, ret_val );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: ccColor4B, GLfloat, GLfloat
// Ret value: CCLayerColor* (o)
JSBool JSPROXY_CCLayerColor_layerWithColor_width_height__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 3, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	ccColor4B arg0; double arg1; double arg2; 


	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	arg0 = *(ccColor4B*)JS_GetTypedArrayData( tmp_arg0);
	JS_ValueToNumber( cx, *argvp++, &arg1 );
	JS_ValueToNumber( cx, *argvp++, &arg2 );
	CCLayerColor* ret_val;

	ret_val = [CCLayerColor layerWithColor:(ccColor4B)arg0 width:(GLfloat)arg1 height:(GLfloat)arg2  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( cx, ret_val );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: GLubyte (c)
JSBool JSPROXY_CCLayerColor_opacity(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	GLubyte ret_val;

	CCLayerColor *real = (CCLayerColor*) [proxy realObj];
	ret_val = [real opacity ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: ccBlendFunc
// Ret value: void (None)
JSBool JSPROXY_CCLayerColor_setBlendFunc_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	ccBlendFunc arg0; 


	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	arg0 = *(ccBlendFunc*)JS_GetTypedArrayData( tmp_arg0);

	CCLayerColor *real = (CCLayerColor*) [proxy realObj];
	[real setBlendFunc:(ccBlendFunc)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSPROXY_CCLayerColor_doesOpacityModifyRGB(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CCLayerColor *real = (CCLayerColor*) [proxy realObj];
	ret_val = [real doesOpacityModifyRGB ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: ccColor3B
// Ret value: void (None)
JSBool JSPROXY_CCLayerColor_setColor_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	ccColor3B arg0; 


	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	arg0 = *(ccColor3B*)JS_GetTypedArrayData( tmp_arg0);

	CCLayerColor *real = (CCLayerColor*) [proxy realObj];
	[real setColor:(ccColor3B)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: GLubyte
// Ret value: void (None)
JSBool JSPROXY_CCLayerColor_setOpacity_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	uint16_t arg0; 

	JS_ValueToUint16( cx, *argvp++, &arg0 );

	CCLayerColor *real = (CCLayerColor*) [proxy realObj];
	[real setOpacity:(GLubyte)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: void (None)
JSBool JSPROXY_CCLayerColor_setOpacityModifyRGB_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; 

	JS_ValueToBoolean( cx, *argvp++, &arg0 );

	CCLayerColor *real = (CCLayerColor*) [proxy realObj];
	[real setOpacityModifyRGB:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

void JSPROXY_CCLayerColor_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCLayerColor_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCLayerColor_class->name = name;
	JSPROXY_CCLayerColor_class->addProperty = JS_PropertyStub;
	JSPROXY_CCLayerColor_class->delProperty = JS_PropertyStub;
	JSPROXY_CCLayerColor_class->getProperty = JS_PropertyStub;
	JSPROXY_CCLayerColor_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCLayerColor_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCLayerColor_class->resolve = JS_ResolveStub;
	JSPROXY_CCLayerColor_class->convert = JS_ConvertStub;
	JSPROXY_CCLayerColor_class->finalize = JSPROXY_CCLayerColor_finalize;
	JSPROXY_CCLayerColor_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("blendFunc", JSPROXY_CCLayerColor_blendFunc, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("changeHeight", JSPROXY_CCLayerColor_changeHeight_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("changeWidth", JSPROXY_CCLayerColor_changeWidth_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("changeWidthHeight", JSPROXY_CCLayerColor_changeWidth_height_, 2, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("color", JSPROXY_CCLayerColor_color, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("initWithColor", JSPROXY_CCLayerColor_initWithColor_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("initWithColorWidthHeight", JSPROXY_CCLayerColor_initWithColor_width_height_, 3, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("opacity", JSPROXY_CCLayerColor_opacity, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setBlendFunc", JSPROXY_CCLayerColor_setBlendFunc_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("doesOpacityModifyRGB", JSPROXY_CCLayerColor_doesOpacityModifyRGB, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setColor", JSPROXY_CCLayerColor_setColor_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setOpacity", JSPROXY_CCLayerColor_setOpacity_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setOpacityModifyRGB", JSPROXY_CCLayerColor_setOpacityModifyRGB_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("layerWithColor", JSPROXY_CCLayerColor_layerWithColor__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("layerWithColorWidthHeight", JSPROXY_CCLayerColor_layerWithColor_width_height__static, 3, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FS_END
	};

	JSPROXY_CCLayerColor_object = JS_InitClass(cx, globalObj, JSPROXY_CCLayer_object, JSPROXY_CCLayerColor_class, JSPROXY_CCLayerColor_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCLayerColor

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCLayerColor_class, JSPROXY_CCLayerColor_object, NULL);
	JSPROXY_CCLayerColor *proxy = [[JSPROXY_CCLayerColor alloc] initWithJSObject:jsobj class:[CCLayerColor class]];
	[proxy setRealObj:realObj];

	if( realObj ) {
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
		[proxy release];
	}

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCLayerGradient
 */
#pragma mark - CCLayerGradient

JSClass* JSPROXY_CCLayerGradient_class = NULL;
JSObject* JSPROXY_CCLayerGradient_object = NULL;
 // Constructor
JSBool JSPROXY_CCLayerGradient_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCLayerGradient createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCLayerGradient_finalize(JSContext *cx, JSObject *obj)
{
	CCLOGINFO(@"spidermonkey: finalizing JS object %p (CCLayerGradient)", obj);
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSPROXY_CCLayerGradient_compressedInterpolation(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CCLayerGradient *real = (CCLayerGradient*) [proxy realObj];
	ret_val = [real compressedInterpolation ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: ccColor3B ({_ccColor3B=CCC})
JSBool JSPROXY_CCLayerGradient_endColor(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	ccColor3B ret_val;

	CCLayerGradient *real = (CCLayerGradient*) [proxy realObj];
	ret_val = [real endColor ];

	JSObject *typedArray = js_CreateTypedArray(cx, js::TypedArray::TYPE_UINT8, 3 );
	ccColor3B* buffer = (ccColor3B*)JS_GetTypedArrayData(typedArray);
	*buffer = ret_val;
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(typedArray));
	
	return JS_TRUE;
}

// Arguments: 
// Ret value: GLubyte (c)
JSBool JSPROXY_CCLayerGradient_endOpacity(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	GLubyte ret_val;

	CCLayerGradient *real = (CCLayerGradient*) [proxy realObj];
	ret_val = [real endOpacity ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: ccColor4B, ccColor4B
// Ret value: None (None)
JSBool JSPROXY_CCLayerGradient_initWithColor_fadingTo_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	ccColor4B arg0; ccColor4B arg1; 


	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	arg0 = *(ccColor4B*)JS_GetTypedArrayData( tmp_arg0);

	JSObject *tmp_arg1;
	JS_ValueToObject( cx, *argvp++, &tmp_arg1 );
	arg1 = *(ccColor4B*)JS_GetTypedArrayData( tmp_arg1);

	CCLayerGradient *real = [(CCLayerGradient*)[proxy.klass alloc] initWithColor:(ccColor4B)arg0 fadingTo:(ccColor4B)arg1  ];
	[proxy setRealObj: real];
	[real autorelease];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
	[proxy release];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: ccColor4B, ccColor4B, CGPoint
// Ret value: None (None)
JSBool JSPROXY_CCLayerGradient_initWithColor_fadingTo_alongVector_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc >= 2 && argc <= 3 , @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	ccColor4B arg0; ccColor4B arg1; CGPoint arg2; 


	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	arg0 = *(ccColor4B*)JS_GetTypedArrayData( tmp_arg0);

	JSObject *tmp_arg1;
	JS_ValueToObject( cx, *argvp++, &tmp_arg1 );
	arg1 = *(ccColor4B*)JS_GetTypedArrayData( tmp_arg1);
	if (argc >= 3) {
	
	JSObject *tmp_arg2;
	JS_ValueToObject( cx, *argvp++, &tmp_arg2 );
	arg2 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg2);
	}

	if( argc == 2 ) {
		CCLayerGradient *real = [(CCLayerGradient*)[proxy.klass alloc] initWithColor:(ccColor4B)arg0 fadingTo:(ccColor4B)arg1  ];
	[proxy setRealObj: real];
	[real autorelease];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
	[proxy release];
	}

	if( argc == 3 ) {
		CCLayerGradient *real = [(CCLayerGradient*)[proxy.klass alloc] initWithColor:(ccColor4B)arg0 fadingTo:(ccColor4B)arg1 alongVector:(CGPoint)arg2  ];
	[proxy setRealObj: real];
	[real autorelease];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
	[proxy release];
	}
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: ccColor4B, ccColor4B, CGPoint
// Ret value: CCLayerGradient* (o)
JSBool JSPROXY_CCLayerGradient_layerWithColor_fadingTo_alongVector__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc >= 2 && argc <= 3 , @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	ccColor4B arg0; ccColor4B arg1; CGPoint arg2; 


	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	arg0 = *(ccColor4B*)JS_GetTypedArrayData( tmp_arg0);

	JSObject *tmp_arg1;
	JS_ValueToObject( cx, *argvp++, &tmp_arg1 );
	arg1 = *(ccColor4B*)JS_GetTypedArrayData( tmp_arg1);
	if (argc >= 3) {
	
	JSObject *tmp_arg2;
	JS_ValueToObject( cx, *argvp++, &tmp_arg2 );
	arg2 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg2);
	}
	CCLayerGradient* ret_val;

	if( argc == 2 ) {
		ret_val = [CCLayerGradient layerWithColor:(ccColor4B)arg0 fadingTo:(ccColor4B)arg1  ];
	}

	if( argc == 3 ) {
		ret_val = [CCLayerGradient layerWithColor:(ccColor4B)arg0 fadingTo:(ccColor4B)arg1 alongVector:(CGPoint)arg2  ];
	}

	JSObject *jsobj = get_or_create_jsobject_from_realobj( cx, ret_val );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: void (None)
JSBool JSPROXY_CCLayerGradient_setCompressedInterpolation_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; 

	JS_ValueToBoolean( cx, *argvp++, &arg0 );

	CCLayerGradient *real = (CCLayerGradient*) [proxy realObj];
	[real setCompressedInterpolation:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: ccColor3B
// Ret value: void (None)
JSBool JSPROXY_CCLayerGradient_setEndColor_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	ccColor3B arg0; 


	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	arg0 = *(ccColor3B*)JS_GetTypedArrayData( tmp_arg0);

	CCLayerGradient *real = (CCLayerGradient*) [proxy realObj];
	[real setEndColor:(ccColor3B)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: GLubyte
// Ret value: void (None)
JSBool JSPROXY_CCLayerGradient_setEndOpacity_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	uint16_t arg0; 

	JS_ValueToUint16( cx, *argvp++, &arg0 );

	CCLayerGradient *real = (CCLayerGradient*) [proxy realObj];
	[real setEndOpacity:(GLubyte)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: ccColor3B
// Ret value: void (None)
JSBool JSPROXY_CCLayerGradient_setStartColor_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	ccColor3B arg0; 


	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	arg0 = *(ccColor3B*)JS_GetTypedArrayData( tmp_arg0);

	CCLayerGradient *real = (CCLayerGradient*) [proxy realObj];
	[real setStartColor:(ccColor3B)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: GLubyte
// Ret value: void (None)
JSBool JSPROXY_CCLayerGradient_setStartOpacity_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	uint16_t arg0; 

	JS_ValueToUint16( cx, *argvp++, &arg0 );

	CCLayerGradient *real = (CCLayerGradient*) [proxy realObj];
	[real setStartOpacity:(GLubyte)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: CGPoint
// Ret value: void (None)
JSBool JSPROXY_CCLayerGradient_setVector_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	CGPoint arg0; 


	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	arg0 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg0);

	CCLayerGradient *real = (CCLayerGradient*) [proxy realObj];
	[real setVector:(CGPoint)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: ccColor3B ({_ccColor3B=CCC})
JSBool JSPROXY_CCLayerGradient_startColor(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	ccColor3B ret_val;

	CCLayerGradient *real = (CCLayerGradient*) [proxy realObj];
	ret_val = [real startColor ];

	JSObject *typedArray = js_CreateTypedArray(cx, js::TypedArray::TYPE_UINT8, 3 );
	ccColor3B* buffer = (ccColor3B*)JS_GetTypedArrayData(typedArray);
	*buffer = ret_val;
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(typedArray));
	
	return JS_TRUE;
}

// Arguments: 
// Ret value: GLubyte (c)
JSBool JSPROXY_CCLayerGradient_startOpacity(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	GLubyte ret_val;

	CCLayerGradient *real = (CCLayerGradient*) [proxy realObj];
	ret_val = [real startOpacity ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: CGPoint ({CGPoint=ff})
JSBool JSPROXY_CCLayerGradient_vector(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CGPoint ret_val;

	CCLayerGradient *real = (CCLayerGradient*) [proxy realObj];
	ret_val = [real vector ];

	JSObject *typedArray = js_CreateTypedArray(cx, js::TypedArray::TYPE_FLOAT32, 2 );
	CGPoint* buffer = (CGPoint*)JS_GetTypedArrayData(typedArray);
	*buffer = ret_val;
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(typedArray));
	
	return JS_TRUE;
}

// Arguments: ccColor4B
// Ret value: CCLayerGradient* (o)
JSBool JSPROXY_CCLayerGradient_layerWithColor__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	ccColor4B arg0; 


	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	arg0 = *(ccColor4B*)JS_GetTypedArrayData( tmp_arg0);
	CCLayerGradient* ret_val;

	ret_val = [CCLayerGradient layerWithColor:(ccColor4B)arg0  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( cx, ret_val );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: ccColor4B, GLfloat, GLfloat
// Ret value: CCLayerGradient* (o)
JSBool JSPROXY_CCLayerGradient_layerWithColor_width_height__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 3, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	ccColor4B arg0; double arg1; double arg2; 


	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	arg0 = *(ccColor4B*)JS_GetTypedArrayData( tmp_arg0);
	JS_ValueToNumber( cx, *argvp++, &arg1 );
	JS_ValueToNumber( cx, *argvp++, &arg2 );
	CCLayerGradient* ret_val;

	ret_val = [CCLayerGradient layerWithColor:(ccColor4B)arg0 width:(GLfloat)arg1 height:(GLfloat)arg2  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( cx, ret_val );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

void JSPROXY_CCLayerGradient_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCLayerGradient_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCLayerGradient_class->name = name;
	JSPROXY_CCLayerGradient_class->addProperty = JS_PropertyStub;
	JSPROXY_CCLayerGradient_class->delProperty = JS_PropertyStub;
	JSPROXY_CCLayerGradient_class->getProperty = JS_PropertyStub;
	JSPROXY_CCLayerGradient_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCLayerGradient_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCLayerGradient_class->resolve = JS_ResolveStub;
	JSPROXY_CCLayerGradient_class->convert = JS_ConvertStub;
	JSPROXY_CCLayerGradient_class->finalize = JSPROXY_CCLayerGradient_finalize;
	JSPROXY_CCLayerGradient_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("compressedInterpolation", JSPROXY_CCLayerGradient_compressedInterpolation, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("endColor", JSPROXY_CCLayerGradient_endColor, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("endOpacity", JSPROXY_CCLayerGradient_endOpacity, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("initWithColorFadingto", JSPROXY_CCLayerGradient_initWithColor_fadingTo_, 2, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("init", JSPROXY_CCLayerGradient_initWithColor_fadingTo_alongVector_, 3, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setCompressedInterpolation", JSPROXY_CCLayerGradient_setCompressedInterpolation_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setEndColor", JSPROXY_CCLayerGradient_setEndColor_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setEndOpacity", JSPROXY_CCLayerGradient_setEndOpacity_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setStartColor", JSPROXY_CCLayerGradient_setStartColor_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setStartOpacity", JSPROXY_CCLayerGradient_setStartOpacity_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setVector", JSPROXY_CCLayerGradient_setVector_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("startColor", JSPROXY_CCLayerGradient_startColor, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("startOpacity", JSPROXY_CCLayerGradient_startOpacity, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("vector", JSPROXY_CCLayerGradient_vector, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("create", JSPROXY_CCLayerGradient_layerWithColor_fadingTo_alongVector__static, 3, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("layerWithColor", JSPROXY_CCLayerGradient_layerWithColor__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("layerWithColorWidthHeight", JSPROXY_CCLayerGradient_layerWithColor_width_height__static, 3, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FS_END
	};

	JSPROXY_CCLayerGradient_object = JS_InitClass(cx, globalObj, JSPROXY_CCLayerColor_object, JSPROXY_CCLayerGradient_class, JSPROXY_CCLayerGradient_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCLayerGradient

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCLayerGradient_class, JSPROXY_CCLayerGradient_object, NULL);
	JSPROXY_CCLayerGradient *proxy = [[JSPROXY_CCLayerGradient alloc] initWithJSObject:jsobj class:[CCLayerGradient class]];
	[proxy setRealObj:realObj];

	if( realObj ) {
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
		[proxy release];
	}

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCMenu
 */
#pragma mark - CCMenu

JSClass* JSPROXY_CCMenu_class = NULL;
JSObject* JSPROXY_CCMenu_object = NULL;
 // Constructor
JSBool JSPROXY_CCMenu_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCMenu createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCMenu_finalize(JSContext *cx, JSObject *obj)
{
	CCLOGINFO(@"spidermonkey: finalizing JS object %p (CCMenu)", obj);
}

// Arguments: 
// Ret value: void (None)
JSBool JSPROXY_CCMenu_alignItemsHorizontally(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCMenu *real = (CCMenu*) [proxy realObj];
	[real alignItemsHorizontally ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: float
// Ret value: void (None)
JSBool JSPROXY_CCMenu_alignItemsHorizontallyWithPadding_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; 

	JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCMenu *real = (CCMenu*) [proxy realObj];
	[real alignItemsHorizontallyWithPadding:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: void (None)
JSBool JSPROXY_CCMenu_alignItemsVertically(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCMenu *real = (CCMenu*) [proxy realObj];
	[real alignItemsVertically ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: float
// Ret value: void (None)
JSBool JSPROXY_CCMenu_alignItemsVerticallyWithPadding_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; 

	JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCMenu *real = (CCMenu*) [proxy realObj];
	[real alignItemsVerticallyWithPadding:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: ccColor3B ({_ccColor3B=CCC})
JSBool JSPROXY_CCMenu_color(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	ccColor3B ret_val;

	CCMenu *real = (CCMenu*) [proxy realObj];
	ret_val = [real color ];

	JSObject *typedArray = js_CreateTypedArray(cx, js::TypedArray::TYPE_UINT8, 3 );
	ccColor3B* buffer = (ccColor3B*)JS_GetTypedArrayData(typedArray);
	*buffer = ret_val;
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(typedArray));
	
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSPROXY_CCMenu_enabled(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CCMenu *real = (CCMenu*) [proxy realObj];
	ret_val = [real enabled ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: NSArray*
// Ret value: None (None)
JSBool JSPROXY_CCMenu_initWithArray_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	NSArray* arg0; 

	arg0 = jsval_to_nsarray( cx, *argvp++ );

	CCMenu *real = [(CCMenu*)[proxy.klass alloc] initWithArray:(NSArray*)arg0  ];
	[proxy setRealObj: real];
	[real autorelease];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
	[proxy release];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: NSArray*
// Ret value: CCMenu* (o)
JSBool JSPROXY_CCMenu_menuWithArray__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc > 0, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	NSArray* arg0; 

	arg0 = jsvals_variadic_to_nsarray( cx, argvp, argc );
	CCMenu* ret_val;

	ret_val = [CCMenu menuWithArray:(NSArray*)arg0  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( cx, ret_val );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: GLubyte (c)
JSBool JSPROXY_CCMenu_opacity(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	GLubyte ret_val;

	CCMenu *real = (CCMenu*) [proxy realObj];
	ret_val = [real opacity ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: void (None)
JSBool JSPROXY_CCMenu_setEnabled_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; 

	JS_ValueToBoolean( cx, *argvp++, &arg0 );

	CCMenu *real = (CCMenu*) [proxy realObj];
	[real setEnabled:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: NSInteger
// Ret value: void (None)
JSBool JSPROXY_CCMenu_setHandlerPriority_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	int32_t arg0; 

	JS_ValueToECMAInt32( cx, *argvp++, &arg0 );

	CCMenu *real = (CCMenu*) [proxy realObj];
	[real setHandlerPriority:(NSInteger)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSPROXY_CCMenu_doesOpacityModifyRGB(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CCMenu *real = (CCMenu*) [proxy realObj];
	ret_val = [real doesOpacityModifyRGB ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: ccColor3B
// Ret value: void (None)
JSBool JSPROXY_CCMenu_setColor_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	ccColor3B arg0; 


	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	arg0 = *(ccColor3B*)JS_GetTypedArrayData( tmp_arg0);

	CCMenu *real = (CCMenu*) [proxy realObj];
	[real setColor:(ccColor3B)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: GLubyte
// Ret value: void (None)
JSBool JSPROXY_CCMenu_setOpacity_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	uint16_t arg0; 

	JS_ValueToUint16( cx, *argvp++, &arg0 );

	CCMenu *real = (CCMenu*) [proxy realObj];
	[real setOpacity:(GLubyte)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: void (None)
JSBool JSPROXY_CCMenu_setOpacityModifyRGB_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
//	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; 

	JS_ValueToBoolean( cx, *argvp++, &arg0 );

	CCMenu *real = (CCMenu*) [proxy realObj];
	[real setOpacityModifyRGB:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

void JSPROXY_CCMenu_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCMenu_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCMenu_class->name = name;
	JSPROXY_CCMenu_class->addProperty = JS_PropertyStub;
	JSPROXY_CCMenu_class->delProperty = JS_PropertyStub;
	JSPROXY_CCMenu_class->getProperty = JS_PropertyStub;
	JSPROXY_CCMenu_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCMenu_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCMenu_class->resolve = JS_ResolveStub;
	JSPROXY_CCMenu_class->convert = JS_ConvertStub;
	JSPROXY_CCMenu_class->finalize = JSPROXY_CCMenu_finalize;
	JSPROXY_CCMenu_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("alignItemsHorizontally", JSPROXY_CCMenu_alignItemsHorizontally, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("alignItemsHorizontallyWithPadding", JSPROXY_CCMenu_alignItemsHorizontallyWithPadding_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("alignItemsVertically", JSPROXY_CCMenu_alignItemsVertically, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("alignItemsVerticallyWithPadding", JSPROXY_CCMenu_alignItemsVerticallyWithPadding_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("color", JSPROXY_CCMenu_color, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("enabled", JSPROXY_CCMenu_enabled, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("initWithArray", JSPROXY_CCMenu_initWithArray_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("opacity", JSPROXY_CCMenu_opacity, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setEnabled", JSPROXY_CCMenu_setEnabled_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setHandlerPriority", JSPROXY_CCMenu_setHandlerPriority_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("doesOpacityModifyRGB", JSPROXY_CCMenu_doesOpacityModifyRGB, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setColor", JSPROXY_CCMenu_setColor_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setOpacity", JSPROXY_CCMenu_setOpacity_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setOpacityModifyRGB", JSPROXY_CCMenu_setOpacityModifyRGB_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("create", JSPROXY_CCMenu_menuWithArray__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FS_END
	};

	JSPROXY_CCMenu_object = JS_InitClass(cx, globalObj, JSPROXY_CCLayer_object, JSPROXY_CCMenu_class, JSPROXY_CCMenu_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCMenu

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCMenu_class, JSPROXY_CCMenu_object, NULL);
	JSPROXY_CCMenu *proxy = [[JSPROXY_CCMenu alloc] initWithJSObject:jsobj class:[CCMenu class]];
	[proxy setRealObj:realObj];

	if( realObj ) {
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
		[proxy release];
	}

	[self swizzleMethods];

	return jsobj;
}

@end
