/*
* AUTOGENERATED FILE. DO NOT EDIT IT
* Generated by ../../tools/js/generate_spidermonkey_bindings.py on 2012-05-31
*/

#import "jstypedarray.h"
#import "ScriptingCore.h"   

#import "js_bindings_cocos2d.h"


/*
 * CCDirector
 */
#pragma mark - CCDirector

JSClass* JSPROXY_CCDirector_class = NULL;
JSObject* JSPROXY_CCDirector_object = NULL;
 // Constructor
JSBool JSPROXY_CCDirector_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCDirector_class, JSPROXY_CCDirector_object, NULL);

    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCDirector_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCDirector *real= (JSPROXY_CCDirector*)JS_GetPrivate(obj);
	if (real)
		[real release];
}

// Arguments: 
// Ret value: NSTimeInterval
JSBool JSPROXY_CCDirector_animationInterval(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCDirector *real = (JSPROXY_CCDirector*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSTimeInterval ret_val;

	ret_val = [real animationInterval ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: CGPoint
// Ret value: CGPoint
JSBool JSPROXY_CCDirector_convertToGL_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCDirector *real = (JSPROXY_CCDirector*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	NSCAssert( JS_GetTypedArrayByteLength( tmp_arg0 ) == 8, @"Invalid length");
#ifdef __CC_PLATFORM_IOS
	CGPoint arg0 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg0 );
#elif defined(__CC_PLATFORM_MAC)
	float* arg0_array = (float*)JS_GetTypedArrayData( tmp_arg0 );
	CGPoint arg0 = ccp(arg0_array[0], arg0_array[1] );
#else
#error Unsupported Platform
#endif  
	CGPoint ret_val;

	ret_val = [real convertToGL:(CGPoint)arg0  ];

	JSObject *typedArray = js_CreateTypedArray(cx, js::TypedArray::TYPE_FLOAT32, 2 );
	float *buffer = (float*)JS_GetTypedArrayData(typedArray);
	buffer[0] = ret_val.x;
	buffer[1] = ret_val.y;
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(typedArray));

	return JS_TRUE;
}

// Arguments: CGPoint
// Ret value: CGPoint
JSBool JSPROXY_CCDirector_convertToUI_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCDirector *real = (JSPROXY_CCDirector*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	NSCAssert( JS_GetTypedArrayByteLength( tmp_arg0 ) == 8, @"Invalid length");
#ifdef __CC_PLATFORM_IOS
	CGPoint arg0 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg0 );
#elif defined(__CC_PLATFORM_MAC)
	float* arg0_array = (float*)JS_GetTypedArrayData( tmp_arg0 );
	CGPoint arg0 = ccp(arg0_array[0], arg0_array[1] );
#else
#error Unsupported Platform
#endif  
	CGPoint ret_val;

	ret_val = [real convertToUI:(CGPoint)arg0  ];

	JSObject *typedArray = js_CreateTypedArray(cx, js::TypedArray::TYPE_FLOAT32, 2 );
	float *buffer = (float*)JS_GetTypedArrayData(typedArray);
	buffer[0] = ret_val.x;
	buffer[1] = ret_val.y;
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(typedArray));

	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCDirector_createStatsLabel(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCDirector *real = (JSPROXY_CCDirector*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real createStatsLabel ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCDirector_displayStats(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCDirector *real = (JSPROXY_CCDirector*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	ret_val = [real displayStats ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCDirector_drawScene(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCDirector *real = (JSPROXY_CCDirector*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real drawScene ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCDirector_end(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCDirector *real = (JSPROXY_CCDirector*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real end ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCDirector_getZEye(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCDirector *real = (JSPROXY_CCDirector*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	ret_val = [real getZEye ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCDirector_isAnimating(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCDirector *real = (JSPROXY_CCDirector*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	ret_val = [real isAnimating ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCDirector_isPaused(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCDirector *real = (JSPROXY_CCDirector*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	ret_val = [real isPaused ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCDirector_nextDeltaTimeZero(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCDirector *real = (JSPROXY_CCDirector*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	ret_val = [real nextDeltaTimeZero ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCDirector_pause(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCDirector *real = (JSPROXY_CCDirector*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real pause ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCDirector_popScene(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCDirector *real = (JSPROXY_CCDirector*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real popScene ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: ccDirectorProjection
JSBool JSPROXY_CCDirector_projection(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCDirector *real = (JSPROXY_CCDirector*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	ccDirectorProjection ret_val;

	ret_val = [real projection ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCDirector_purgeCachedData(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCDirector *real = (JSPROXY_CCDirector*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real purgeCachedData ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCScene*
// Ret value: None
JSBool JSPROXY_CCDirector_pushScene_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCDirector *real = (JSPROXY_CCDirector*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	JSPROXY_CCScene* arg0 = (JSPROXY_CCScene*) JS_GetPrivate( tmp_arg0 ); 

	[real pushScene:(CCScene*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCScene*
// Ret value: None
JSBool JSPROXY_CCDirector_replaceScene_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCDirector *real = (JSPROXY_CCDirector*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	JSPROXY_CCScene* arg0 = (JSPROXY_CCScene*) JS_GetPrivate( tmp_arg0 ); 

	[real replaceScene:(CCScene*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CGSize
// Ret value: None
JSBool JSPROXY_CCDirector_reshapeProjection_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCDirector *real = (JSPROXY_CCDirector*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	CGSize arg0 = *(CGSize*)JS_GetTypedArrayData( tmp_arg0);

	[real reshapeProjection:(CGSize)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCDirector_resume(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCDirector *real = (JSPROXY_CCDirector*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real resume ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCScene*
// Ret value: None
JSBool JSPROXY_CCDirector_runWithScene_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCDirector *real = (JSPROXY_CCDirector*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	JSPROXY_CCScene* arg0 = (JSPROXY_CCScene*) JS_GetPrivate( tmp_arg0 ); 

	[real runWithScene:(CCScene*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: CCScene*
JSBool JSPROXY_CCDirector_runningScene(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCDirector *real = (JSPROXY_CCDirector*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CCScene* ret_val;

	ret_val = [real runningScene ];

	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCScene_class, JSPROXY_CCScene_object, NULL);
	JS_SetPrivate(jsobj, ret_val);
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: ccTime
JSBool JSPROXY_CCDirector_secondsPerFrame(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCDirector *real = (JSPROXY_CCDirector*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	ccTime ret_val;

	ret_val = [real secondsPerFrame ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCDirector_sendCleanupToScene(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCDirector *real = (JSPROXY_CCDirector*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	ret_val = [real sendCleanupToScene ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCDirector_setAlphaBlending_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCDirector *real = (JSPROXY_CCDirector*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	[real setAlphaBlending:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSTimeInterval
// Ret value: None
JSBool JSPROXY_CCDirector_setAnimationInterval_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCDirector *real = (JSPROXY_CCDirector*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	[real setAnimationInterval:(NSTimeInterval)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCDirector_setDepthTest_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCDirector *real = (JSPROXY_CCDirector*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	[real setDepthTest:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCDirector_setDisplayStats_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCDirector *real = (JSPROXY_CCDirector*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	[real setDisplayStats:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCDirector_setGLDefaultValues(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCDirector *real = (JSPROXY_CCDirector*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real setGLDefaultValues ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCDirector_setNextDeltaTimeZero_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCDirector *real = (JSPROXY_CCDirector*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	[real setNextDeltaTimeZero:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: ccDirectorProjection
// Ret value: None
JSBool JSPROXY_CCDirector_setProjection_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCDirector *real = (JSPROXY_CCDirector*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	int32_t arg0; JS_ValueToECMAInt32( cx, *argvp++, &arg0 );

	[real setProjection:(ccDirectorProjection)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: CCDirector*
JSBool JSPROXY_CCDirector_sharedDirector(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCDirector* real = [JSPROXY_CCDirector sharedDirector ];

	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCDirector_class, JSPROXY_CCDirector_object, NULL);
	JS_SetPrivate(jsobj, real);
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCDirector_startAnimation(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCDirector *real = (JSPROXY_CCDirector*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real startAnimation ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCDirector_stopAnimation(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCDirector *real = (JSPROXY_CCDirector*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real stopAnimation ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSUInteger
JSBool JSPROXY_CCDirector_totalFrames(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCDirector *real = (JSPROXY_CCDirector*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSUInteger ret_val;

	ret_val = [real totalFrames ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

void JSPROXY_CCDirector_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCDirector_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCDirector_class->name = name;
	JSPROXY_CCDirector_class->addProperty = JS_PropertyStub;
	JSPROXY_CCDirector_class->delProperty = JS_PropertyStub;
	JSPROXY_CCDirector_class->getProperty = JS_PropertyStub;
	JSPROXY_CCDirector_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCDirector_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCDirector_class->resolve = JS_ResolveStub;
	JSPROXY_CCDirector_class->convert = JS_ConvertStub;
	JSPROXY_CCDirector_class->finalize = JSPROXY_CCDirector_finalize;
	JSPROXY_CCDirector_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("animationInterval", JSPROXY_CCDirector_animationInterval, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("convertToGL", JSPROXY_CCDirector_convertToGL_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("convertToUI", JSPROXY_CCDirector_convertToUI_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("createStatsLabel", JSPROXY_CCDirector_createStatsLabel, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("displayStats", JSPROXY_CCDirector_displayStats, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("drawScene", JSPROXY_CCDirector_drawScene, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("end", JSPROXY_CCDirector_end, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("getZEye", JSPROXY_CCDirector_getZEye, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("isAnimating", JSPROXY_CCDirector_isAnimating, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("isPaused", JSPROXY_CCDirector_isPaused, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("nextDeltaTimeZero", JSPROXY_CCDirector_nextDeltaTimeZero, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("pause", JSPROXY_CCDirector_pause, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("popScene", JSPROXY_CCDirector_popScene, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("projection", JSPROXY_CCDirector_projection, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("purgeCachedData", JSPROXY_CCDirector_purgeCachedData, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("pushScene", JSPROXY_CCDirector_pushScene_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("replaceScene", JSPROXY_CCDirector_replaceScene_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("reshapeProjection", JSPROXY_CCDirector_reshapeProjection_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("resume", JSPROXY_CCDirector_resume, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("runWithScene", JSPROXY_CCDirector_runWithScene_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("runningScene", JSPROXY_CCDirector_runningScene, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("secondsPerFrame", JSPROXY_CCDirector_secondsPerFrame, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("sendCleanupToScene", JSPROXY_CCDirector_sendCleanupToScene, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setAlphaBlending", JSPROXY_CCDirector_setAlphaBlending_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setAnimationInterval", JSPROXY_CCDirector_setAnimationInterval_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setDepthTest", JSPROXY_CCDirector_setDepthTest_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setDisplayStats", JSPROXY_CCDirector_setDisplayStats_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setGLDefaultValues", JSPROXY_CCDirector_setGLDefaultValues, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setNextDeltaTimeZero", JSPROXY_CCDirector_setNextDeltaTimeZero_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setProjection", JSPROXY_CCDirector_setProjection_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("startAnimation", JSPROXY_CCDirector_startAnimation, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("stopAnimation", JSPROXY_CCDirector_stopAnimation, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("totalFrames", JSPROXY_CCDirector_totalFrames, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("sharedDirector", JSPROXY_CCDirector_sharedDirector, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};

	JSPROXY_CCDirector_object = JS_InitClass(cx, globalObj, JSPROXY_NSObject_object, JSPROXY_CCDirector_class, JSPROXY_CCDirector_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCDirector
@synthesize jsObject = jsObject_;

@end

/*
 * CCNode
 */
#pragma mark - CCNode

JSClass* JSPROXY_CCNode_class = NULL;
JSObject* JSPROXY_CCNode_object = NULL;
 // Constructor
JSBool JSPROXY_CCNode_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCNode_class, JSPROXY_CCNode_object, NULL);

    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCNode_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCNode *real= (JSPROXY_CCNode*)JS_GetPrivate(obj);
	if (real)
		[real release];
}

// Arguments: CCNode*
// Ret value: None
JSBool JSPROXY_CCNode_addChild_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	JSPROXY_CCNode* arg0 = (JSPROXY_CCNode*) JS_GetPrivate( tmp_arg0 ); 

	[real addChild:(CCNode*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCNode*, NSInteger
// Ret value: None
JSBool JSPROXY_CCNode_addChild_z_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	JSPROXY_CCNode* arg0 = (JSPROXY_CCNode*) JS_GetPrivate( tmp_arg0 ); 
	int32_t arg1; JS_ValueToECMAInt32( cx, *argvp++, &arg1 );

	[real addChild:(CCNode*)arg0 z:(NSInteger)arg1  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCNode*, NSInteger, NSInteger
// Ret value: None
JSBool JSPROXY_CCNode_addChild_z_tag_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 3, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	JSPROXY_CCNode* arg0 = (JSPROXY_CCNode*) JS_GetPrivate( tmp_arg0 ); 
	int32_t arg1; JS_ValueToECMAInt32( cx, *argvp++, &arg1 );
	int32_t arg2; JS_ValueToECMAInt32( cx, *argvp++, &arg2 );

	[real addChild:(CCNode*)arg0 z:(NSInteger)arg1 tag:(NSInteger)arg2  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: CGPoint
JSBool JSPROXY_CCNode_anchorPoint(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CGPoint ret_val;

	ret_val = [real anchorPoint ];

	JSObject *typedArray = js_CreateTypedArray(cx, js::TypedArray::TYPE_FLOAT32, 2 );
	float *buffer = (float*)JS_GetTypedArrayData(typedArray);
	buffer[0] = ret_val.x;
	buffer[1] = ret_val.y;
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(typedArray));

	return JS_TRUE;
}

// Arguments: 
// Ret value: CGPoint
JSBool JSPROXY_CCNode_anchorPointInPoints(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CGPoint ret_val;

	ret_val = [real anchorPointInPoints ];

	JSObject *typedArray = js_CreateTypedArray(cx, js::TypedArray::TYPE_FLOAT32, 2 );
	float *buffer = (float*)JS_GetTypedArrayData(typedArray);
	buffer[0] = ret_val.x;
	buffer[1] = ret_val.y;
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(typedArray));

	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_cleanup(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real cleanup ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CGPoint
// Ret value: CGPoint
JSBool JSPROXY_CCNode_convertToNodeSpace_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	NSCAssert( JS_GetTypedArrayByteLength( tmp_arg0 ) == 8, @"Invalid length");
#ifdef __CC_PLATFORM_IOS
	CGPoint arg0 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg0 );
#elif defined(__CC_PLATFORM_MAC)
	float* arg0_array = (float*)JS_GetTypedArrayData( tmp_arg0 );
	CGPoint arg0 = ccp(arg0_array[0], arg0_array[1] );
#else
#error Unsupported Platform
#endif  
	CGPoint ret_val;

	ret_val = [real convertToNodeSpace:(CGPoint)arg0  ];

	JSObject *typedArray = js_CreateTypedArray(cx, js::TypedArray::TYPE_FLOAT32, 2 );
	float *buffer = (float*)JS_GetTypedArrayData(typedArray);
	buffer[0] = ret_val.x;
	buffer[1] = ret_val.y;
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(typedArray));

	return JS_TRUE;
}

// Arguments: CGPoint
// Ret value: CGPoint
JSBool JSPROXY_CCNode_convertToNodeSpaceAR_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	NSCAssert( JS_GetTypedArrayByteLength( tmp_arg0 ) == 8, @"Invalid length");
#ifdef __CC_PLATFORM_IOS
	CGPoint arg0 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg0 );
#elif defined(__CC_PLATFORM_MAC)
	float* arg0_array = (float*)JS_GetTypedArrayData( tmp_arg0 );
	CGPoint arg0 = ccp(arg0_array[0], arg0_array[1] );
#else
#error Unsupported Platform
#endif  
	CGPoint ret_val;

	ret_val = [real convertToNodeSpaceAR:(CGPoint)arg0  ];

	JSObject *typedArray = js_CreateTypedArray(cx, js::TypedArray::TYPE_FLOAT32, 2 );
	float *buffer = (float*)JS_GetTypedArrayData(typedArray);
	buffer[0] = ret_val.x;
	buffer[1] = ret_val.y;
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(typedArray));

	return JS_TRUE;
}

// Arguments: CGPoint
// Ret value: CGPoint
JSBool JSPROXY_CCNode_convertToWorldSpace_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	NSCAssert( JS_GetTypedArrayByteLength( tmp_arg0 ) == 8, @"Invalid length");
#ifdef __CC_PLATFORM_IOS
	CGPoint arg0 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg0 );
#elif defined(__CC_PLATFORM_MAC)
	float* arg0_array = (float*)JS_GetTypedArrayData( tmp_arg0 );
	CGPoint arg0 = ccp(arg0_array[0], arg0_array[1] );
#else
#error Unsupported Platform
#endif  
	CGPoint ret_val;

	ret_val = [real convertToWorldSpace:(CGPoint)arg0  ];

	JSObject *typedArray = js_CreateTypedArray(cx, js::TypedArray::TYPE_FLOAT32, 2 );
	float *buffer = (float*)JS_GetTypedArrayData(typedArray);
	buffer[0] = ret_val.x;
	buffer[1] = ret_val.y;
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(typedArray));

	return JS_TRUE;
}

// Arguments: CGPoint
// Ret value: CGPoint
JSBool JSPROXY_CCNode_convertToWorldSpaceAR_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	NSCAssert( JS_GetTypedArrayByteLength( tmp_arg0 ) == 8, @"Invalid length");
#ifdef __CC_PLATFORM_IOS
	CGPoint arg0 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg0 );
#elif defined(__CC_PLATFORM_MAC)
	float* arg0_array = (float*)JS_GetTypedArrayData( tmp_arg0 );
	CGPoint arg0 = ccp(arg0_array[0], arg0_array[1] );
#else
#error Unsupported Platform
#endif  
	CGPoint ret_val;

	ret_val = [real convertToWorldSpaceAR:(CGPoint)arg0  ];

	JSObject *typedArray = js_CreateTypedArray(cx, js::TypedArray::TYPE_FLOAT32, 2 );
	float *buffer = (float*)JS_GetTypedArrayData(typedArray);
	buffer[0] = ret_val.x;
	buffer[1] = ret_val.y;
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(typedArray));

	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_draw(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real draw ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSInteger
// Ret value: CCAction*
JSBool JSPROXY_CCNode_getActionByTag_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	int32_t arg0; JS_ValueToECMAInt32( cx, *argvp++, &arg0 );
	CCAction* ret_val;

	ret_val = [real getActionByTag:(NSInteger)arg0  ];

	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCAction_class, JSPROXY_CCAction_object, NULL);
	JS_SetPrivate(jsobj, ret_val);
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: NSInteger
// Ret value: CCNode*
JSBool JSPROXY_CCNode_getChildByTag_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	int32_t arg0; JS_ValueToECMAInt32( cx, *argvp++, &arg0 );
	CCNode* ret_val;

	ret_val = [real getChildByTag:(NSInteger)arg0  ];

	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCNode_class, JSPROXY_CCNode_object, NULL);
	JS_SetPrivate(jsobj, ret_val);
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: ccGLServerState
JSBool JSPROXY_CCNode_glServerState(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	ccGLServerState ret_val;

	ret_val = [real glServerState ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCNode_ignoreAnchorPointForPosition(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	ret_val = [real ignoreAnchorPointForPosition ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_init(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( !real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	real = [[JSPROXY_CCNode alloc] init ];
	JS_SetPrivate(jsthis, real);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCNode_isRunning(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	ret_val = [real isRunning ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: CCNode
JSBool JSPROXY_CCNode_node(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	JSPROXY_CCNode *real = [JSPROXY_CCNode node ];
	[real retain];

	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCNode_class, JSPROXY_CCNode_object, NULL);
	JS_SetPrivate(jsobj, real);
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: NSUInteger
JSBool JSPROXY_CCNode_numberOfRunningActions(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSUInteger ret_val;

	ret_val = [real numberOfRunningActions ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_onEnter(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real onEnter ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real onEnterTransitionDidFinish ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_onExit(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real onExit ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real onExitTransitionDidStart ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSUInteger
JSBool JSPROXY_CCNode_orderOfArrival(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSUInteger ret_val;

	ret_val = [real orderOfArrival ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: CCNode*
JSBool JSPROXY_CCNode_parent(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CCNode* ret_val;

	ret_val = [real parent ];

	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCNode_class, JSPROXY_CCNode_object, NULL);
	JS_SetPrivate(jsobj, ret_val);
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_pauseSchedulerAndActions(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real pauseSchedulerAndActions ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: CGPoint
JSBool JSPROXY_CCNode_position(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CGPoint ret_val;

	ret_val = [real position ];

	JSObject *typedArray = js_CreateTypedArray(cx, js::TypedArray::TYPE_FLOAT32, 2 );
	float *buffer = (float*)JS_GetTypedArrayData(typedArray);
	buffer[0] = ret_val.x;
	buffer[1] = ret_val.y;
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(typedArray));

	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCNode_removeAllChildrenWithCleanup_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	[real removeAllChildrenWithCleanup:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCNode*, BOOL
// Ret value: None
JSBool JSPROXY_CCNode_removeChild_cleanup_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	JSPROXY_CCNode* arg0 = (JSPROXY_CCNode*) JS_GetPrivate( tmp_arg0 ); 
	JSBool arg1; JS_ValueToBoolean( cx, *argvp++, &arg1 );

	[real removeChild:(CCNode*)arg0 cleanup:(BOOL)arg1  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSInteger, BOOL
// Ret value: None
JSBool JSPROXY_CCNode_removeChildByTag_cleanup_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	int32_t arg0; JS_ValueToECMAInt32( cx, *argvp++, &arg0 );
	JSBool arg1; JS_ValueToBoolean( cx, *argvp++, &arg1 );

	[real removeChildByTag:(NSInteger)arg0 cleanup:(BOOL)arg1  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCNode_removeFromParentAndCleanup_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	[real removeFromParentAndCleanup:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCNode*, NSInteger
// Ret value: None
JSBool JSPROXY_CCNode_reorderChild_z_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	JSPROXY_CCNode* arg0 = (JSPROXY_CCNode*) JS_GetPrivate( tmp_arg0 ); 
	int32_t arg1; JS_ValueToECMAInt32( cx, *argvp++, &arg1 );

	[real reorderChild:(CCNode*)arg0 z:(NSInteger)arg1  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_resumeSchedulerAndActions(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real resumeSchedulerAndActions ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCNode_rotation(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	ret_val = [real rotation ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: CCAction*
// Ret value: CCAction*
JSBool JSPROXY_CCNode_runAction_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	JSPROXY_CCAction* arg0 = (JSPROXY_CCAction*) JS_GetPrivate( tmp_arg0 ); 
	CCAction* ret_val;

	ret_val = [real runAction:(CCAction*)arg0  ];

	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCAction_class, JSPROXY_CCAction_object, NULL);
	JS_SetPrivate(jsobj, ret_val);
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCNode_scale(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	ret_val = [real scale ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCNode_scaleX(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	ret_val = [real scaleX ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCNode_scaleY(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	ret_val = [real scaleY ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_scheduleUpdate(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real scheduleUpdate ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSInteger
// Ret value: None
JSBool JSPROXY_CCNode_scheduleUpdateWithPriority_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	int32_t arg0; JS_ValueToECMAInt32( cx, *argvp++, &arg0 );

	[real scheduleUpdateWithPriority:(NSInteger)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CGPoint
// Ret value: None
JSBool JSPROXY_CCNode_setAnchorPoint_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	NSCAssert( JS_GetTypedArrayByteLength( tmp_arg0 ) == 8, @"Invalid length");
#ifdef __CC_PLATFORM_IOS
	CGPoint arg0 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg0 );
#elif defined(__CC_PLATFORM_MAC)
	float* arg0_array = (float*)JS_GetTypedArrayData( tmp_arg0 );
	CGPoint arg0 = ccp(arg0_array[0], arg0_array[1] );
#else
#error Unsupported Platform
#endif  

	[real setAnchorPoint:(CGPoint)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CGSize
// Ret value: None
JSBool JSPROXY_CCNode_setContentSize_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	CGSize arg0 = *(CGSize*)JS_GetTypedArrayData( tmp_arg0);

	[real setContentSize:(CGSize)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: ccGLServerState
// Ret value: None
JSBool JSPROXY_CCNode_setGlServerState_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	int32_t arg0; JS_ValueToECMAInt32( cx, *argvp++, &arg0 );

	[real setGlServerState:(ccGLServerState)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCNode_setIgnoreAnchorPointForPosition_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	[real setIgnoreAnchorPointForPosition:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSUInteger
// Ret value: None
JSBool JSPROXY_CCNode_setOrderOfArrival_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	uint32_t arg0; JS_ValueToECMAUint32( cx, *argvp++, &arg0 );

	[real setOrderOfArrival:(NSUInteger)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCNode*
// Ret value: None
JSBool JSPROXY_CCNode_setParent_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	JSPROXY_CCNode* arg0 = (JSPROXY_CCNode*) JS_GetPrivate( tmp_arg0 ); 

	[real setParent:(CCNode*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CGPoint
// Ret value: None
JSBool JSPROXY_CCNode_setPosition_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	NSCAssert( JS_GetTypedArrayByteLength( tmp_arg0 ) == 8, @"Invalid length");
#ifdef __CC_PLATFORM_IOS
	CGPoint arg0 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg0 );
#elif defined(__CC_PLATFORM_MAC)
	float* arg0_array = (float*)JS_GetTypedArrayData( tmp_arg0 );
	CGPoint arg0 = ccp(arg0_array[0], arg0_array[1] );
#else
#error Unsupported Platform
#endif  

	[real setPosition:(CGPoint)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCNode_setRotation_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	[real setRotation:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCNode_setScale_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	[real setScale:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCNode_setScaleX_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	[real setScaleX:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCNode_setScaleY_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	[real setScaleY:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCNode_setSkewX_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	[real setSkewX:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCNode_setSkewY_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	[real setSkewY:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSInteger
// Ret value: None
JSBool JSPROXY_CCNode_setTag_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	int32_t arg0; JS_ValueToECMAInt32( cx, *argvp++, &arg0 );

	[real setTag:(NSInteger)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCNode_setVertexZ_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	[real setVertexZ:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCNode_setVisible_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	[real setVisible:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSUInteger
// Ret value: None
JSBool JSPROXY_CCNode_setZOrder_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	uint32_t arg0; JS_ValueToECMAUint32( cx, *argvp++, &arg0 );

	[real setZOrder:(NSUInteger)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCNode_skewX(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	ret_val = [real skewX ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCNode_skewY(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	ret_val = [real skewY ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_sortAllChildren(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real sortAllChildren ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCAction*
// Ret value: None
JSBool JSPROXY_CCNode_stopAction_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	JSPROXY_CCAction* arg0 = (JSPROXY_CCAction*) JS_GetPrivate( tmp_arg0 ); 

	[real stopAction:(CCAction*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSInteger
// Ret value: None
JSBool JSPROXY_CCNode_stopActionByTag_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	int32_t arg0; JS_ValueToECMAInt32( cx, *argvp++, &arg0 );

	[real stopActionByTag:(NSInteger)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_stopAllActions(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real stopAllActions ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSInteger
JSBool JSPROXY_CCNode_tag(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSInteger ret_val;

	ret_val = [real tag ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_transform(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real transform ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_transformAncestors(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real transformAncestors ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_unscheduleAllSelectors(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real unscheduleAllSelectors ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_unscheduleUpdate(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real unscheduleUpdate ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCNode_vertexZ(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	ret_val = [real vertexZ ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCNode_visible(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	ret_val = [real visible ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_visit(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real visit ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSInteger
JSBool JSPROXY_CCNode_zOrder(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCNode *real = (JSPROXY_CCNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSInteger ret_val;

	ret_val = [real zOrder ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

void JSPROXY_CCNode_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCNode_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCNode_class->name = name;
	JSPROXY_CCNode_class->addProperty = JS_PropertyStub;
	JSPROXY_CCNode_class->delProperty = JS_PropertyStub;
	JSPROXY_CCNode_class->getProperty = JS_PropertyStub;
	JSPROXY_CCNode_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCNode_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCNode_class->resolve = JS_ResolveStub;
	JSPROXY_CCNode_class->convert = JS_ConvertStub;
	JSPROXY_CCNode_class->finalize = JSPROXY_CCNode_finalize;
	JSPROXY_CCNode_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("addChild", JSPROXY_CCNode_addChild_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("addChildZ", JSPROXY_CCNode_addChild_z_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("addChildZTag", JSPROXY_CCNode_addChild_z_tag_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("anchorPoint", JSPROXY_CCNode_anchorPoint, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("anchorPointInPoints", JSPROXY_CCNode_anchorPointInPoints, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("cleanup", JSPROXY_CCNode_cleanup, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("convertToNodeSpace", JSPROXY_CCNode_convertToNodeSpace_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("convertToNodeSpaceAR", JSPROXY_CCNode_convertToNodeSpaceAR_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("convertToWorldSpace", JSPROXY_CCNode_convertToWorldSpace_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("convertToWorldSpaceAR", JSPROXY_CCNode_convertToWorldSpaceAR_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("draw", JSPROXY_CCNode_draw, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("getActionByTag", JSPROXY_CCNode_getActionByTag_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("getChildByTag", JSPROXY_CCNode_getChildByTag_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("glServerState", JSPROXY_CCNode_glServerState, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("ignoreAnchorPointForPosition", JSPROXY_CCNode_ignoreAnchorPointForPosition, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("init", JSPROXY_CCNode_init, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("isRunning", JSPROXY_CCNode_isRunning, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("numberOfRunningActions", JSPROXY_CCNode_numberOfRunningActions, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("onEnter", JSPROXY_CCNode_onEnter, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("onEnterTransitionDidFinish", JSPROXY_CCNode_onEnterTransitionDidFinish, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("onExit", JSPROXY_CCNode_onExit, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("onExitTransitionDidStart", JSPROXY_CCNode_onExitTransitionDidStart, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("orderOfArrival", JSPROXY_CCNode_orderOfArrival, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("parent", JSPROXY_CCNode_parent, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("pauseSchedulerAndActions", JSPROXY_CCNode_pauseSchedulerAndActions, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("position", JSPROXY_CCNode_position, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("removeAllChildrenWithCleanup", JSPROXY_CCNode_removeAllChildrenWithCleanup_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("removeChildCleanup", JSPROXY_CCNode_removeChild_cleanup_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("removeChildByTagCleanup", JSPROXY_CCNode_removeChildByTag_cleanup_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("removeFromParentAndCleanup", JSPROXY_CCNode_removeFromParentAndCleanup_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("reorderChildZ", JSPROXY_CCNode_reorderChild_z_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("resumeSchedulerAndActions", JSPROXY_CCNode_resumeSchedulerAndActions, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("rotation", JSPROXY_CCNode_rotation, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("runAction", JSPROXY_CCNode_runAction_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("scale", JSPROXY_CCNode_scale, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("scaleX", JSPROXY_CCNode_scaleX, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("scaleY", JSPROXY_CCNode_scaleY, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("scheduleUpdate", JSPROXY_CCNode_scheduleUpdate, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("scheduleUpdateWithPriority", JSPROXY_CCNode_scheduleUpdateWithPriority_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setAnchorPoint", JSPROXY_CCNode_setAnchorPoint_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setContentSize", JSPROXY_CCNode_setContentSize_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setGlServerState", JSPROXY_CCNode_setGlServerState_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setIgnoreAnchorPointForPosition", JSPROXY_CCNode_setIgnoreAnchorPointForPosition_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setOrderOfArrival", JSPROXY_CCNode_setOrderOfArrival_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setParent", JSPROXY_CCNode_setParent_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setPosition", JSPROXY_CCNode_setPosition_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setRotation", JSPROXY_CCNode_setRotation_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setScale", JSPROXY_CCNode_setScale_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setScaleX", JSPROXY_CCNode_setScaleX_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setScaleY", JSPROXY_CCNode_setScaleY_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setSkewX", JSPROXY_CCNode_setSkewX_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setSkewY", JSPROXY_CCNode_setSkewY_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setTag", JSPROXY_CCNode_setTag_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setVertexZ", JSPROXY_CCNode_setVertexZ_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setVisible", JSPROXY_CCNode_setVisible_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setZOrder", JSPROXY_CCNode_setZOrder_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("skewX", JSPROXY_CCNode_skewX, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("skewY", JSPROXY_CCNode_skewY, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("sortAllChildren", JSPROXY_CCNode_sortAllChildren, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("stopAction", JSPROXY_CCNode_stopAction_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("stopActionByTag", JSPROXY_CCNode_stopActionByTag_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("stopAllActions", JSPROXY_CCNode_stopAllActions, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("tag", JSPROXY_CCNode_tag, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("transform", JSPROXY_CCNode_transform, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("transformAncestors", JSPROXY_CCNode_transformAncestors, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("unscheduleAllSelectors", JSPROXY_CCNode_unscheduleAllSelectors, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("unscheduleUpdate", JSPROXY_CCNode_unscheduleUpdate, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("vertexZ", JSPROXY_CCNode_vertexZ, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("visible", JSPROXY_CCNode_visible, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("visit", JSPROXY_CCNode_visit, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("zOrder", JSPROXY_CCNode_zOrder, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("node", JSPROXY_CCNode_node, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FS_END
	};

	JSPROXY_CCNode_object = JS_InitClass(cx, globalObj, JSPROXY_NSObject_object, JSPROXY_CCNode_class, JSPROXY_CCNode_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCNode
@synthesize jsObject = jsObject_;

@end

/*
 * CCSprite
 */
#pragma mark - CCSprite

JSClass* JSPROXY_CCSprite_class = NULL;
JSObject* JSPROXY_CCSprite_object = NULL;
 // Constructor
JSBool JSPROXY_CCSprite_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCSprite_class, JSPROXY_CCSprite_object, NULL);

    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCSprite_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCSprite *real= (JSPROXY_CCSprite*)JS_GetPrivate(obj);
	if (real)
		[real release];
}

// Arguments: 
// Ret value: NSUInteger
JSBool JSPROXY_CCSprite_atlasIndex(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCSprite *real = (JSPROXY_CCSprite*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSUInteger ret_val;

	ret_val = [real atlasIndex ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: CCSpriteBatchNode*
JSBool JSPROXY_CCSprite_batchNode(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCSprite *real = (JSPROXY_CCSprite*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CCSpriteBatchNode* ret_val;

	ret_val = [real batchNode ];

	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCSpriteBatchNode_class, JSPROXY_CCSpriteBatchNode_object, NULL);
	JS_SetPrivate(jsobj, ret_val);
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCSprite_dirty(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCSprite *real = (JSPROXY_CCSprite*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	ret_val = [real dirty ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCSprite_flipX(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCSprite *real = (JSPROXY_CCSprite*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	ret_val = [real flipX ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCSprite_flipY(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCSprite *real = (JSPROXY_CCSprite*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	ret_val = [real flipY ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: None
JSBool JSPROXY_CCSprite_initWithFile_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCSprite *real = (JSPROXY_CCSprite*) JS_GetPrivate( jsthis );
	NSCAssert( !real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSString *tmp_arg0 = JS_ValueToString( cx, *argvp++ );
	NSString *arg0 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg0)];

	real = [[JSPROXY_CCSprite alloc] initWithFile:(NSString*)arg0  ];
	JS_SetPrivate(jsthis, real);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: None
JSBool JSPROXY_CCSprite_initWithSpriteFrameName_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCSprite *real = (JSPROXY_CCSprite*) JS_GetPrivate( jsthis );
	NSCAssert( !real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSString *tmp_arg0 = JS_ValueToString( cx, *argvp++ );
	NSString *arg0 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg0)];

	real = [[JSPROXY_CCSprite alloc] initWithSpriteFrameName:(NSString*)arg0  ];
	JS_SetPrivate(jsthis, real);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: CGPoint
JSBool JSPROXY_CCSprite_offsetPosition(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCSprite *real = (JSPROXY_CCSprite*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CGPoint ret_val;

	ret_val = [real offsetPosition ];

	JSObject *typedArray = js_CreateTypedArray(cx, js::TypedArray::TYPE_FLOAT32, 2 );
	float *buffer = (float*)JS_GetTypedArrayData(typedArray);
	buffer[0] = ret_val.x;
	buffer[1] = ret_val.y;
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(typedArray));

	return JS_TRUE;
}

// Arguments: 
// Ret value: GLubyte
JSBool JSPROXY_CCSprite_opacity(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCSprite *real = (JSPROXY_CCSprite*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	GLubyte ret_val;

	ret_val = [real opacity ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: NSUInteger
// Ret value: None
JSBool JSPROXY_CCSprite_setAtlasIndex_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCSprite *real = (JSPROXY_CCSprite*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	uint32_t arg0; JS_ValueToECMAUint32( cx, *argvp++, &arg0 );

	[real setAtlasIndex:(NSUInteger)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCSpriteBatchNode*
// Ret value: None
JSBool JSPROXY_CCSprite_setBatchNode_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCSprite *real = (JSPROXY_CCSprite*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	JSPROXY_CCSpriteBatchNode* arg0 = (JSPROXY_CCSpriteBatchNode*) JS_GetPrivate( tmp_arg0 ); 

	[real setBatchNode:(CCSpriteBatchNode*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: ccBlendFunc
// Ret value: None
JSBool JSPROXY_CCSprite_setBlendFunc_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCSprite *real = (JSPROXY_CCSprite*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	ccBlendFunc arg0 = *(ccBlendFunc*)JS_GetTypedArrayData( tmp_arg0);

	[real setBlendFunc:(ccBlendFunc)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: ccColor3B
// Ret value: None
JSBool JSPROXY_CCSprite_setColor_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCSprite *real = (JSPROXY_CCSprite*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	ccColor3B arg0 = *(ccColor3B*)JS_GetTypedArrayData( tmp_arg0);

	[real setColor:(ccColor3B)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCSprite_setDirty_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCSprite *real = (JSPROXY_CCSprite*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	[real setDirty:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*, int
// Ret value: None
JSBool JSPROXY_CCSprite_setDisplayFrameWithAnimationName_index_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCSprite *real = (JSPROXY_CCSprite*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSString *tmp_arg0 = JS_ValueToString( cx, *argvp++ );
	NSString *arg0 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg0)];
	int32_t arg1; JS_ValueToECMAInt32( cx, *argvp++, &arg1 );

	[real setDisplayFrameWithAnimationName:(NSString*)arg0 index:(int)arg1  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCSprite_setFlipX_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCSprite *real = (JSPROXY_CCSprite*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	[real setFlipX:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCSprite_setFlipY_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCSprite *real = (JSPROXY_CCSprite*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	[real setFlipY:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: GLubyte
// Ret value: None
JSBool JSPROXY_CCSprite_setOpacity_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCSprite *real = (JSPROXY_CCSprite*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	uint16_t arg0; JS_ValueToUint16( cx, *argvp++, &arg0 );

	[real setOpacity:(GLubyte)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: CCSprite
JSBool JSPROXY_CCSprite_spriteWithFile_(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSString *tmp_arg0 = JS_ValueToString( cx, *argvp++ );
	NSString *arg0 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg0)];

	JSPROXY_CCSprite *real = [JSPROXY_CCSprite spriteWithFile:(NSString*)arg0  ];
	[real retain];

	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCSprite_class, JSPROXY_CCSprite_object, NULL);
	JS_SetPrivate(jsobj, real);
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: CCSprite
JSBool JSPROXY_CCSprite_spriteWithSpriteFrameName_(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSString *tmp_arg0 = JS_ValueToString( cx, *argvp++ );
	NSString *arg0 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg0)];

	JSPROXY_CCSprite *real = [JSPROXY_CCSprite spriteWithSpriteFrameName:(NSString*)arg0  ];
	[real retain];

	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCSprite_class, JSPROXY_CCSprite_object, NULL);
	JS_SetPrivate(jsobj, real);
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCSprite_textureRectRotated(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCSprite *real = (JSPROXY_CCSprite*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	ret_val = [real textureRectRotated ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCSprite_updateTransform(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCSprite *real = (JSPROXY_CCSprite*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real updateTransform ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

void JSPROXY_CCSprite_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCSprite_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCSprite_class->name = name;
	JSPROXY_CCSprite_class->addProperty = JS_PropertyStub;
	JSPROXY_CCSprite_class->delProperty = JS_PropertyStub;
	JSPROXY_CCSprite_class->getProperty = JS_PropertyStub;
	JSPROXY_CCSprite_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCSprite_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCSprite_class->resolve = JS_ResolveStub;
	JSPROXY_CCSprite_class->convert = JS_ConvertStub;
	JSPROXY_CCSprite_class->finalize = JSPROXY_CCSprite_finalize;
	JSPROXY_CCSprite_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("atlasIndex", JSPROXY_CCSprite_atlasIndex, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("batchNode", JSPROXY_CCSprite_batchNode, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("dirty", JSPROXY_CCSprite_dirty, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("flipX", JSPROXY_CCSprite_flipX, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("flipY", JSPROXY_CCSprite_flipY, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithFile", JSPROXY_CCSprite_initWithFile_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithSpriteFrameName", JSPROXY_CCSprite_initWithSpriteFrameName_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("offsetPosition", JSPROXY_CCSprite_offsetPosition, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("opacity", JSPROXY_CCSprite_opacity, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setAtlasIndex", JSPROXY_CCSprite_setAtlasIndex_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setBatchNode", JSPROXY_CCSprite_setBatchNode_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setBlendFunc", JSPROXY_CCSprite_setBlendFunc_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setColor", JSPROXY_CCSprite_setColor_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setDirty", JSPROXY_CCSprite_setDirty_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setDisplayFrameWithAnimationNameIndex", JSPROXY_CCSprite_setDisplayFrameWithAnimationName_index_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setFlipX", JSPROXY_CCSprite_setFlipX_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setFlipY", JSPROXY_CCSprite_setFlipY_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setOpacity", JSPROXY_CCSprite_setOpacity_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("textureRectRotated", JSPROXY_CCSprite_textureRectRotated, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("updateTransform", JSPROXY_CCSprite_updateTransform, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("spriteWithFile", JSPROXY_CCSprite_spriteWithFile_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FN("spriteWithSpriteFrameName", JSPROXY_CCSprite_spriteWithSpriteFrameName_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FS_END
	};

	JSPROXY_CCSprite_object = JS_InitClass(cx, globalObj, JSPROXY_CCNode_object, JSPROXY_CCSprite_class, JSPROXY_CCSprite_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCSprite
@synthesize jsObject = jsObject_;

@end

/*
 * CCAction
 */
#pragma mark - CCAction

JSClass* JSPROXY_CCAction_class = NULL;
JSObject* JSPROXY_CCAction_object = NULL;
 // Constructor
JSBool JSPROXY_CCAction_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCAction_class, JSPROXY_CCAction_object, NULL);

    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCAction_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCAction *real= (JSPROXY_CCAction*)JS_GetPrivate(obj);
	if (real)
		[real release];
}

// Arguments: 
// Ret value: CCAction
JSBool JSPROXY_CCAction_action(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	JSPROXY_CCAction *real = [JSPROXY_CCAction action ];
	[real retain];

	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCAction_class, JSPROXY_CCAction_object, NULL);
	JS_SetPrivate(jsobj, real);
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCAction_init(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCAction *real = (JSPROXY_CCAction*) JS_GetPrivate( jsthis );
	NSCAssert( !real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	real = [[JSPROXY_CCAction alloc] init ];
	JS_SetPrivate(jsthis, real);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCAction_isDone(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCAction *real = (JSPROXY_CCAction*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	ret_val = [real isDone ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: NSInteger
// Ret value: None
JSBool JSPROXY_CCAction_setTag_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCAction *real = (JSPROXY_CCAction*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	int32_t arg0; JS_ValueToECMAInt32( cx, *argvp++, &arg0 );

	[real setTag:(NSInteger)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: ccTime
// Ret value: None
JSBool JSPROXY_CCAction_step_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCAction *real = (JSPROXY_CCAction*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	[real step:(ccTime)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCAction_stop(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCAction *real = (JSPROXY_CCAction*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real stop ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSInteger
JSBool JSPROXY_CCAction_tag(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCAction *real = (JSPROXY_CCAction*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSInteger ret_val;

	ret_val = [real tag ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: ccTime
// Ret value: None
JSBool JSPROXY_CCAction_update_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCAction *real = (JSPROXY_CCAction*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	[real update:(ccTime)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

void JSPROXY_CCAction_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCAction_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCAction_class->name = name;
	JSPROXY_CCAction_class->addProperty = JS_PropertyStub;
	JSPROXY_CCAction_class->delProperty = JS_PropertyStub;
	JSPROXY_CCAction_class->getProperty = JS_PropertyStub;
	JSPROXY_CCAction_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCAction_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCAction_class->resolve = JS_ResolveStub;
	JSPROXY_CCAction_class->convert = JS_ConvertStub;
	JSPROXY_CCAction_class->finalize = JSPROXY_CCAction_finalize;
	JSPROXY_CCAction_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("init", JSPROXY_CCAction_init, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("isDone", JSPROXY_CCAction_isDone, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setTag", JSPROXY_CCAction_setTag_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("step", JSPROXY_CCAction_step_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("stop", JSPROXY_CCAction_stop, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("tag", JSPROXY_CCAction_tag, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("update", JSPROXY_CCAction_update_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("action", JSPROXY_CCAction_action, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FS_END
	};

	JSPROXY_CCAction_object = JS_InitClass(cx, globalObj, JSPROXY_NSObject_object, JSPROXY_CCAction_class, JSPROXY_CCAction_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCAction
@synthesize jsObject = jsObject_;

@end

/*
 * CCFiniteTimeAction
 */
#pragma mark - CCFiniteTimeAction

JSClass* JSPROXY_CCFiniteTimeAction_class = NULL;
JSObject* JSPROXY_CCFiniteTimeAction_object = NULL;
 // Constructor
JSBool JSPROXY_CCFiniteTimeAction_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCFiniteTimeAction_class, JSPROXY_CCFiniteTimeAction_object, NULL);

    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCFiniteTimeAction_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCFiniteTimeAction *real= (JSPROXY_CCFiniteTimeAction*)JS_GetPrivate(obj);
	if (real)
		[real release];
}

// Arguments: 
// Ret value: ccTime
JSBool JSPROXY_CCFiniteTimeAction_duration(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCFiniteTimeAction *real = (JSPROXY_CCFiniteTimeAction*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	ccTime ret_val;

	ret_val = [real duration ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: CCFiniteTimeAction*
JSBool JSPROXY_CCFiniteTimeAction_reverse(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCFiniteTimeAction *real = (JSPROXY_CCFiniteTimeAction*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CCFiniteTimeAction* ret_val;

	ret_val = [real reverse ];

	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCFiniteTimeAction_class, JSPROXY_CCFiniteTimeAction_object, NULL);
	JS_SetPrivate(jsobj, ret_val);
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: ccTime
// Ret value: None
JSBool JSPROXY_CCFiniteTimeAction_setDuration_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCFiniteTimeAction *real = (JSPROXY_CCFiniteTimeAction*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	[real setDuration:(ccTime)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

void JSPROXY_CCFiniteTimeAction_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCFiniteTimeAction_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCFiniteTimeAction_class->name = name;
	JSPROXY_CCFiniteTimeAction_class->addProperty = JS_PropertyStub;
	JSPROXY_CCFiniteTimeAction_class->delProperty = JS_PropertyStub;
	JSPROXY_CCFiniteTimeAction_class->getProperty = JS_PropertyStub;
	JSPROXY_CCFiniteTimeAction_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCFiniteTimeAction_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCFiniteTimeAction_class->resolve = JS_ResolveStub;
	JSPROXY_CCFiniteTimeAction_class->convert = JS_ConvertStub;
	JSPROXY_CCFiniteTimeAction_class->finalize = JSPROXY_CCFiniteTimeAction_finalize;
	JSPROXY_CCFiniteTimeAction_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("duration", JSPROXY_CCFiniteTimeAction_duration, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("reverse", JSPROXY_CCFiniteTimeAction_reverse, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setDuration", JSPROXY_CCFiniteTimeAction_setDuration_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FS_END
	};

	JSPROXY_CCFiniteTimeAction_object = JS_InitClass(cx, globalObj, JSPROXY_CCAction_object, JSPROXY_CCFiniteTimeAction_class, JSPROXY_CCFiniteTimeAction_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCFiniteTimeAction
@synthesize jsObject = jsObject_;

@end

/*
 * CCActionInterval
 */
#pragma mark - CCActionInterval

JSClass* JSPROXY_CCActionInterval_class = NULL;
JSObject* JSPROXY_CCActionInterval_object = NULL;
 // Constructor
JSBool JSPROXY_CCActionInterval_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCActionInterval_class, JSPROXY_CCActionInterval_object, NULL);

    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCActionInterval_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCActionInterval *real= (JSPROXY_CCActionInterval*)JS_GetPrivate(obj);
	if (real)
		[real release];
}

// Arguments: ccTime
// Ret value: CCActionInterval
JSBool JSPROXY_CCActionInterval_actionWithDuration_(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	JSPROXY_CCActionInterval *real = [JSPROXY_CCActionInterval actionWithDuration:(ccTime)arg0  ];
	[real retain];

	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCActionInterval_class, JSPROXY_CCActionInterval_object, NULL);
	JS_SetPrivate(jsobj, real);
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: ccTime
JSBool JSPROXY_CCActionInterval_elapsed(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCActionInterval *real = (JSPROXY_CCActionInterval*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	ccTime ret_val;

	ret_val = [real elapsed ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: ccTime
// Ret value: None
JSBool JSPROXY_CCActionInterval_initWithDuration_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCActionInterval *real = (JSPROXY_CCActionInterval*) JS_GetPrivate( jsthis );
	NSCAssert( !real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	real = [[JSPROXY_CCActionInterval alloc] initWithDuration:(ccTime)arg0  ];
	JS_SetPrivate(jsthis, real);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCActionInterval_isDone(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCActionInterval *real = (JSPROXY_CCActionInterval*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	ret_val = [real isDone ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: CCActionInterval*
JSBool JSPROXY_CCActionInterval_reverse(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCActionInterval *real = (JSPROXY_CCActionInterval*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CCActionInterval* ret_val;

	ret_val = [real reverse ];

	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCActionInterval_class, JSPROXY_CCActionInterval_object, NULL);
	JS_SetPrivate(jsobj, ret_val);
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

void JSPROXY_CCActionInterval_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCActionInterval_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCActionInterval_class->name = name;
	JSPROXY_CCActionInterval_class->addProperty = JS_PropertyStub;
	JSPROXY_CCActionInterval_class->delProperty = JS_PropertyStub;
	JSPROXY_CCActionInterval_class->getProperty = JS_PropertyStub;
	JSPROXY_CCActionInterval_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCActionInterval_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCActionInterval_class->resolve = JS_ResolveStub;
	JSPROXY_CCActionInterval_class->convert = JS_ConvertStub;
	JSPROXY_CCActionInterval_class->finalize = JSPROXY_CCActionInterval_finalize;
	JSPROXY_CCActionInterval_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("elapsed", JSPROXY_CCActionInterval_elapsed, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithDuration", JSPROXY_CCActionInterval_initWithDuration_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("isDone", JSPROXY_CCActionInterval_isDone, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("reverse", JSPROXY_CCActionInterval_reverse, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("actionWithDuration", JSPROXY_CCActionInterval_actionWithDuration_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FS_END
	};

	JSPROXY_CCActionInterval_object = JS_InitClass(cx, globalObj, JSPROXY_CCFiniteTimeAction_object, JSPROXY_CCActionInterval_class, JSPROXY_CCActionInterval_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCActionInterval
@synthesize jsObject = jsObject_;

@end

/*
 * CCScaleTo
 */
#pragma mark - CCScaleTo

JSClass* JSPROXY_CCScaleTo_class = NULL;
JSObject* JSPROXY_CCScaleTo_object = NULL;
 // Constructor
JSBool JSPROXY_CCScaleTo_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCScaleTo_class, JSPROXY_CCScaleTo_object, NULL);

    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCScaleTo_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCScaleTo *real= (JSPROXY_CCScaleTo*)JS_GetPrivate(obj);
	if (real)
		[real release];
}

// Arguments: ccTime, float
// Ret value: CCScaleTo
JSBool JSPROXY_CCScaleTo_actionWithDuration_scale_(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );
	double arg1; JS_ValueToNumber( cx, *argvp++, &arg1 );

	JSPROXY_CCScaleTo *real = [JSPROXY_CCScaleTo actionWithDuration:(ccTime)arg0 scale:(float)arg1  ];
	[real retain];

	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCScaleTo_class, JSPROXY_CCScaleTo_object, NULL);
	JS_SetPrivate(jsobj, real);
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: ccTime, float, float
// Ret value: CCScaleTo
JSBool JSPROXY_CCScaleTo_actionWithDuration_scaleX_scaleY_(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 3, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );
	double arg1; JS_ValueToNumber( cx, *argvp++, &arg1 );
	double arg2; JS_ValueToNumber( cx, *argvp++, &arg2 );

	JSPROXY_CCScaleTo *real = [JSPROXY_CCScaleTo actionWithDuration:(ccTime)arg0 scaleX:(float)arg1 scaleY:(float)arg2  ];
	[real retain];

	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCScaleTo_class, JSPROXY_CCScaleTo_object, NULL);
	JS_SetPrivate(jsobj, real);
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: ccTime, float
// Ret value: None
JSBool JSPROXY_CCScaleTo_initWithDuration_scale_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCScaleTo *real = (JSPROXY_CCScaleTo*) JS_GetPrivate( jsthis );
	NSCAssert( !real, @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );
	double arg1; JS_ValueToNumber( cx, *argvp++, &arg1 );

	real = [[JSPROXY_CCScaleTo alloc] initWithDuration:(ccTime)arg0 scale:(float)arg1  ];
	JS_SetPrivate(jsthis, real);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: ccTime, float, float
// Ret value: None
JSBool JSPROXY_CCScaleTo_initWithDuration_scaleX_scaleY_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCScaleTo *real = (JSPROXY_CCScaleTo*) JS_GetPrivate( jsthis );
	NSCAssert( !real, @"Object not initialzied. error");
	NSCAssert( argc == 3, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );
	double arg1; JS_ValueToNumber( cx, *argvp++, &arg1 );
	double arg2; JS_ValueToNumber( cx, *argvp++, &arg2 );

	real = [[JSPROXY_CCScaleTo alloc] initWithDuration:(ccTime)arg0 scaleX:(float)arg1 scaleY:(float)arg2  ];
	JS_SetPrivate(jsthis, real);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

void JSPROXY_CCScaleTo_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCScaleTo_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCScaleTo_class->name = name;
	JSPROXY_CCScaleTo_class->addProperty = JS_PropertyStub;
	JSPROXY_CCScaleTo_class->delProperty = JS_PropertyStub;
	JSPROXY_CCScaleTo_class->getProperty = JS_PropertyStub;
	JSPROXY_CCScaleTo_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCScaleTo_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCScaleTo_class->resolve = JS_ResolveStub;
	JSPROXY_CCScaleTo_class->convert = JS_ConvertStub;
	JSPROXY_CCScaleTo_class->finalize = JSPROXY_CCScaleTo_finalize;
	JSPROXY_CCScaleTo_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("initWithDurationScale", JSPROXY_CCScaleTo_initWithDuration_scale_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithDurationScalexScaley", JSPROXY_CCScaleTo_initWithDuration_scaleX_scaleY_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("actionWithDurationScale", JSPROXY_CCScaleTo_actionWithDuration_scale_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FN("actionWithDurationScalexScaley", JSPROXY_CCScaleTo_actionWithDuration_scaleX_scaleY_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FS_END
	};

	JSPROXY_CCScaleTo_object = JS_InitClass(cx, globalObj, JSPROXY_CCActionInterval_object, JSPROXY_CCScaleTo_class, JSPROXY_CCScaleTo_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCScaleTo
@synthesize jsObject = jsObject_;

@end

/*
 * CCScaleBy
 */
#pragma mark - CCScaleBy

JSClass* JSPROXY_CCScaleBy_class = NULL;
JSObject* JSPROXY_CCScaleBy_object = NULL;
 // Constructor
JSBool JSPROXY_CCScaleBy_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCScaleBy_class, JSPROXY_CCScaleBy_object, NULL);

    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCScaleBy_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCScaleBy *real= (JSPROXY_CCScaleBy*)JS_GetPrivate(obj);
	if (real)
		[real release];
}

// Arguments: ccTime, float
// Ret value: None
JSBool JSPROXY_CCScaleBy_initWithDuration_scale_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCScaleBy *real = (JSPROXY_CCScaleBy*) JS_GetPrivate( jsthis );
	NSCAssert( !real, @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );
	double arg1; JS_ValueToNumber( cx, *argvp++, &arg1 );

	real = [[JSPROXY_CCScaleBy alloc] initWithDuration:(ccTime)arg0 scale:(float)arg1  ];
	JS_SetPrivate(jsthis, real);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

void JSPROXY_CCScaleBy_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCScaleBy_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCScaleBy_class->name = name;
	JSPROXY_CCScaleBy_class->addProperty = JS_PropertyStub;
	JSPROXY_CCScaleBy_class->delProperty = JS_PropertyStub;
	JSPROXY_CCScaleBy_class->getProperty = JS_PropertyStub;
	JSPROXY_CCScaleBy_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCScaleBy_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCScaleBy_class->resolve = JS_ResolveStub;
	JSPROXY_CCScaleBy_class->convert = JS_ConvertStub;
	JSPROXY_CCScaleBy_class->finalize = JSPROXY_CCScaleBy_finalize;
	JSPROXY_CCScaleBy_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("initWithDurationScale", JSPROXY_CCScaleBy_initWithDuration_scale_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FS_END
	};

	JSPROXY_CCScaleBy_object = JS_InitClass(cx, globalObj, JSPROXY_CCScaleTo_object, JSPROXY_CCScaleBy_class, JSPROXY_CCScaleBy_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCScaleBy
@synthesize jsObject = jsObject_;

@end

/*
 * CCLayer
 */
#pragma mark - CCLayer

JSClass* JSPROXY_CCLayer_class = NULL;
JSObject* JSPROXY_CCLayer_object = NULL;
 // Constructor
JSBool JSPROXY_CCLayer_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCLayer_class, JSPROXY_CCLayer_object, NULL);

    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCLayer_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCLayer *real= (JSPROXY_CCLayer*)JS_GetPrivate(obj);
	if (real)
		[real release];
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCLayer_isKeyboardEnabled(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCLayer *real = (JSPROXY_CCLayer*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	ret_val = [real isKeyboardEnabled ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCLayer_isMouseEnabled(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCLayer *real = (JSPROXY_CCLayer*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	ret_val = [real isMouseEnabled ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCLayer_isTouchEnabled(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCLayer *real = (JSPROXY_CCLayer*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	ret_val = [real isTouchEnabled ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSInteger
JSBool JSPROXY_CCLayer_keyboardDelegatePriority(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCLayer *real = (JSPROXY_CCLayer*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSInteger ret_val;

	ret_val = [real keyboardDelegatePriority ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSInteger
JSBool JSPROXY_CCLayer_mouseDelegatePriority(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCLayer *real = (JSPROXY_CCLayer*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSInteger ret_val;

	ret_val = [real mouseDelegatePriority ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCLayer_setIsKeyboardEnabled_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCLayer *real = (JSPROXY_CCLayer*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	[real setIsKeyboardEnabled:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCLayer_setIsMouseEnabled_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCLayer *real = (JSPROXY_CCLayer*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	[real setIsMouseEnabled:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCLayer_setIsTouchEnabled_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCLayer *real = (JSPROXY_CCLayer*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	[real setIsTouchEnabled:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSInteger
JSBool JSPROXY_CCLayer_touchDelegatePriority(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCLayer *real = (JSPROXY_CCLayer*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSInteger ret_val;

	ret_val = [real touchDelegatePriority ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

void JSPROXY_CCLayer_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCLayer_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCLayer_class->name = name;
	JSPROXY_CCLayer_class->addProperty = JS_PropertyStub;
	JSPROXY_CCLayer_class->delProperty = JS_PropertyStub;
	JSPROXY_CCLayer_class->getProperty = JS_PropertyStub;
	JSPROXY_CCLayer_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCLayer_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCLayer_class->resolve = JS_ResolveStub;
	JSPROXY_CCLayer_class->convert = JS_ConvertStub;
	JSPROXY_CCLayer_class->finalize = JSPROXY_CCLayer_finalize;
	JSPROXY_CCLayer_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("isKeyboardEnabled", JSPROXY_CCLayer_isKeyboardEnabled, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("isMouseEnabled", JSPROXY_CCLayer_isMouseEnabled, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("isTouchEnabled", JSPROXY_CCLayer_isTouchEnabled, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("keyboardDelegatePriority", JSPROXY_CCLayer_keyboardDelegatePriority, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("mouseDelegatePriority", JSPROXY_CCLayer_mouseDelegatePriority, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setIsKeyboardEnabled", JSPROXY_CCLayer_setIsKeyboardEnabled_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setIsMouseEnabled", JSPROXY_CCLayer_setIsMouseEnabled_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setIsTouchEnabled", JSPROXY_CCLayer_setIsTouchEnabled_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("touchDelegatePriority", JSPROXY_CCLayer_touchDelegatePriority, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FS_END
	};

	JSPROXY_CCLayer_object = JS_InitClass(cx, globalObj, JSPROXY_CCNode_object, JSPROXY_CCLayer_class, JSPROXY_CCLayer_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCLayer
@synthesize jsObject = jsObject_;

@end

/*
 * CCMoveTo
 */
#pragma mark - CCMoveTo

JSClass* JSPROXY_CCMoveTo_class = NULL;
JSObject* JSPROXY_CCMoveTo_object = NULL;
 // Constructor
JSBool JSPROXY_CCMoveTo_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCMoveTo_class, JSPROXY_CCMoveTo_object, NULL);

    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCMoveTo_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCMoveTo *real= (JSPROXY_CCMoveTo*)JS_GetPrivate(obj);
	if (real)
		[real release];
}

// Arguments: ccTime, CGPoint
// Ret value: CCMoveTo
JSBool JSPROXY_CCMoveTo_actionWithDuration_position_(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	JSObject *tmp_arg1;
	JS_ValueToObject( cx, *argvp++, &tmp_arg1 );
	NSCAssert( JS_GetTypedArrayByteLength( tmp_arg1 ) == 8, @"Invalid length");
#ifdef __CC_PLATFORM_IOS
	CGPoint arg1 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg1 );
#elif defined(__CC_PLATFORM_MAC)
	float* arg1_array = (float*)JS_GetTypedArrayData( tmp_arg1 );
	CGPoint arg1 = ccp(arg1_array[0], arg1_array[1] );
#else
#error Unsupported Platform
#endif  

	JSPROXY_CCMoveTo *real = [JSPROXY_CCMoveTo actionWithDuration:(ccTime)arg0 position:(CGPoint)arg1  ];
	[real retain];

	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCMoveTo_class, JSPROXY_CCMoveTo_object, NULL);
	JS_SetPrivate(jsobj, real);
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: ccTime, CGPoint
// Ret value: None
JSBool JSPROXY_CCMoveTo_initWithDuration_position_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCMoveTo *real = (JSPROXY_CCMoveTo*) JS_GetPrivate( jsthis );
	NSCAssert( !real, @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	JSObject *tmp_arg1;
	JS_ValueToObject( cx, *argvp++, &tmp_arg1 );
	NSCAssert( JS_GetTypedArrayByteLength( tmp_arg1 ) == 8, @"Invalid length");
#ifdef __CC_PLATFORM_IOS
	CGPoint arg1 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg1 );
#elif defined(__CC_PLATFORM_MAC)
	float* arg1_array = (float*)JS_GetTypedArrayData( tmp_arg1 );
	CGPoint arg1 = ccp(arg1_array[0], arg1_array[1] );
#else
#error Unsupported Platform
#endif  

	real = [[JSPROXY_CCMoveTo alloc] initWithDuration:(ccTime)arg0 position:(CGPoint)arg1  ];
	JS_SetPrivate(jsthis, real);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

void JSPROXY_CCMoveTo_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCMoveTo_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCMoveTo_class->name = name;
	JSPROXY_CCMoveTo_class->addProperty = JS_PropertyStub;
	JSPROXY_CCMoveTo_class->delProperty = JS_PropertyStub;
	JSPROXY_CCMoveTo_class->getProperty = JS_PropertyStub;
	JSPROXY_CCMoveTo_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCMoveTo_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCMoveTo_class->resolve = JS_ResolveStub;
	JSPROXY_CCMoveTo_class->convert = JS_ConvertStub;
	JSPROXY_CCMoveTo_class->finalize = JSPROXY_CCMoveTo_finalize;
	JSPROXY_CCMoveTo_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("initWithDurationPosition", JSPROXY_CCMoveTo_initWithDuration_position_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("actionWithDurationPosition", JSPROXY_CCMoveTo_actionWithDuration_position_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FS_END
	};

	JSPROXY_CCMoveTo_object = JS_InitClass(cx, globalObj, JSPROXY_CCActionInterval_object, JSPROXY_CCMoveTo_class, JSPROXY_CCMoveTo_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCMoveTo
@synthesize jsObject = jsObject_;

@end

/*
 * CCMoveBy
 */
#pragma mark - CCMoveBy

JSClass* JSPROXY_CCMoveBy_class = NULL;
JSObject* JSPROXY_CCMoveBy_object = NULL;
 // Constructor
JSBool JSPROXY_CCMoveBy_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCMoveBy_class, JSPROXY_CCMoveBy_object, NULL);

    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCMoveBy_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCMoveBy *real= (JSPROXY_CCMoveBy*)JS_GetPrivate(obj);
	if (real)
		[real release];
}

// Arguments: ccTime, CGPoint
// Ret value: CCMoveBy
JSBool JSPROXY_CCMoveBy_actionWithDuration_position_(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	JSObject *tmp_arg1;
	JS_ValueToObject( cx, *argvp++, &tmp_arg1 );
	NSCAssert( JS_GetTypedArrayByteLength( tmp_arg1 ) == 8, @"Invalid length");
#ifdef __CC_PLATFORM_IOS
	CGPoint arg1 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg1 );
#elif defined(__CC_PLATFORM_MAC)
	float* arg1_array = (float*)JS_GetTypedArrayData( tmp_arg1 );
	CGPoint arg1 = ccp(arg1_array[0], arg1_array[1] );
#else
#error Unsupported Platform
#endif  

	JSPROXY_CCMoveBy *real = [JSPROXY_CCMoveBy actionWithDuration:(ccTime)arg0 position:(CGPoint)arg1  ];
	[real retain];

	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCMoveBy_class, JSPROXY_CCMoveBy_object, NULL);
	JS_SetPrivate(jsobj, real);
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: ccTime, CGPoint
// Ret value: None
JSBool JSPROXY_CCMoveBy_initWithDuration_position_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCMoveBy *real = (JSPROXY_CCMoveBy*) JS_GetPrivate( jsthis );
	NSCAssert( !real, @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	JSObject *tmp_arg1;
	JS_ValueToObject( cx, *argvp++, &tmp_arg1 );
	NSCAssert( JS_GetTypedArrayByteLength( tmp_arg1 ) == 8, @"Invalid length");
#ifdef __CC_PLATFORM_IOS
	CGPoint arg1 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg1 );
#elif defined(__CC_PLATFORM_MAC)
	float* arg1_array = (float*)JS_GetTypedArrayData( tmp_arg1 );
	CGPoint arg1 = ccp(arg1_array[0], arg1_array[1] );
#else
#error Unsupported Platform
#endif  

	real = [[JSPROXY_CCMoveBy alloc] initWithDuration:(ccTime)arg0 position:(CGPoint)arg1  ];
	JS_SetPrivate(jsthis, real);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

void JSPROXY_CCMoveBy_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCMoveBy_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCMoveBy_class->name = name;
	JSPROXY_CCMoveBy_class->addProperty = JS_PropertyStub;
	JSPROXY_CCMoveBy_class->delProperty = JS_PropertyStub;
	JSPROXY_CCMoveBy_class->getProperty = JS_PropertyStub;
	JSPROXY_CCMoveBy_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCMoveBy_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCMoveBy_class->resolve = JS_ResolveStub;
	JSPROXY_CCMoveBy_class->convert = JS_ConvertStub;
	JSPROXY_CCMoveBy_class->finalize = JSPROXY_CCMoveBy_finalize;
	JSPROXY_CCMoveBy_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("initWithDurationPosition", JSPROXY_CCMoveBy_initWithDuration_position_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("actionWithDurationPosition", JSPROXY_CCMoveBy_actionWithDuration_position_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FS_END
	};

	JSPROXY_CCMoveBy_object = JS_InitClass(cx, globalObj, JSPROXY_CCMoveTo_object, JSPROXY_CCMoveBy_class, JSPROXY_CCMoveBy_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCMoveBy
@synthesize jsObject = jsObject_;

@end

/*
 * CCScene
 */
#pragma mark - CCScene

JSClass* JSPROXY_CCScene_class = NULL;
JSObject* JSPROXY_CCScene_object = NULL;
 // Constructor
JSBool JSPROXY_CCScene_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCScene_class, JSPROXY_CCScene_object, NULL);

    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCScene_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCScene *real= (JSPROXY_CCScene*)JS_GetPrivate(obj);
	if (real)
		[real release];
}

// Arguments: 
// Ret value: CCScene
JSBool JSPROXY_CCScene_node(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	JSPROXY_CCScene *real = [JSPROXY_CCScene node ];
	[real retain];

	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCScene_class, JSPROXY_CCScene_object, NULL);
	JS_SetPrivate(jsobj, real);
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

void JSPROXY_CCScene_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCScene_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCScene_class->name = name;
	JSPROXY_CCScene_class->addProperty = JS_PropertyStub;
	JSPROXY_CCScene_class->delProperty = JS_PropertyStub;
	JSPROXY_CCScene_class->getProperty = JS_PropertyStub;
	JSPROXY_CCScene_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCScene_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCScene_class->resolve = JS_ResolveStub;
	JSPROXY_CCScene_class->convert = JS_ConvertStub;
	JSPROXY_CCScene_class->finalize = JSPROXY_CCScene_finalize;
	JSPROXY_CCScene_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("node", JSPROXY_CCScene_node, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FS_END
	};

	JSPROXY_CCScene_object = JS_InitClass(cx, globalObj, JSPROXY_CCNode_object, JSPROXY_CCScene_class, JSPROXY_CCScene_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCScene
@synthesize jsObject = jsObject_;

@end

/*
 * CCLabelTTF
 */
#pragma mark - CCLabelTTF

JSClass* JSPROXY_CCLabelTTF_class = NULL;
JSObject* JSPROXY_CCLabelTTF_object = NULL;
 // Constructor
JSBool JSPROXY_CCLabelTTF_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCLabelTTF_class, JSPROXY_CCLabelTTF_object, NULL);

    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCLabelTTF_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCLabelTTF *real= (JSPROXY_CCLabelTTF*)JS_GetPrivate(obj);
	if (real)
		[real release];
}

// Arguments: 
// Ret value: NSString*
JSBool JSPROXY_CCLabelTTF_fontName(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCLabelTTF *real = (JSPROXY_CCLabelTTF*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSString* ret_val;

	ret_val = [real fontName ];

	JSString *ret_obj = JS_NewStringCopyZ(cx, [ret_val UTF8String]);
	JS_SET_RVAL(cx, vp, STRING_TO_JSVAL(ret_obj) );

	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCLabelTTF_fontSize(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCLabelTTF *real = (JSPROXY_CCLabelTTF*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	ret_val = [real fontSize ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: CCTextAlignment
JSBool JSPROXY_CCLabelTTF_horizontalAlignment(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCLabelTTF *real = (JSPROXY_CCLabelTTF*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CCTextAlignment ret_val;

	ret_val = [real horizontalAlignment ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: NSString*, CGSize, CCTextAlignment, NSString*, CGFloat
// Ret value: None
JSBool JSPROXY_CCLabelTTF_initWithString_dimensions_hAlignment_fontName_fontSize_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCLabelTTF *real = (JSPROXY_CCLabelTTF*) JS_GetPrivate( jsthis );
	NSCAssert( !real, @"Object not initialzied. error");
	NSCAssert( argc == 5, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSString *tmp_arg0 = JS_ValueToString( cx, *argvp++ );
	NSString *arg0 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg0)];

	JSObject *tmp_arg1;
	JS_ValueToObject( cx, *argvp++, &tmp_arg1 );
	CGSize arg1 = *(CGSize*)JS_GetTypedArrayData( tmp_arg1);
	int32_t arg2; JS_ValueToECMAInt32( cx, *argvp++, &arg2 );
	JSString *tmp_arg3 = JS_ValueToString( cx, *argvp++ );
	NSString *arg3 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg3)];
	double arg4; JS_ValueToNumber( cx, *argvp++, &arg4 );

	real = [[JSPROXY_CCLabelTTF alloc] initWithString:(NSString*)arg0 dimensions:(CGSize)arg1 hAlignment:(CCTextAlignment)arg2 fontName:(NSString*)arg3 fontSize:(CGFloat)arg4  ];
	JS_SetPrivate(jsthis, real);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*, CGSize, CCTextAlignment, CCLineBreakMode, NSString*, CGFloat
// Ret value: None
JSBool JSPROXY_CCLabelTTF_initWithString_dimensions_hAlignment_lineBreakMode_fontName_fontSize_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCLabelTTF *real = (JSPROXY_CCLabelTTF*) JS_GetPrivate( jsthis );
	NSCAssert( !real, @"Object not initialzied. error");
	NSCAssert( argc == 6, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSString *tmp_arg0 = JS_ValueToString( cx, *argvp++ );
	NSString *arg0 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg0)];

	JSObject *tmp_arg1;
	JS_ValueToObject( cx, *argvp++, &tmp_arg1 );
	CGSize arg1 = *(CGSize*)JS_GetTypedArrayData( tmp_arg1);
	int32_t arg2; JS_ValueToECMAInt32( cx, *argvp++, &arg2 );
	int32_t arg3; JS_ValueToECMAInt32( cx, *argvp++, &arg3 );
	JSString *tmp_arg4 = JS_ValueToString( cx, *argvp++ );
	NSString *arg4 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg4)];
	double arg5; JS_ValueToNumber( cx, *argvp++, &arg5 );

	real = [[JSPROXY_CCLabelTTF alloc] initWithString:(NSString*)arg0 dimensions:(CGSize)arg1 hAlignment:(CCTextAlignment)arg2 lineBreakMode:(CCLineBreakMode)arg3 fontName:(NSString*)arg4 fontSize:(CGFloat)arg5  ];
	JS_SetPrivate(jsthis, real);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*, CGSize, CCTextAlignment, CCVerticalTextAlignment, NSString*, CGFloat
// Ret value: None
JSBool JSPROXY_CCLabelTTF_initWithString_dimensions_hAlignment_vAlignment_fontName_fontSize_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCLabelTTF *real = (JSPROXY_CCLabelTTF*) JS_GetPrivate( jsthis );
	NSCAssert( !real, @"Object not initialzied. error");
	NSCAssert( argc == 6, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSString *tmp_arg0 = JS_ValueToString( cx, *argvp++ );
	NSString *arg0 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg0)];

	JSObject *tmp_arg1;
	JS_ValueToObject( cx, *argvp++, &tmp_arg1 );
	CGSize arg1 = *(CGSize*)JS_GetTypedArrayData( tmp_arg1);
	int32_t arg2; JS_ValueToECMAInt32( cx, *argvp++, &arg2 );
	int32_t arg3; JS_ValueToECMAInt32( cx, *argvp++, &arg3 );
	JSString *tmp_arg4 = JS_ValueToString( cx, *argvp++ );
	NSString *arg4 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg4)];
	double arg5; JS_ValueToNumber( cx, *argvp++, &arg5 );

	real = [[JSPROXY_CCLabelTTF alloc] initWithString:(NSString*)arg0 dimensions:(CGSize)arg1 hAlignment:(CCTextAlignment)arg2 vAlignment:(CCVerticalTextAlignment)arg3 fontName:(NSString*)arg4 fontSize:(CGFloat)arg5  ];
	JS_SetPrivate(jsthis, real);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*, CGSize, CCTextAlignment, CCVerticalTextAlignment, CCLineBreakMode, NSString*, CGFloat
// Ret value: None
JSBool JSPROXY_CCLabelTTF_initWithString_dimensions_hAlignment_vAlignment_lineBreakMode_fontName_fontSize_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCLabelTTF *real = (JSPROXY_CCLabelTTF*) JS_GetPrivate( jsthis );
	NSCAssert( !real, @"Object not initialzied. error");
	NSCAssert( argc == 7, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSString *tmp_arg0 = JS_ValueToString( cx, *argvp++ );
	NSString *arg0 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg0)];

	JSObject *tmp_arg1;
	JS_ValueToObject( cx, *argvp++, &tmp_arg1 );
	CGSize arg1 = *(CGSize*)JS_GetTypedArrayData( tmp_arg1);
	int32_t arg2; JS_ValueToECMAInt32( cx, *argvp++, &arg2 );
	int32_t arg3; JS_ValueToECMAInt32( cx, *argvp++, &arg3 );
	int32_t arg4; JS_ValueToECMAInt32( cx, *argvp++, &arg4 );
	JSString *tmp_arg5 = JS_ValueToString( cx, *argvp++ );
	NSString *arg5 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg5)];
	double arg6; JS_ValueToNumber( cx, *argvp++, &arg6 );

	real = [[JSPROXY_CCLabelTTF alloc] initWithString:(NSString*)arg0 dimensions:(CGSize)arg1 hAlignment:(CCTextAlignment)arg2 vAlignment:(CCVerticalTextAlignment)arg3 lineBreakMode:(CCLineBreakMode)arg4 fontName:(NSString*)arg5 fontSize:(CGFloat)arg6  ];
	JS_SetPrivate(jsthis, real);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*, NSString*, CGFloat
// Ret value: None
JSBool JSPROXY_CCLabelTTF_initWithString_fontName_fontSize_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCLabelTTF *real = (JSPROXY_CCLabelTTF*) JS_GetPrivate( jsthis );
	NSCAssert( !real, @"Object not initialzied. error");
	NSCAssert( argc == 3, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSString *tmp_arg0 = JS_ValueToString( cx, *argvp++ );
	NSString *arg0 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg0)];
	JSString *tmp_arg1 = JS_ValueToString( cx, *argvp++ );
	NSString *arg1 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg1)];
	double arg2; JS_ValueToNumber( cx, *argvp++, &arg2 );

	real = [[JSPROXY_CCLabelTTF alloc] initWithString:(NSString*)arg0 fontName:(NSString*)arg1 fontSize:(CGFloat)arg2  ];
	JS_SetPrivate(jsthis, real);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*, CGSize, CCTextAlignment, NSString*, CGFloat
// Ret value: CCLabelTTF
JSBool JSPROXY_CCLabelTTF_labelWithString_dimensions_hAlignment_fontName_fontSize_(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 5, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSString *tmp_arg0 = JS_ValueToString( cx, *argvp++ );
	NSString *arg0 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg0)];

	JSObject *tmp_arg1;
	JS_ValueToObject( cx, *argvp++, &tmp_arg1 );
	CGSize arg1 = *(CGSize*)JS_GetTypedArrayData( tmp_arg1);
	int32_t arg2; JS_ValueToECMAInt32( cx, *argvp++, &arg2 );
	JSString *tmp_arg3 = JS_ValueToString( cx, *argvp++ );
	NSString *arg3 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg3)];
	double arg4; JS_ValueToNumber( cx, *argvp++, &arg4 );

	JSPROXY_CCLabelTTF *real = [JSPROXY_CCLabelTTF labelWithString:(NSString*)arg0 dimensions:(CGSize)arg1 hAlignment:(CCTextAlignment)arg2 fontName:(NSString*)arg3 fontSize:(CGFloat)arg4  ];
	[real retain];

	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCLabelTTF_class, JSPROXY_CCLabelTTF_object, NULL);
	JS_SetPrivate(jsobj, real);
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: NSString*, CGSize, CCTextAlignment, CCLineBreakMode, NSString*, CGFloat
// Ret value: CCLabelTTF
JSBool JSPROXY_CCLabelTTF_labelWithString_dimensions_hAlignment_lineBreakMode_fontName_fontSize_(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 6, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSString *tmp_arg0 = JS_ValueToString( cx, *argvp++ );
	NSString *arg0 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg0)];

	JSObject *tmp_arg1;
	JS_ValueToObject( cx, *argvp++, &tmp_arg1 );
	CGSize arg1 = *(CGSize*)JS_GetTypedArrayData( tmp_arg1);
	int32_t arg2; JS_ValueToECMAInt32( cx, *argvp++, &arg2 );
	int32_t arg3; JS_ValueToECMAInt32( cx, *argvp++, &arg3 );
	JSString *tmp_arg4 = JS_ValueToString( cx, *argvp++ );
	NSString *arg4 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg4)];
	double arg5; JS_ValueToNumber( cx, *argvp++, &arg5 );

	JSPROXY_CCLabelTTF *real = [JSPROXY_CCLabelTTF labelWithString:(NSString*)arg0 dimensions:(CGSize)arg1 hAlignment:(CCTextAlignment)arg2 lineBreakMode:(CCLineBreakMode)arg3 fontName:(NSString*)arg4 fontSize:(CGFloat)arg5  ];
	[real retain];

	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCLabelTTF_class, JSPROXY_CCLabelTTF_object, NULL);
	JS_SetPrivate(jsobj, real);
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: NSString*, CGSize, CCTextAlignment, CCVerticalTextAlignment, NSString*, CGFloat
// Ret value: CCLabelTTF
JSBool JSPROXY_CCLabelTTF_labelWithString_dimensions_hAlignment_vAlignment_fontName_fontSize_(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 6, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSString *tmp_arg0 = JS_ValueToString( cx, *argvp++ );
	NSString *arg0 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg0)];

	JSObject *tmp_arg1;
	JS_ValueToObject( cx, *argvp++, &tmp_arg1 );
	CGSize arg1 = *(CGSize*)JS_GetTypedArrayData( tmp_arg1);
	int32_t arg2; JS_ValueToECMAInt32( cx, *argvp++, &arg2 );
	int32_t arg3; JS_ValueToECMAInt32( cx, *argvp++, &arg3 );
	JSString *tmp_arg4 = JS_ValueToString( cx, *argvp++ );
	NSString *arg4 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg4)];
	double arg5; JS_ValueToNumber( cx, *argvp++, &arg5 );

	JSPROXY_CCLabelTTF *real = [JSPROXY_CCLabelTTF labelWithString:(NSString*)arg0 dimensions:(CGSize)arg1 hAlignment:(CCTextAlignment)arg2 vAlignment:(CCVerticalTextAlignment)arg3 fontName:(NSString*)arg4 fontSize:(CGFloat)arg5  ];
	[real retain];

	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCLabelTTF_class, JSPROXY_CCLabelTTF_object, NULL);
	JS_SetPrivate(jsobj, real);
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: NSString*, CGSize, CCTextAlignment, CCVerticalTextAlignment, CCLineBreakMode, NSString*, CGFloat
// Ret value: CCLabelTTF
JSBool JSPROXY_CCLabelTTF_labelWithString_dimensions_hAlignment_vAlignment_lineBreakMode_fontName_fontSize_(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 7, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSString *tmp_arg0 = JS_ValueToString( cx, *argvp++ );
	NSString *arg0 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg0)];

	JSObject *tmp_arg1;
	JS_ValueToObject( cx, *argvp++, &tmp_arg1 );
	CGSize arg1 = *(CGSize*)JS_GetTypedArrayData( tmp_arg1);
	int32_t arg2; JS_ValueToECMAInt32( cx, *argvp++, &arg2 );
	int32_t arg3; JS_ValueToECMAInt32( cx, *argvp++, &arg3 );
	int32_t arg4; JS_ValueToECMAInt32( cx, *argvp++, &arg4 );
	JSString *tmp_arg5 = JS_ValueToString( cx, *argvp++ );
	NSString *arg5 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg5)];
	double arg6; JS_ValueToNumber( cx, *argvp++, &arg6 );

	JSPROXY_CCLabelTTF *real = [JSPROXY_CCLabelTTF labelWithString:(NSString*)arg0 dimensions:(CGSize)arg1 hAlignment:(CCTextAlignment)arg2 vAlignment:(CCVerticalTextAlignment)arg3 lineBreakMode:(CCLineBreakMode)arg4 fontName:(NSString*)arg5 fontSize:(CGFloat)arg6  ];
	[real retain];

	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCLabelTTF_class, JSPROXY_CCLabelTTF_object, NULL);
	JS_SetPrivate(jsobj, real);
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: NSString*, NSString*, CGFloat
// Ret value: CCLabelTTF
JSBool JSPROXY_CCLabelTTF_labelWithString_fontName_fontSize_(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 3, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSString *tmp_arg0 = JS_ValueToString( cx, *argvp++ );
	NSString *arg0 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg0)];
	JSString *tmp_arg1 = JS_ValueToString( cx, *argvp++ );
	NSString *arg1 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg1)];
	double arg2; JS_ValueToNumber( cx, *argvp++, &arg2 );

	JSPROXY_CCLabelTTF *real = [JSPROXY_CCLabelTTF labelWithString:(NSString*)arg0 fontName:(NSString*)arg1 fontSize:(CGFloat)arg2  ];
	[real retain];

	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCLabelTTF_class, JSPROXY_CCLabelTTF_object, NULL);
	JS_SetPrivate(jsobj, real);
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: CGSize
// Ret value: None
JSBool JSPROXY_CCLabelTTF_setDimensions_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCLabelTTF *real = (JSPROXY_CCLabelTTF*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	CGSize arg0 = *(CGSize*)JS_GetTypedArrayData( tmp_arg0);

	[real setDimensions:(CGSize)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: None
JSBool JSPROXY_CCLabelTTF_setFontName_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCLabelTTF *real = (JSPROXY_CCLabelTTF*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSString *tmp_arg0 = JS_ValueToString( cx, *argvp++ );
	NSString *arg0 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg0)];

	[real setFontName:(NSString*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCLabelTTF_setFontSize_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCLabelTTF *real = (JSPROXY_CCLabelTTF*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	[real setFontSize:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCTextAlignment
// Ret value: None
JSBool JSPROXY_CCLabelTTF_setHorizontalAlignment_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCLabelTTF *real = (JSPROXY_CCLabelTTF*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	int32_t arg0; JS_ValueToECMAInt32( cx, *argvp++, &arg0 );

	[real setHorizontalAlignment:(CCTextAlignment)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: None
JSBool JSPROXY_CCLabelTTF_setString_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCLabelTTF *real = (JSPROXY_CCLabelTTF*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSString *tmp_arg0 = JS_ValueToString( cx, *argvp++ );
	NSString *arg0 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg0)];

	[real setString:(NSString*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCVerticalTextAlignment
// Ret value: None
JSBool JSPROXY_CCLabelTTF_setVerticalAlignment_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCLabelTTF *real = (JSPROXY_CCLabelTTF*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	int32_t arg0; JS_ValueToECMAInt32( cx, *argvp++, &arg0 );

	[real setVerticalAlignment:(CCVerticalTextAlignment)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: CCVerticalTextAlignment
JSBool JSPROXY_CCLabelTTF_verticalAlignment(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCLabelTTF *real = (JSPROXY_CCLabelTTF*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CCVerticalTextAlignment ret_val;

	ret_val = [real verticalAlignment ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

void JSPROXY_CCLabelTTF_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCLabelTTF_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCLabelTTF_class->name = name;
	JSPROXY_CCLabelTTF_class->addProperty = JS_PropertyStub;
	JSPROXY_CCLabelTTF_class->delProperty = JS_PropertyStub;
	JSPROXY_CCLabelTTF_class->getProperty = JS_PropertyStub;
	JSPROXY_CCLabelTTF_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCLabelTTF_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCLabelTTF_class->resolve = JS_ResolveStub;
	JSPROXY_CCLabelTTF_class->convert = JS_ConvertStub;
	JSPROXY_CCLabelTTF_class->finalize = JSPROXY_CCLabelTTF_finalize;
	JSPROXY_CCLabelTTF_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("fontName", JSPROXY_CCLabelTTF_fontName, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("fontSize", JSPROXY_CCLabelTTF_fontSize, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("horizontalAlignment", JSPROXY_CCLabelTTF_horizontalAlignment, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithStringDimensionsHalignmentFontnameFontsize", JSPROXY_CCLabelTTF_initWithString_dimensions_hAlignment_fontName_fontSize_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithStringDimensionsHalignmentLinebreakmodeFontnameFontsize", JSPROXY_CCLabelTTF_initWithString_dimensions_hAlignment_lineBreakMode_fontName_fontSize_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithStringDimensionsHalignmentValignmentFontnameFontsize", JSPROXY_CCLabelTTF_initWithString_dimensions_hAlignment_vAlignment_fontName_fontSize_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithStringDimensionsHalignmentValignmentLinebreakmodeFontnameFontsize", JSPROXY_CCLabelTTF_initWithString_dimensions_hAlignment_vAlignment_lineBreakMode_fontName_fontSize_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithStringFontnameFontsize", JSPROXY_CCLabelTTF_initWithString_fontName_fontSize_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setDimensions", JSPROXY_CCLabelTTF_setDimensions_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setFontName", JSPROXY_CCLabelTTF_setFontName_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setFontSize", JSPROXY_CCLabelTTF_setFontSize_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setHorizontalAlignment", JSPROXY_CCLabelTTF_setHorizontalAlignment_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setString", JSPROXY_CCLabelTTF_setString_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setVerticalAlignment", JSPROXY_CCLabelTTF_setVerticalAlignment_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("verticalAlignment", JSPROXY_CCLabelTTF_verticalAlignment, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("labelWithStringDimensionsHalignmentFontnameFontsize", JSPROXY_CCLabelTTF_labelWithString_dimensions_hAlignment_fontName_fontSize_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FN("labelWithStringDimensionsHalignmentLinebreakmodeFontnameFontsize", JSPROXY_CCLabelTTF_labelWithString_dimensions_hAlignment_lineBreakMode_fontName_fontSize_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FN("labelWithStringDimensionsHalignmentValignmentFontnameFontsize", JSPROXY_CCLabelTTF_labelWithString_dimensions_hAlignment_vAlignment_fontName_fontSize_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FN("labelWithStringDimensionsHalignmentValignmentLinebreakmodeFontnameFontsize", JSPROXY_CCLabelTTF_labelWithString_dimensions_hAlignment_vAlignment_lineBreakMode_fontName_fontSize_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FN("labelWithStringFontnameFontsize", JSPROXY_CCLabelTTF_labelWithString_fontName_fontSize_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FS_END
	};

	JSPROXY_CCLabelTTF_object = JS_InitClass(cx, globalObj, JSPROXY_CCSprite_object, JSPROXY_CCLabelTTF_class, JSPROXY_CCLabelTTF_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCLabelTTF
@synthesize jsObject = jsObject_;

@end

/*
 * CCSpriteBatchNode
 */
#pragma mark - CCSpriteBatchNode

JSClass* JSPROXY_CCSpriteBatchNode_class = NULL;
JSObject* JSPROXY_CCSpriteBatchNode_object = NULL;
 // Constructor
JSBool JSPROXY_CCSpriteBatchNode_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCSpriteBatchNode_class, JSPROXY_CCSpriteBatchNode_object, NULL);

    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCSpriteBatchNode_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCSpriteBatchNode *real= (JSPROXY_CCSpriteBatchNode*)JS_GetPrivate(obj);
	if (real)
		[real release];
}

// Arguments: CCSprite*, NSUInteger
// Ret value: None
JSBool JSPROXY_CCSpriteBatchNode_addQuadFromSprite_quadIndex_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCSpriteBatchNode *real = (JSPROXY_CCSpriteBatchNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	JSPROXY_CCSprite* arg0 = (JSPROXY_CCSprite*) JS_GetPrivate( tmp_arg0 ); 
	uint32_t arg1; JS_ValueToECMAUint32( cx, *argvp++, &arg1 );

	[real addQuadFromSprite:(CCSprite*)arg0 quadIndex:(NSUInteger)arg1  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCSprite*
// Ret value: None
JSBool JSPROXY_CCSpriteBatchNode_appendChild_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCSpriteBatchNode *real = (JSPROXY_CCSpriteBatchNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	JSPROXY_CCSprite* arg0 = (JSPROXY_CCSprite*) JS_GetPrivate( tmp_arg0 ); 

	[real appendChild:(CCSprite*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCSprite*, NSInteger
// Ret value: NSUInteger
JSBool JSPROXY_CCSpriteBatchNode_atlasIndexForChild_atZ_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCSpriteBatchNode *real = (JSPROXY_CCSpriteBatchNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	JSPROXY_CCSprite* arg0 = (JSPROXY_CCSprite*) JS_GetPrivate( tmp_arg0 ); 
	int32_t arg1; JS_ValueToECMAInt32( cx, *argvp++, &arg1 );
	NSUInteger ret_val;

	ret_val = [real atlasIndexForChild:(CCSprite*)arg0 atZ:(NSInteger)arg1  ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: CCSpriteBatchNode
JSBool JSPROXY_CCSpriteBatchNode_batchNodeWithFile_(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSString *tmp_arg0 = JS_ValueToString( cx, *argvp++ );
	NSString *arg0 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg0)];

	JSPROXY_CCSpriteBatchNode *real = [JSPROXY_CCSpriteBatchNode batchNodeWithFile:(NSString*)arg0  ];
	[real retain];

	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCSpriteBatchNode_class, JSPROXY_CCSpriteBatchNode_object, NULL);
	JS_SetPrivate(jsobj, real);
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: NSString*, NSUInteger
// Ret value: CCSpriteBatchNode
JSBool JSPROXY_CCSpriteBatchNode_batchNodeWithFile_capacity_(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSString *tmp_arg0 = JS_ValueToString( cx, *argvp++ );
	NSString *arg0 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg0)];
	uint32_t arg1; JS_ValueToECMAUint32( cx, *argvp++, &arg1 );

	JSPROXY_CCSpriteBatchNode *real = [JSPROXY_CCSpriteBatchNode batchNodeWithFile:(NSString*)arg0 capacity:(NSUInteger)arg1  ];
	[real retain];

	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCSpriteBatchNode_class, JSPROXY_CCSpriteBatchNode_object, NULL);
	JS_SetPrivate(jsobj, real);
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCSpriteBatchNode_increaseAtlasCapacity(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCSpriteBatchNode *real = (JSPROXY_CCSpriteBatchNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real increaseAtlasCapacity ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*, NSUInteger
// Ret value: None
JSBool JSPROXY_CCSpriteBatchNode_initWithFile_capacity_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCSpriteBatchNode *real = (JSPROXY_CCSpriteBatchNode*) JS_GetPrivate( jsthis );
	NSCAssert( !real, @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSString *tmp_arg0 = JS_ValueToString( cx, *argvp++ );
	NSString *arg0 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg0)];
	uint32_t arg1; JS_ValueToECMAUint32( cx, *argvp++, &arg1 );

	real = [[JSPROXY_CCSpriteBatchNode alloc] initWithFile:(NSString*)arg0 capacity:(NSUInteger)arg1  ];
	JS_SetPrivate(jsthis, real);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCSprite*, NSUInteger
// Ret value: None
JSBool JSPROXY_CCSpriteBatchNode_insertChild_inAtlasAtIndex_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCSpriteBatchNode *real = (JSPROXY_CCSpriteBatchNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	JSPROXY_CCSprite* arg0 = (JSPROXY_CCSprite*) JS_GetPrivate( tmp_arg0 ); 
	uint32_t arg1; JS_ValueToECMAUint32( cx, *argvp++, &arg1 );

	[real insertChild:(CCSprite*)arg0 inAtlasAtIndex:(NSUInteger)arg1  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCSprite*, NSUInteger
// Ret value: NSUInteger
JSBool JSPROXY_CCSpriteBatchNode_rebuildIndexInOrder_atlasIndex_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCSpriteBatchNode *real = (JSPROXY_CCSpriteBatchNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	JSPROXY_CCSprite* arg0 = (JSPROXY_CCSprite*) JS_GetPrivate( tmp_arg0 ); 
	uint32_t arg1; JS_ValueToECMAUint32( cx, *argvp++, &arg1 );
	NSUInteger ret_val;

	ret_val = [real rebuildIndexInOrder:(CCSprite*)arg0 atlasIndex:(NSUInteger)arg1  ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: CCSprite*, BOOL
// Ret value: None
JSBool JSPROXY_CCSpriteBatchNode_removeChild_cleanup_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCSpriteBatchNode *real = (JSPROXY_CCSpriteBatchNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	JSPROXY_CCSprite* arg0 = (JSPROXY_CCSprite*) JS_GetPrivate( tmp_arg0 ); 
	JSBool arg1; JS_ValueToBoolean( cx, *argvp++, &arg1 );

	[real removeChild:(CCSprite*)arg0 cleanup:(BOOL)arg1  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSUInteger, BOOL
// Ret value: None
JSBool JSPROXY_CCSpriteBatchNode_removeChildAtIndex_cleanup_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCSpriteBatchNode *real = (JSPROXY_CCSpriteBatchNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	uint32_t arg0; JS_ValueToECMAUint32( cx, *argvp++, &arg0 );
	JSBool arg1; JS_ValueToBoolean( cx, *argvp++, &arg1 );

	[real removeChildAtIndex:(NSUInteger)arg0 cleanup:(BOOL)arg1  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCSprite*
// Ret value: None
JSBool JSPROXY_CCSpriteBatchNode_removeSpriteFromAtlas_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCSpriteBatchNode *real = (JSPROXY_CCSpriteBatchNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	JSPROXY_CCSprite* arg0 = (JSPROXY_CCSprite*) JS_GetPrivate( tmp_arg0 ); 

	[real removeSpriteFromAtlas:(CCSprite*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCSpriteBatchNode_reorderBatch_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCSpriteBatchNode *real = (JSPROXY_CCSpriteBatchNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	[real reorderBatch:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: ccBlendFunc
// Ret value: None
JSBool JSPROXY_CCSpriteBatchNode_setBlendFunc_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCSpriteBatchNode *real = (JSPROXY_CCSpriteBatchNode*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	ccBlendFunc arg0 = *(ccBlendFunc*)JS_GetTypedArrayData( tmp_arg0);

	[real setBlendFunc:(ccBlendFunc)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

void JSPROXY_CCSpriteBatchNode_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCSpriteBatchNode_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCSpriteBatchNode_class->name = name;
	JSPROXY_CCSpriteBatchNode_class->addProperty = JS_PropertyStub;
	JSPROXY_CCSpriteBatchNode_class->delProperty = JS_PropertyStub;
	JSPROXY_CCSpriteBatchNode_class->getProperty = JS_PropertyStub;
	JSPROXY_CCSpriteBatchNode_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCSpriteBatchNode_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCSpriteBatchNode_class->resolve = JS_ResolveStub;
	JSPROXY_CCSpriteBatchNode_class->convert = JS_ConvertStub;
	JSPROXY_CCSpriteBatchNode_class->finalize = JSPROXY_CCSpriteBatchNode_finalize;
	JSPROXY_CCSpriteBatchNode_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("addQuadFromSpriteQuadindex", JSPROXY_CCSpriteBatchNode_addQuadFromSprite_quadIndex_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("appendChild", JSPROXY_CCSpriteBatchNode_appendChild_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("atlasIndexForChildAtz", JSPROXY_CCSpriteBatchNode_atlasIndexForChild_atZ_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("increaseAtlasCapacity", JSPROXY_CCSpriteBatchNode_increaseAtlasCapacity, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithFileCapacity", JSPROXY_CCSpriteBatchNode_initWithFile_capacity_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("insertChildInatlasatindex", JSPROXY_CCSpriteBatchNode_insertChild_inAtlasAtIndex_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("rebuildIndexInOrderAtlasindex", JSPROXY_CCSpriteBatchNode_rebuildIndexInOrder_atlasIndex_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("removeChildCleanup", JSPROXY_CCSpriteBatchNode_removeChild_cleanup_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("removeChildAtIndexCleanup", JSPROXY_CCSpriteBatchNode_removeChildAtIndex_cleanup_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("removeSpriteFromAtlas", JSPROXY_CCSpriteBatchNode_removeSpriteFromAtlas_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("reorderBatch", JSPROXY_CCSpriteBatchNode_reorderBatch_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setBlendFunc", JSPROXY_CCSpriteBatchNode_setBlendFunc_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("batchNodeWithFile", JSPROXY_CCSpriteBatchNode_batchNodeWithFile_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FN("batchNodeWithFileCapacity", JSPROXY_CCSpriteBatchNode_batchNodeWithFile_capacity_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FS_END
	};

	JSPROXY_CCSpriteBatchNode_object = JS_InitClass(cx, globalObj, JSPROXY_CCNode_object, JSPROXY_CCSpriteBatchNode_class, JSPROXY_CCSpriteBatchNode_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCSpriteBatchNode
@synthesize jsObject = jsObject_;

@end

/*
 * CCLabelBMFont
 */
#pragma mark - CCLabelBMFont

JSClass* JSPROXY_CCLabelBMFont_class = NULL;
JSObject* JSPROXY_CCLabelBMFont_object = NULL;
 // Constructor
JSBool JSPROXY_CCLabelBMFont_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCLabelBMFont_class, JSPROXY_CCLabelBMFont_object, NULL);

    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCLabelBMFont_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCLabelBMFont *real= (JSPROXY_CCLabelBMFont*)JS_GetPrivate(obj);
	if (real)
		[real release];
}

// Arguments: 
// Ret value: CCTextAlignment
JSBool JSPROXY_CCLabelBMFont_alignment(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCLabelBMFont *real = (JSPROXY_CCLabelBMFont*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CCTextAlignment ret_val;

	ret_val = [real alignment ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCLabelBMFont_createFontChars(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCLabelBMFont *real = (JSPROXY_CCLabelBMFont*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real createFontChars ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSString*
JSBool JSPROXY_CCLabelBMFont_fntFile(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCLabelBMFont *real = (JSPROXY_CCLabelBMFont*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSString* ret_val;

	ret_val = [real fntFile ];

	JSString *ret_obj = JS_NewStringCopyZ(cx, [ret_val UTF8String]);
	JS_SET_RVAL(cx, vp, STRING_TO_JSVAL(ret_obj) );

	return JS_TRUE;
}

// Arguments: NSString*, NSString*
// Ret value: None
JSBool JSPROXY_CCLabelBMFont_initWithString_fntFile_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCLabelBMFont *real = (JSPROXY_CCLabelBMFont*) JS_GetPrivate( jsthis );
	NSCAssert( !real, @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSString *tmp_arg0 = JS_ValueToString( cx, *argvp++ );
	NSString *arg0 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg0)];
	JSString *tmp_arg1 = JS_ValueToString( cx, *argvp++ );
	NSString *arg1 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg1)];

	real = [[JSPROXY_CCLabelBMFont alloc] initWithString:(NSString*)arg0 fntFile:(NSString*)arg1  ];
	JS_SetPrivate(jsthis, real);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*, NSString*, float, CCTextAlignment
// Ret value: None
JSBool JSPROXY_CCLabelBMFont_initWithString_fntFile_width_alignment_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCLabelBMFont *real = (JSPROXY_CCLabelBMFont*) JS_GetPrivate( jsthis );
	NSCAssert( !real, @"Object not initialzied. error");
	NSCAssert( argc == 4, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSString *tmp_arg0 = JS_ValueToString( cx, *argvp++ );
	NSString *arg0 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg0)];
	JSString *tmp_arg1 = JS_ValueToString( cx, *argvp++ );
	NSString *arg1 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg1)];
	double arg2; JS_ValueToNumber( cx, *argvp++, &arg2 );
	int32_t arg3; JS_ValueToECMAInt32( cx, *argvp++, &arg3 );

	real = [[JSPROXY_CCLabelBMFont alloc] initWithString:(NSString*)arg0 fntFile:(NSString*)arg1 width:(float)arg2 alignment:(CCTextAlignment)arg3  ];
	JS_SetPrivate(jsthis, real);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*, NSString*, float, CCTextAlignment, CGPoint
// Ret value: None
JSBool JSPROXY_CCLabelBMFont_initWithString_fntFile_width_alignment_imageOffset_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCLabelBMFont *real = (JSPROXY_CCLabelBMFont*) JS_GetPrivate( jsthis );
	NSCAssert( !real, @"Object not initialzied. error");
	NSCAssert( argc == 5, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSString *tmp_arg0 = JS_ValueToString( cx, *argvp++ );
	NSString *arg0 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg0)];
	JSString *tmp_arg1 = JS_ValueToString( cx, *argvp++ );
	NSString *arg1 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg1)];
	double arg2; JS_ValueToNumber( cx, *argvp++, &arg2 );
	int32_t arg3; JS_ValueToECMAInt32( cx, *argvp++, &arg3 );

	JSObject *tmp_arg4;
	JS_ValueToObject( cx, *argvp++, &tmp_arg4 );
	NSCAssert( JS_GetTypedArrayByteLength( tmp_arg4 ) == 8, @"Invalid length");
#ifdef __CC_PLATFORM_IOS
	CGPoint arg4 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg4 );
#elif defined(__CC_PLATFORM_MAC)
	float* arg4_array = (float*)JS_GetTypedArrayData( tmp_arg4 );
	CGPoint arg4 = ccp(arg4_array[0], arg4_array[1] );
#else
#error Unsupported Platform
#endif  

	real = [[JSPROXY_CCLabelBMFont alloc] initWithString:(NSString*)arg0 fntFile:(NSString*)arg1 width:(float)arg2 alignment:(CCTextAlignment)arg3 imageOffset:(CGPoint)arg4  ];
	JS_SetPrivate(jsthis, real);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*, NSString*
// Ret value: CCLabelBMFont
JSBool JSPROXY_CCLabelBMFont_labelWithString_fntFile_(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSString *tmp_arg0 = JS_ValueToString( cx, *argvp++ );
	NSString *arg0 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg0)];
	JSString *tmp_arg1 = JS_ValueToString( cx, *argvp++ );
	NSString *arg1 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg1)];

	JSPROXY_CCLabelBMFont *real = [JSPROXY_CCLabelBMFont labelWithString:(NSString*)arg0 fntFile:(NSString*)arg1  ];
	[real retain];

	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCLabelBMFont_class, JSPROXY_CCLabelBMFont_object, NULL);
	JS_SetPrivate(jsobj, real);
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: NSString*, NSString*, float, CCTextAlignment
// Ret value: CCLabelBMFont
JSBool JSPROXY_CCLabelBMFont_labelWithString_fntFile_width_alignment_(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 4, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSString *tmp_arg0 = JS_ValueToString( cx, *argvp++ );
	NSString *arg0 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg0)];
	JSString *tmp_arg1 = JS_ValueToString( cx, *argvp++ );
	NSString *arg1 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg1)];
	double arg2; JS_ValueToNumber( cx, *argvp++, &arg2 );
	int32_t arg3; JS_ValueToECMAInt32( cx, *argvp++, &arg3 );

	JSPROXY_CCLabelBMFont *real = [JSPROXY_CCLabelBMFont labelWithString:(NSString*)arg0 fntFile:(NSString*)arg1 width:(float)arg2 alignment:(CCTextAlignment)arg3  ];
	[real retain];

	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCLabelBMFont_class, JSPROXY_CCLabelBMFont_object, NULL);
	JS_SetPrivate(jsobj, real);
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: NSString*, NSString*, float, CCTextAlignment, CGPoint
// Ret value: CCLabelBMFont
JSBool JSPROXY_CCLabelBMFont_labelWithString_fntFile_width_alignment_imageOffset_(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 5, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSString *tmp_arg0 = JS_ValueToString( cx, *argvp++ );
	NSString *arg0 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg0)];
	JSString *tmp_arg1 = JS_ValueToString( cx, *argvp++ );
	NSString *arg1 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg1)];
	double arg2; JS_ValueToNumber( cx, *argvp++, &arg2 );
	int32_t arg3; JS_ValueToECMAInt32( cx, *argvp++, &arg3 );

	JSObject *tmp_arg4;
	JS_ValueToObject( cx, *argvp++, &tmp_arg4 );
	NSCAssert( JS_GetTypedArrayByteLength( tmp_arg4 ) == 8, @"Invalid length");
#ifdef __CC_PLATFORM_IOS
	CGPoint arg4 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg4 );
#elif defined(__CC_PLATFORM_MAC)
	float* arg4_array = (float*)JS_GetTypedArrayData( tmp_arg4 );
	CGPoint arg4 = ccp(arg4_array[0], arg4_array[1] );
#else
#error Unsupported Platform
#endif  

	JSPROXY_CCLabelBMFont *real = [JSPROXY_CCLabelBMFont labelWithString:(NSString*)arg0 fntFile:(NSString*)arg1 width:(float)arg2 alignment:(CCTextAlignment)arg3 imageOffset:(CGPoint)arg4  ];
	[real retain];

	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCLabelBMFont_class, JSPROXY_CCLabelBMFont_object, NULL);
	JS_SetPrivate(jsobj, real);
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: GLubyte
JSBool JSPROXY_CCLabelBMFont_opacity(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCLabelBMFont *real = (JSPROXY_CCLabelBMFont*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	GLubyte ret_val;

	ret_val = [real opacity ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCLabelBMFont_purgeCachedData(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[JSPROXY_CCLabelBMFont purgeCachedData ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCTextAlignment
// Ret value: None
JSBool JSPROXY_CCLabelBMFont_setAlignment_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCLabelBMFont *real = (JSPROXY_CCLabelBMFont*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	int32_t arg0; JS_ValueToECMAInt32( cx, *argvp++, &arg0 );

	[real setAlignment:(CCTextAlignment)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: ccColor3B
// Ret value: None
JSBool JSPROXY_CCLabelBMFont_setColor_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCLabelBMFont *real = (JSPROXY_CCLabelBMFont*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	ccColor3B arg0 = *(ccColor3B*)JS_GetTypedArrayData( tmp_arg0);

	[real setColor:(ccColor3B)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: None
JSBool JSPROXY_CCLabelBMFont_setFntFile_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCLabelBMFont *real = (JSPROXY_CCLabelBMFont*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSString *tmp_arg0 = JS_ValueToString( cx, *argvp++ );
	NSString *arg0 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg0)];

	[real setFntFile:(NSString*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: GLubyte
// Ret value: None
JSBool JSPROXY_CCLabelBMFont_setOpacity_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCLabelBMFont *real = (JSPROXY_CCLabelBMFont*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	uint16_t arg0; JS_ValueToUint16( cx, *argvp++, &arg0 );

	[real setOpacity:(GLubyte)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCLabelBMFont_setWidth_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCLabelBMFont *real = (JSPROXY_CCLabelBMFont*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	[real setWidth:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

void JSPROXY_CCLabelBMFont_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCLabelBMFont_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCLabelBMFont_class->name = name;
	JSPROXY_CCLabelBMFont_class->addProperty = JS_PropertyStub;
	JSPROXY_CCLabelBMFont_class->delProperty = JS_PropertyStub;
	JSPROXY_CCLabelBMFont_class->getProperty = JS_PropertyStub;
	JSPROXY_CCLabelBMFont_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCLabelBMFont_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCLabelBMFont_class->resolve = JS_ResolveStub;
	JSPROXY_CCLabelBMFont_class->convert = JS_ConvertStub;
	JSPROXY_CCLabelBMFont_class->finalize = JSPROXY_CCLabelBMFont_finalize;
	JSPROXY_CCLabelBMFont_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("alignment", JSPROXY_CCLabelBMFont_alignment, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("createFontChars", JSPROXY_CCLabelBMFont_createFontChars, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("fntFile", JSPROXY_CCLabelBMFont_fntFile, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithStringFntfile", JSPROXY_CCLabelBMFont_initWithString_fntFile_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithStringFntfileWidthAlignment", JSPROXY_CCLabelBMFont_initWithString_fntFile_width_alignment_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithStringFntfileWidthAlignmentImageoffset", JSPROXY_CCLabelBMFont_initWithString_fntFile_width_alignment_imageOffset_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("opacity", JSPROXY_CCLabelBMFont_opacity, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setAlignment", JSPROXY_CCLabelBMFont_setAlignment_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setColor", JSPROXY_CCLabelBMFont_setColor_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setFntFile", JSPROXY_CCLabelBMFont_setFntFile_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setOpacity", JSPROXY_CCLabelBMFont_setOpacity_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setWidth", JSPROXY_CCLabelBMFont_setWidth_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("labelWithStringFntfile", JSPROXY_CCLabelBMFont_labelWithString_fntFile_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FN("labelWithStringFntfileWidthAlignment", JSPROXY_CCLabelBMFont_labelWithString_fntFile_width_alignment_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FN("labelWithStringFntfileWidthAlignmentImageoffset", JSPROXY_CCLabelBMFont_labelWithString_fntFile_width_alignment_imageOffset_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FN("purgeCachedData", JSPROXY_CCLabelBMFont_purgeCachedData, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};

	JSPROXY_CCLabelBMFont_object = JS_InitClass(cx, globalObj, JSPROXY_CCSpriteBatchNode_object, JSPROXY_CCLabelBMFont_class, JSPROXY_CCLabelBMFont_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCLabelBMFont
@synthesize jsObject = jsObject_;

@end

/*
 * CCParticleSystem
 */
#pragma mark - CCParticleSystem

JSClass* JSPROXY_CCParticleSystem_class = NULL;
JSObject* JSPROXY_CCParticleSystem_object = NULL;
 // Constructor
JSBool JSPROXY_CCParticleSystem_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCParticleSystem_class, JSPROXY_CCParticleSystem_object, NULL);

    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCParticleSystem_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCParticleSystem *real= (JSPROXY_CCParticleSystem*)JS_GetPrivate(obj);
	if (real)
		[real release];
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCParticleSystem_active(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	ret_val = [real active ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_angle(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	ret_val = [real angle ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_angleVar(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	ret_val = [real angleVar ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSUInteger
JSBool JSPROXY_CCParticleSystem_atlasIndex(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSUInteger ret_val;

	ret_val = [real atlasIndex ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCParticleSystem_autoRemoveOnFinish(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	ret_val = [real autoRemoveOnFinish ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCParticleSystem_blendAdditive(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	ret_val = [real blendAdditive ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCParticleSystem_doesOpacityModifyRGB(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	ret_val = [real doesOpacityModifyRGB ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_duration(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	ret_val = [real duration ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_emissionRate(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	ret_val = [real emissionRate ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSInteger
JSBool JSPROXY_CCParticleSystem_emitterMode(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSInteger ret_val;

	ret_val = [real emitterMode ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_endRadius(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	ret_val = [real endRadius ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_endRadiusVar(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	ret_val = [real endRadiusVar ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_endSize(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	ret_val = [real endSize ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_endSizeVar(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	ret_val = [real endSizeVar ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_endSpin(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	ret_val = [real endSpin ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_endSpinVar(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	ret_val = [real endSpinVar ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: CGPoint
JSBool JSPROXY_CCParticleSystem_gravity(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CGPoint ret_val;

	ret_val = [real gravity ];

	JSObject *typedArray = js_CreateTypedArray(cx, js::TypedArray::TYPE_FLOAT32, 2 );
	float *buffer = (float*)JS_GetTypedArrayData(typedArray);
	buffer[0] = ret_val.x;
	buffer[1] = ret_val.y;
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(typedArray));

	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: None
JSBool JSPROXY_CCParticleSystem_initWithFile_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( !real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSString *tmp_arg0 = JS_ValueToString( cx, *argvp++ );
	NSString *arg0 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg0)];

	real = [[JSPROXY_CCParticleSystem alloc] initWithFile:(NSString*)arg0  ];
	JS_SetPrivate(jsthis, real);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSUInteger
// Ret value: None
JSBool JSPROXY_CCParticleSystem_initWithTotalParticles_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( !real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	uint32_t arg0; JS_ValueToECMAUint32( cx, *argvp++, &arg0 );

	real = [[JSPROXY_CCParticleSystem alloc] initWithTotalParticles:(NSUInteger)arg0  ];
	JS_SetPrivate(jsthis, real);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCParticleSystem_isFull(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	ret_val = [real isFull ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_life(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	ret_val = [real life ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_lifeVar(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	ret_val = [real lifeVar ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSUInteger
JSBool JSPROXY_CCParticleSystem_particleCount(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSUInteger ret_val;

	ret_val = [real particleCount ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: CCParticleSystem
JSBool JSPROXY_CCParticleSystem_particleWithFile_(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSString *tmp_arg0 = JS_ValueToString( cx, *argvp++ );
	NSString *arg0 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg0)];

	JSPROXY_CCParticleSystem *real = [JSPROXY_CCParticleSystem particleWithFile:(NSString*)arg0  ];
	[real retain];

	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCParticleSystem_class, JSPROXY_CCParticleSystem_object, NULL);
	JS_SetPrivate(jsobj, real);
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: CGPoint
JSBool JSPROXY_CCParticleSystem_posVar(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CGPoint ret_val;

	ret_val = [real posVar ];

	JSObject *typedArray = js_CreateTypedArray(cx, js::TypedArray::TYPE_FLOAT32, 2 );
	float *buffer = (float*)JS_GetTypedArrayData(typedArray);
	buffer[0] = ret_val.x;
	buffer[1] = ret_val.y;
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(typedArray));

	return JS_TRUE;
}

// Arguments: 
// Ret value: tCCPositionType
JSBool JSPROXY_CCParticleSystem_positionType(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	tCCPositionType ret_val;

	ret_val = [real positionType ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCParticleSystem_postStep(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real postStep ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_radialAccel(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	ret_val = [real radialAccel ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_radialAccelVar(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	ret_val = [real radialAccelVar ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCParticleSystem_resetSystem(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real resetSystem ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_rotatePerSecond(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	ret_val = [real rotatePerSecond ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_rotatePerSecondVar(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	ret_val = [real rotatePerSecondVar ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setAngle_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	[real setAngle:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setAngleVar_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	[real setAngleVar:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSUInteger
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setAtlasIndex_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	uint32_t arg0; JS_ValueToECMAUint32( cx, *argvp++, &arg0 );

	[real setAtlasIndex:(NSUInteger)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setAutoRemoveOnFinish_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	[real setAutoRemoveOnFinish:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setBlendAdditive_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	[real setBlendAdditive:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: ccBlendFunc
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setBlendFunc_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	ccBlendFunc arg0 = *(ccBlendFunc*)JS_GetTypedArrayData( tmp_arg0);

	[real setBlendFunc:(ccBlendFunc)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setDuration_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	[real setDuration:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setEmissionRate_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	[real setEmissionRate:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSInteger
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setEmitterMode_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	int32_t arg0; JS_ValueToECMAInt32( cx, *argvp++, &arg0 );

	[real setEmitterMode:(NSInteger)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: ccColor4F
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setEndColor_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	ccColor4F arg0 = *(ccColor4F*)JS_GetTypedArrayData( tmp_arg0);

	[real setEndColor:(ccColor4F)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: ccColor4F
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setEndColorVar_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	ccColor4F arg0 = *(ccColor4F*)JS_GetTypedArrayData( tmp_arg0);

	[real setEndColorVar:(ccColor4F)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setEndRadius_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	[real setEndRadius:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setEndRadiusVar_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	[real setEndRadiusVar:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setEndSize_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	[real setEndSize:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setEndSizeVar_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	[real setEndSizeVar:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setEndSpin_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	[real setEndSpin:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setEndSpinVar_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	[real setEndSpinVar:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CGPoint
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setGravity_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	NSCAssert( JS_GetTypedArrayByteLength( tmp_arg0 ) == 8, @"Invalid length");
#ifdef __CC_PLATFORM_IOS
	CGPoint arg0 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg0 );
#elif defined(__CC_PLATFORM_MAC)
	float* arg0_array = (float*)JS_GetTypedArrayData( tmp_arg0 );
	CGPoint arg0 = ccp(arg0_array[0], arg0_array[1] );
#else
#error Unsupported Platform
#endif  

	[real setGravity:(CGPoint)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setLife_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	[real setLife:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setLifeVar_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	[real setLifeVar:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setOpacityModifyRGB_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	[real setOpacityModifyRGB:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CGPoint
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setPosVar_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	NSCAssert( JS_GetTypedArrayByteLength( tmp_arg0 ) == 8, @"Invalid length");
#ifdef __CC_PLATFORM_IOS
	CGPoint arg0 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg0 );
#elif defined(__CC_PLATFORM_MAC)
	float* arg0_array = (float*)JS_GetTypedArrayData( tmp_arg0 );
	CGPoint arg0 = ccp(arg0_array[0], arg0_array[1] );
#else
#error Unsupported Platform
#endif  

	[real setPosVar:(CGPoint)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: tCCPositionType
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setPositionType_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	int32_t arg0; JS_ValueToECMAInt32( cx, *argvp++, &arg0 );

	[real setPositionType:(tCCPositionType)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setRadialAccel_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	[real setRadialAccel:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setRadialAccelVar_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	[real setRadialAccelVar:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setRotatePerSecond_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	[real setRotatePerSecond:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setRotatePerSecondVar_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	[real setRotatePerSecondVar:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CGPoint
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setSourcePosition_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	NSCAssert( JS_GetTypedArrayByteLength( tmp_arg0 ) == 8, @"Invalid length");
#ifdef __CC_PLATFORM_IOS
	CGPoint arg0 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg0 );
#elif defined(__CC_PLATFORM_MAC)
	float* arg0_array = (float*)JS_GetTypedArrayData( tmp_arg0 );
	CGPoint arg0 = ccp(arg0_array[0], arg0_array[1] );
#else
#error Unsupported Platform
#endif  

	[real setSourcePosition:(CGPoint)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setSpeed_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	[real setSpeed:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setSpeedVar_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	[real setSpeedVar:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: ccColor4F
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setStartColor_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	ccColor4F arg0 = *(ccColor4F*)JS_GetTypedArrayData( tmp_arg0);

	[real setStartColor:(ccColor4F)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: ccColor4F
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setStartColorVar_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	ccColor4F arg0 = *(ccColor4F*)JS_GetTypedArrayData( tmp_arg0);

	[real setStartColorVar:(ccColor4F)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setStartRadius_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	[real setStartRadius:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setStartRadiusVar_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	[real setStartRadiusVar:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setStartSize_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	[real setStartSize:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setStartSizeVar_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	[real setStartSizeVar:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setStartSpin_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	[real setStartSpin:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setStartSpinVar_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	[real setStartSpinVar:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setTangentialAccel_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	[real setTangentialAccel:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setTangentialAccelVar_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	[real setTangentialAccelVar:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSUInteger
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setTotalParticles_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	uint32_t arg0; JS_ValueToECMAUint32( cx, *argvp++, &arg0 );

	[real setTotalParticles:(NSUInteger)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: CGPoint
JSBool JSPROXY_CCParticleSystem_sourcePosition(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CGPoint ret_val;

	ret_val = [real sourcePosition ];

	JSObject *typedArray = js_CreateTypedArray(cx, js::TypedArray::TYPE_FLOAT32, 2 );
	float *buffer = (float*)JS_GetTypedArrayData(typedArray);
	buffer[0] = ret_val.x;
	buffer[1] = ret_val.y;
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(typedArray));

	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_speed(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	ret_val = [real speed ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_speedVar(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	ret_val = [real speedVar ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_startRadius(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	ret_val = [real startRadius ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_startRadiusVar(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	ret_val = [real startRadiusVar ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_startSize(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	ret_val = [real startSize ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_startSizeVar(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	ret_val = [real startSizeVar ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_startSpin(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	ret_val = [real startSpin ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_startSpinVar(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	ret_val = [real startSpinVar ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCParticleSystem_stopSystem(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real stopSystem ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_tangentialAccel(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	ret_val = [real tangentialAccel ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_tangentialAccelVar(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	ret_val = [real tangentialAccelVar ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSUInteger
JSBool JSPROXY_CCParticleSystem_totalParticles(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSUInteger ret_val;

	ret_val = [real totalParticles ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: ccTime
// Ret value: None
JSBool JSPROXY_CCParticleSystem_update_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	[real update:(ccTime)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCParticleSystem_updateWithNoTime(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystem *real = (JSPROXY_CCParticleSystem*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real updateWithNoTime ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

void JSPROXY_CCParticleSystem_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCParticleSystem_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCParticleSystem_class->name = name;
	JSPROXY_CCParticleSystem_class->addProperty = JS_PropertyStub;
	JSPROXY_CCParticleSystem_class->delProperty = JS_PropertyStub;
	JSPROXY_CCParticleSystem_class->getProperty = JS_PropertyStub;
	JSPROXY_CCParticleSystem_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCParticleSystem_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCParticleSystem_class->resolve = JS_ResolveStub;
	JSPROXY_CCParticleSystem_class->convert = JS_ConvertStub;
	JSPROXY_CCParticleSystem_class->finalize = JSPROXY_CCParticleSystem_finalize;
	JSPROXY_CCParticleSystem_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("active", JSPROXY_CCParticleSystem_active, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("angle", JSPROXY_CCParticleSystem_angle, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("angleVar", JSPROXY_CCParticleSystem_angleVar, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("atlasIndex", JSPROXY_CCParticleSystem_atlasIndex, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("autoRemoveOnFinish", JSPROXY_CCParticleSystem_autoRemoveOnFinish, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("blendAdditive", JSPROXY_CCParticleSystem_blendAdditive, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("doesOpacityModifyRGB", JSPROXY_CCParticleSystem_doesOpacityModifyRGB, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("duration", JSPROXY_CCParticleSystem_duration, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("emissionRate", JSPROXY_CCParticleSystem_emissionRate, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("emitterMode", JSPROXY_CCParticleSystem_emitterMode, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("endRadius", JSPROXY_CCParticleSystem_endRadius, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("endRadiusVar", JSPROXY_CCParticleSystem_endRadiusVar, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("endSize", JSPROXY_CCParticleSystem_endSize, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("endSizeVar", JSPROXY_CCParticleSystem_endSizeVar, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("endSpin", JSPROXY_CCParticleSystem_endSpin, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("endSpinVar", JSPROXY_CCParticleSystem_endSpinVar, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("gravity", JSPROXY_CCParticleSystem_gravity, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithFile", JSPROXY_CCParticleSystem_initWithFile_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithTotalParticles", JSPROXY_CCParticleSystem_initWithTotalParticles_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("isFull", JSPROXY_CCParticleSystem_isFull, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("life", JSPROXY_CCParticleSystem_life, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("lifeVar", JSPROXY_CCParticleSystem_lifeVar, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("particleCount", JSPROXY_CCParticleSystem_particleCount, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("posVar", JSPROXY_CCParticleSystem_posVar, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("positionType", JSPROXY_CCParticleSystem_positionType, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("postStep", JSPROXY_CCParticleSystem_postStep, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("radialAccel", JSPROXY_CCParticleSystem_radialAccel, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("radialAccelVar", JSPROXY_CCParticleSystem_radialAccelVar, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("resetSystem", JSPROXY_CCParticleSystem_resetSystem, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("rotatePerSecond", JSPROXY_CCParticleSystem_rotatePerSecond, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("rotatePerSecondVar", JSPROXY_CCParticleSystem_rotatePerSecondVar, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setAngle", JSPROXY_CCParticleSystem_setAngle_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setAngleVar", JSPROXY_CCParticleSystem_setAngleVar_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setAtlasIndex", JSPROXY_CCParticleSystem_setAtlasIndex_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setAutoRemoveOnFinish", JSPROXY_CCParticleSystem_setAutoRemoveOnFinish_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setBlendAdditive", JSPROXY_CCParticleSystem_setBlendAdditive_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setBlendFunc", JSPROXY_CCParticleSystem_setBlendFunc_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setDuration", JSPROXY_CCParticleSystem_setDuration_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setEmissionRate", JSPROXY_CCParticleSystem_setEmissionRate_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setEmitterMode", JSPROXY_CCParticleSystem_setEmitterMode_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setEndColor", JSPROXY_CCParticleSystem_setEndColor_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setEndColorVar", JSPROXY_CCParticleSystem_setEndColorVar_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setEndRadius", JSPROXY_CCParticleSystem_setEndRadius_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setEndRadiusVar", JSPROXY_CCParticleSystem_setEndRadiusVar_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setEndSize", JSPROXY_CCParticleSystem_setEndSize_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setEndSizeVar", JSPROXY_CCParticleSystem_setEndSizeVar_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setEndSpin", JSPROXY_CCParticleSystem_setEndSpin_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setEndSpinVar", JSPROXY_CCParticleSystem_setEndSpinVar_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setGravity", JSPROXY_CCParticleSystem_setGravity_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setLife", JSPROXY_CCParticleSystem_setLife_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setLifeVar", JSPROXY_CCParticleSystem_setLifeVar_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setOpacityModifyRGB", JSPROXY_CCParticleSystem_setOpacityModifyRGB_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setPosVar", JSPROXY_CCParticleSystem_setPosVar_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setPositionType", JSPROXY_CCParticleSystem_setPositionType_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setRadialAccel", JSPROXY_CCParticleSystem_setRadialAccel_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setRadialAccelVar", JSPROXY_CCParticleSystem_setRadialAccelVar_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setRotatePerSecond", JSPROXY_CCParticleSystem_setRotatePerSecond_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setRotatePerSecondVar", JSPROXY_CCParticleSystem_setRotatePerSecondVar_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setSourcePosition", JSPROXY_CCParticleSystem_setSourcePosition_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setSpeed", JSPROXY_CCParticleSystem_setSpeed_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setSpeedVar", JSPROXY_CCParticleSystem_setSpeedVar_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setStartColor", JSPROXY_CCParticleSystem_setStartColor_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setStartColorVar", JSPROXY_CCParticleSystem_setStartColorVar_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setStartRadius", JSPROXY_CCParticleSystem_setStartRadius_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setStartRadiusVar", JSPROXY_CCParticleSystem_setStartRadiusVar_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setStartSize", JSPROXY_CCParticleSystem_setStartSize_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setStartSizeVar", JSPROXY_CCParticleSystem_setStartSizeVar_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setStartSpin", JSPROXY_CCParticleSystem_setStartSpin_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setStartSpinVar", JSPROXY_CCParticleSystem_setStartSpinVar_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setTangentialAccel", JSPROXY_CCParticleSystem_setTangentialAccel_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setTangentialAccelVar", JSPROXY_CCParticleSystem_setTangentialAccelVar_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setTotalParticles", JSPROXY_CCParticleSystem_setTotalParticles_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("sourcePosition", JSPROXY_CCParticleSystem_sourcePosition, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("speed", JSPROXY_CCParticleSystem_speed, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("speedVar", JSPROXY_CCParticleSystem_speedVar, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("startRadius", JSPROXY_CCParticleSystem_startRadius, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("startRadiusVar", JSPROXY_CCParticleSystem_startRadiusVar, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("startSize", JSPROXY_CCParticleSystem_startSize, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("startSizeVar", JSPROXY_CCParticleSystem_startSizeVar, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("startSpin", JSPROXY_CCParticleSystem_startSpin, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("startSpinVar", JSPROXY_CCParticleSystem_startSpinVar, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("stopSystem", JSPROXY_CCParticleSystem_stopSystem, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("tangentialAccel", JSPROXY_CCParticleSystem_tangentialAccel, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("tangentialAccelVar", JSPROXY_CCParticleSystem_tangentialAccelVar, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("totalParticles", JSPROXY_CCParticleSystem_totalParticles, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("update", JSPROXY_CCParticleSystem_update_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("updateWithNoTime", JSPROXY_CCParticleSystem_updateWithNoTime, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("particleWithFile", JSPROXY_CCParticleSystem_particleWithFile_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FS_END
	};

	JSPROXY_CCParticleSystem_object = JS_InitClass(cx, globalObj, JSPROXY_CCNode_object, JSPROXY_CCParticleSystem_class, JSPROXY_CCParticleSystem_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCParticleSystem
@synthesize jsObject = jsObject_;

@end

/*
 * CCParticleSystemQuad
 */
#pragma mark - CCParticleSystemQuad

JSClass* JSPROXY_CCParticleSystemQuad_class = NULL;
JSObject* JSPROXY_CCParticleSystemQuad_object = NULL;
 // Constructor
JSBool JSPROXY_CCParticleSystemQuad_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCParticleSystemQuad_class, JSPROXY_CCParticleSystemQuad_object, NULL);

    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCParticleSystemQuad_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCParticleSystemQuad *real= (JSPROXY_CCParticleSystemQuad*)JS_GetPrivate(obj);
	if (real)
		[real release];
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCParticleSystemQuad_initIndices(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCParticleSystemQuad *real = (JSPROXY_CCParticleSystemQuad*) JS_GetPrivate( jsthis );
	NSCAssert( real, @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[real initIndices ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

void JSPROXY_CCParticleSystemQuad_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCParticleSystemQuad_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCParticleSystemQuad_class->name = name;
	JSPROXY_CCParticleSystemQuad_class->addProperty = JS_PropertyStub;
	JSPROXY_CCParticleSystemQuad_class->delProperty = JS_PropertyStub;
	JSPROXY_CCParticleSystemQuad_class->getProperty = JS_PropertyStub;
	JSPROXY_CCParticleSystemQuad_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCParticleSystemQuad_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCParticleSystemQuad_class->resolve = JS_ResolveStub;
	JSPROXY_CCParticleSystemQuad_class->convert = JS_ConvertStub;
	JSPROXY_CCParticleSystemQuad_class->finalize = JSPROXY_CCParticleSystemQuad_finalize;
	JSPROXY_CCParticleSystemQuad_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("initIndices", JSPROXY_CCParticleSystemQuad_initIndices, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FS_END
	};

	JSPROXY_CCParticleSystemQuad_object = JS_InitClass(cx, globalObj, JSPROXY_CCParticleSystem_object, JSPROXY_CCParticleSystemQuad_class, JSPROXY_CCParticleSystemQuad_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCParticleSystemQuad
@synthesize jsObject = jsObject_;

@end

/*
 * CCRotateBy
 */
#pragma mark - CCRotateBy

JSClass* JSPROXY_CCRotateBy_class = NULL;
JSObject* JSPROXY_CCRotateBy_object = NULL;
 // Constructor
JSBool JSPROXY_CCRotateBy_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCRotateBy_class, JSPROXY_CCRotateBy_object, NULL);

    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCRotateBy_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCRotateBy *real= (JSPROXY_CCRotateBy*)JS_GetPrivate(obj);
	if (real)
		[real release];
}

// Arguments: ccTime, float
// Ret value: CCRotateBy
JSBool JSPROXY_CCRotateBy_actionWithDuration_angle_(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );
	double arg1; JS_ValueToNumber( cx, *argvp++, &arg1 );

	JSPROXY_CCRotateBy *real = [JSPROXY_CCRotateBy actionWithDuration:(ccTime)arg0 angle:(float)arg1  ];
	[real retain];

	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCRotateBy_class, JSPROXY_CCRotateBy_object, NULL);
	JS_SetPrivate(jsobj, real);
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: ccTime, float
// Ret value: None
JSBool JSPROXY_CCRotateBy_initWithDuration_angle_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_CCRotateBy *real = (JSPROXY_CCRotateBy*) JS_GetPrivate( jsthis );
	NSCAssert( !real, @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );
	double arg1; JS_ValueToNumber( cx, *argvp++, &arg1 );

	real = [[JSPROXY_CCRotateBy alloc] initWithDuration:(ccTime)arg0 angle:(float)arg1  ];
	JS_SetPrivate(jsthis, real);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

void JSPROXY_CCRotateBy_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCRotateBy_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCRotateBy_class->name = name;
	JSPROXY_CCRotateBy_class->addProperty = JS_PropertyStub;
	JSPROXY_CCRotateBy_class->delProperty = JS_PropertyStub;
	JSPROXY_CCRotateBy_class->getProperty = JS_PropertyStub;
	JSPROXY_CCRotateBy_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCRotateBy_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCRotateBy_class->resolve = JS_ResolveStub;
	JSPROXY_CCRotateBy_class->convert = JS_ConvertStub;
	JSPROXY_CCRotateBy_class->finalize = JSPROXY_CCRotateBy_finalize;
	JSPROXY_CCRotateBy_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("initWithDurationAngle", JSPROXY_CCRotateBy_initWithDuration_angle_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("actionWithDurationAngle", JSPROXY_CCRotateBy_actionWithDuration_angle_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FS_END
	};

	JSPROXY_CCRotateBy_object = JS_InitClass(cx, globalObj, JSPROXY_CCActionInterval_object, JSPROXY_CCRotateBy_class, JSPROXY_CCRotateBy_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCRotateBy
@synthesize jsObject = jsObject_;

@end
