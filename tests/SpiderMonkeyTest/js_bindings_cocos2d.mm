/*
* AUTOGENERATED FILE. DO NOT EDIT IT
* Generated by ../../tools/js/generate_spidermonkey_bindings.py on 2012-06-06
*/

// needed for callbacks from objective-c to JS
#import <objc/runtime.h>
#import "JRSwizzle.h"

#import "jstypedarray.h"
#import "ScriptingCore.h"   

#import "js_bindings_cocos2d.h"


/*
 * CCDirector
 */
#pragma mark - CCDirector

JSClass* JSPROXY_CCDirector_class = NULL;
JSObject* JSPROXY_CCDirector_object = NULL;
 // Constructor
JSBool JSPROXY_CCDirector_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCDirector createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCDirector_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCDirector *proxy = (JSPROXY_CCDirector*)JS_GetPrivate(obj);
	if (proxy) {
		objc_setAssociatedObject([proxy realObj], &JSPROXY_association_proxy_key, nil, OBJC_ASSOCIATION_ASSIGN);
		/* no callbacks */
		[proxy release];
	}
}

// Arguments: 
// Ret value: CCActionManager*
JSBool JSPROXY_CCDirector_actionManager(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CCActionManager* ret_val;

	CCDirector *real = (CCDirector*) [proxy realObj];
	ret_val = [real actionManager ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: NSTimeInterval
JSBool JSPROXY_CCDirector_animationInterval(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSTimeInterval ret_val;

	CCDirector *real = (CCDirector*) [proxy realObj];
	ret_val = [real animationInterval ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: CGPoint
// Ret value: CGPoint
JSBool JSPROXY_CCDirector_convertToGL_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	NSCAssert( JS_GetTypedArrayByteLength( tmp_arg0 ) == 8, @"Invalid length");
#ifdef __CC_PLATFORM_IOS
	CGPoint arg0 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg0 );
#elif defined(__CC_PLATFORM_MAC)
	float* arg0_array = (float*)JS_GetTypedArrayData( tmp_arg0 );
	CGPoint arg0 = ccp(arg0_array[0], arg0_array[1] );
#else
#error Unsupported Platform
#endif  
	CGPoint ret_val;

	CCDirector *real = (CCDirector*) [proxy realObj];
	ret_val = [real convertToGL:(CGPoint)arg0  ];

	jsval ret_jsval = CGPoint_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: CGPoint
// Ret value: CGPoint
JSBool JSPROXY_CCDirector_convertToUI_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	NSCAssert( JS_GetTypedArrayByteLength( tmp_arg0 ) == 8, @"Invalid length");
#ifdef __CC_PLATFORM_IOS
	CGPoint arg0 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg0 );
#elif defined(__CC_PLATFORM_MAC)
	float* arg0_array = (float*)JS_GetTypedArrayData( tmp_arg0 );
	CGPoint arg0 = ccp(arg0_array[0], arg0_array[1] );
#else
#error Unsupported Platform
#endif  
	CGPoint ret_val;

	CCDirector *real = (CCDirector*) [proxy realObj];
	ret_val = [real convertToUI:(CGPoint)arg0  ];

	jsval ret_jsval = CGPoint_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCDirector_createStatsLabel(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCDirector *real = (CCDirector*) [proxy realObj];
	[real createStatsLabel ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCDirector_displayStats(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CCDirector *real = (CCDirector*) [proxy realObj];
	ret_val = [real displayStats ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCDirector_drawScene(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCDirector *real = (CCDirector*) [proxy realObj];
	[real drawScene ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCDirector_end(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCDirector *real = (CCDirector*) [proxy realObj];
	[real end ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCDirector_getZEye(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CCDirector *real = (CCDirector*) [proxy realObj];
	ret_val = [real getZEye ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCDirector_isAnimating(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CCDirector *real = (CCDirector*) [proxy realObj];
	ret_val = [real isAnimating ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCDirector_isPaused(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CCDirector *real = (CCDirector*) [proxy realObj];
	ret_val = [real isPaused ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCDirector_nextDeltaTimeZero(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CCDirector *real = (CCDirector*) [proxy realObj];
	ret_val = [real nextDeltaTimeZero ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCDirector_pause(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCDirector *real = (CCDirector*) [proxy realObj];
	[real pause ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCDirector_popScene(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCDirector *real = (CCDirector*) [proxy realObj];
	[real popScene ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: ccDirectorProjection
JSBool JSPROXY_CCDirector_projection(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	ccDirectorProjection ret_val;

	CCDirector *real = (CCDirector*) [proxy realObj];
	ret_val = [real projection ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCDirector_purgeCachedData(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCDirector *real = (CCDirector*) [proxy realObj];
	[real purgeCachedData ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCScene*
// Ret value: None
JSBool JSPROXY_CCDirector_pushScene_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCScene* arg0 = (CCScene*) jsval_to_nsobject( *argvp++, cx);

	CCDirector *real = (CCDirector*) [proxy realObj];
	[real pushScene:(CCScene*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCScene*
// Ret value: None
JSBool JSPROXY_CCDirector_replaceScene_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCScene* arg0 = (CCScene*) jsval_to_nsobject( *argvp++, cx);

	CCDirector *real = (CCDirector*) [proxy realObj];
	[real replaceScene:(CCScene*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CGSize
// Ret value: None
JSBool JSPROXY_CCDirector_reshapeProjection_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	CGSize arg0 = *(CGSize*)JS_GetTypedArrayData( tmp_arg0);

	CCDirector *real = (CCDirector*) [proxy realObj];
	[real reshapeProjection:(CGSize)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCDirector_resume(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCDirector *real = (CCDirector*) [proxy realObj];
	[real resume ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCScene*
// Ret value: None
JSBool JSPROXY_CCDirector_runWithScene_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCScene* arg0 = (CCScene*) jsval_to_nsobject( *argvp++, cx);

	CCDirector *real = (CCDirector*) [proxy realObj];
	[real runWithScene:(CCScene*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: CCScene*
JSBool JSPROXY_CCDirector_runningScene(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CCScene* ret_val;

	CCDirector *real = (CCDirector*) [proxy realObj];
	ret_val = [real runningScene ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: CCScheduler*
JSBool JSPROXY_CCDirector_scheduler(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CCScheduler* ret_val;

	CCDirector *real = (CCDirector*) [proxy realObj];
	ret_val = [real scheduler ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: ccTime
JSBool JSPROXY_CCDirector_secondsPerFrame(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	ccTime ret_val;

	CCDirector *real = (CCDirector*) [proxy realObj];
	ret_val = [real secondsPerFrame ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCDirector_sendCleanupToScene(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CCDirector *real = (CCDirector*) [proxy realObj];
	ret_val = [real sendCleanupToScene ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: CCActionManager*
// Ret value: None
JSBool JSPROXY_CCDirector_setActionManager_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCActionManager* arg0 = (CCActionManager*) jsval_to_nsobject( *argvp++, cx);

	CCDirector *real = (CCDirector*) [proxy realObj];
	[real setActionManager:(CCActionManager*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCDirector_setAlphaBlending_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	CCDirector *real = (CCDirector*) [proxy realObj];
	[real setAlphaBlending:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSTimeInterval
// Ret value: None
JSBool JSPROXY_CCDirector_setAnimationInterval_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCDirector *real = (CCDirector*) [proxy realObj];
	[real setAnimationInterval:(NSTimeInterval)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCDirector_setDepthTest_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	CCDirector *real = (CCDirector*) [proxy realObj];
	[real setDepthTest:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCDirector_setDisplayStats_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	CCDirector *real = (CCDirector*) [proxy realObj];
	[real setDisplayStats:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCDirector_setGLDefaultValues(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCDirector *real = (CCDirector*) [proxy realObj];
	[real setGLDefaultValues ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCDirector_setNextDeltaTimeZero_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	CCDirector *real = (CCDirector*) [proxy realObj];
	[real setNextDeltaTimeZero:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: ccDirectorProjection
// Ret value: None
JSBool JSPROXY_CCDirector_setProjection_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	int32_t arg0; JS_ValueToECMAInt32( cx, *argvp++, &arg0 );

	CCDirector *real = (CCDirector*) [proxy realObj];
	[real setProjection:(ccDirectorProjection)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCScheduler*
// Ret value: None
JSBool JSPROXY_CCDirector_setScheduler_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCScheduler* arg0 = (CCScheduler*) jsval_to_nsobject( *argvp++, cx);

	CCDirector *real = (CCDirector*) [proxy realObj];
	[real setScheduler:(CCScheduler*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: CCDirector*
JSBool JSPROXY_CCDirector_sharedDirector_static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCDirector* ret_val = [CCDirector sharedDirector ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCDirector_startAnimation(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCDirector *real = (CCDirector*) [proxy realObj];
	[real startAnimation ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCDirector_stopAnimation(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCDirector *real = (CCDirector*) [proxy realObj];
	[real stopAnimation ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSUInteger
JSBool JSPROXY_CCDirector_totalFrames(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSUInteger ret_val;

	CCDirector *real = (CCDirector*) [proxy realObj];
	ret_val = [real totalFrames ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: CGSize
JSBool JSPROXY_CCDirector_winSize(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CGSize ret_val;

	CCDirector *real = (CCDirector*) [proxy realObj];
	ret_val = [real winSize ];

	jsval ret_jsval = CGSize_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: 
// Ret value: CGSize
JSBool JSPROXY_CCDirector_winSizeInPixels(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CGSize ret_val;

	CCDirector *real = (CCDirector*) [proxy realObj];
	ret_val = [real winSizeInPixels ];

	jsval ret_jsval = CGSize_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

void JSPROXY_CCDirector_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCDirector_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCDirector_class->name = name;
	JSPROXY_CCDirector_class->addProperty = JS_PropertyStub;
	JSPROXY_CCDirector_class->delProperty = JS_PropertyStub;
	JSPROXY_CCDirector_class->getProperty = JS_PropertyStub;
	JSPROXY_CCDirector_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCDirector_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCDirector_class->resolve = JS_ResolveStub;
	JSPROXY_CCDirector_class->convert = JS_ConvertStub;
	JSPROXY_CCDirector_class->finalize = JSPROXY_CCDirector_finalize;
	JSPROXY_CCDirector_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("actionManager", JSPROXY_CCDirector_actionManager, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("animationInterval", JSPROXY_CCDirector_animationInterval, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("convertToGL", JSPROXY_CCDirector_convertToGL_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("convertToUI", JSPROXY_CCDirector_convertToUI_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("createStatsLabel", JSPROXY_CCDirector_createStatsLabel, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("displayStats", JSPROXY_CCDirector_displayStats, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("drawScene", JSPROXY_CCDirector_drawScene, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("end", JSPROXY_CCDirector_end, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("getZEye", JSPROXY_CCDirector_getZEye, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("isAnimating", JSPROXY_CCDirector_isAnimating, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("isPaused", JSPROXY_CCDirector_isPaused, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("nextDeltaTimeZero", JSPROXY_CCDirector_nextDeltaTimeZero, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("pause", JSPROXY_CCDirector_pause, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("popScene", JSPROXY_CCDirector_popScene, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("projection", JSPROXY_CCDirector_projection, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("purgeCachedData", JSPROXY_CCDirector_purgeCachedData, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("pushScene", JSPROXY_CCDirector_pushScene_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("replaceScene", JSPROXY_CCDirector_replaceScene_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("reshapeProjection", JSPROXY_CCDirector_reshapeProjection_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("resume", JSPROXY_CCDirector_resume, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("runWithScene", JSPROXY_CCDirector_runWithScene_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("runningScene", JSPROXY_CCDirector_runningScene, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("scheduler", JSPROXY_CCDirector_scheduler, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("secondsPerFrame", JSPROXY_CCDirector_secondsPerFrame, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("sendCleanupToScene", JSPROXY_CCDirector_sendCleanupToScene, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setActionManager", JSPROXY_CCDirector_setActionManager_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setAlphaBlending", JSPROXY_CCDirector_setAlphaBlending_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setAnimationInterval", JSPROXY_CCDirector_setAnimationInterval_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setDepthTest", JSPROXY_CCDirector_setDepthTest_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setDisplayStats", JSPROXY_CCDirector_setDisplayStats_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setGLDefaultValues", JSPROXY_CCDirector_setGLDefaultValues, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setNextDeltaTimeZero", JSPROXY_CCDirector_setNextDeltaTimeZero_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setProjection", JSPROXY_CCDirector_setProjection_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setScheduler", JSPROXY_CCDirector_setScheduler_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("startAnimation", JSPROXY_CCDirector_startAnimation, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("stopAnimation", JSPROXY_CCDirector_stopAnimation, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("totalFrames", JSPROXY_CCDirector_totalFrames, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("winSize", JSPROXY_CCDirector_winSize, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("winSizeInPixels", JSPROXY_CCDirector_winSizeInPixels, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("sharedDirector", JSPROXY_CCDirector_sharedDirector_static, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};

	JSPROXY_CCDirector_object = JS_InitClass(cx, globalObj, JSPROXY_NSObject_object, JSPROXY_CCDirector_class, JSPROXY_CCDirector_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCDirector

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCDirector_class, JSPROXY_CCDirector_object, NULL);
	JSPROXY_CCDirector *proxy = [[JSPROXY_CCDirector alloc] initWithJSObject:jsobj];
	[proxy setRealObj:realObj];
	JS_SetPrivate(jsobj, proxy);

	if( realObj )
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCAction
 */
#pragma mark - CCAction

JSClass* JSPROXY_CCAction_class = NULL;
JSObject* JSPROXY_CCAction_object = NULL;
 // Constructor
JSBool JSPROXY_CCAction_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCAction createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCAction_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCAction *proxy = (JSPROXY_CCAction*)JS_GetPrivate(obj);
	if (proxy) {
		objc_setAssociatedObject([proxy realObj], &JSPROXY_association_proxy_key, nil, OBJC_ASSOCIATION_ASSIGN);
		/* no callbacks */
		[proxy release];
	}
}

// Arguments: 
// Ret value: CCAction
JSBool JSPROXY_CCAction_action_static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCAction *ret_val = [CCAction action ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCAction_init(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCAction *real = [[CCAction alloc] init ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCAction_isDone(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CCAction *real = (CCAction*) [proxy realObj];
	ret_val = [real isDone ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: NSInteger
// Ret value: None
JSBool JSPROXY_CCAction_setTag_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	int32_t arg0; JS_ValueToECMAInt32( cx, *argvp++, &arg0 );

	CCAction *real = (CCAction*) [proxy realObj];
	[real setTag:(NSInteger)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: ccTime
// Ret value: None
JSBool JSPROXY_CCAction_step_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCAction *real = (CCAction*) [proxy realObj];
	[real step:(ccTime)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCAction_stop(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCAction *real = (CCAction*) [proxy realObj];
	[real stop ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSInteger
JSBool JSPROXY_CCAction_tag(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSInteger ret_val;

	CCAction *real = (CCAction*) [proxy realObj];
	ret_val = [real tag ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: ccTime
// Ret value: None
JSBool JSPROXY_CCAction_update_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCAction *real = (CCAction*) [proxy realObj];
	[real update:(ccTime)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

void JSPROXY_CCAction_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCAction_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCAction_class->name = name;
	JSPROXY_CCAction_class->addProperty = JS_PropertyStub;
	JSPROXY_CCAction_class->delProperty = JS_PropertyStub;
	JSPROXY_CCAction_class->getProperty = JS_PropertyStub;
	JSPROXY_CCAction_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCAction_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCAction_class->resolve = JS_ResolveStub;
	JSPROXY_CCAction_class->convert = JS_ConvertStub;
	JSPROXY_CCAction_class->finalize = JSPROXY_CCAction_finalize;
	JSPROXY_CCAction_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("init", JSPROXY_CCAction_init, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("isDone", JSPROXY_CCAction_isDone, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setTag", JSPROXY_CCAction_setTag_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("step", JSPROXY_CCAction_step_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("stop", JSPROXY_CCAction_stop, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("tag", JSPROXY_CCAction_tag, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("update", JSPROXY_CCAction_update_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("action", JSPROXY_CCAction_action_static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FS_END
	};

	JSPROXY_CCAction_object = JS_InitClass(cx, globalObj, JSPROXY_NSObject_object, JSPROXY_CCAction_class, JSPROXY_CCAction_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCAction

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCAction_class, JSPROXY_CCAction_object, NULL);
	JSPROXY_CCAction *proxy = [[JSPROXY_CCAction alloc] initWithJSObject:jsobj];
	[proxy setRealObj:realObj];
	JS_SetPrivate(jsobj, proxy);

	if( realObj )
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCFiniteTimeAction
 */
#pragma mark - CCFiniteTimeAction

JSClass* JSPROXY_CCFiniteTimeAction_class = NULL;
JSObject* JSPROXY_CCFiniteTimeAction_object = NULL;
 // Constructor
JSBool JSPROXY_CCFiniteTimeAction_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCFiniteTimeAction createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCFiniteTimeAction_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCFiniteTimeAction *proxy = (JSPROXY_CCFiniteTimeAction*)JS_GetPrivate(obj);
	if (proxy) {
		objc_setAssociatedObject([proxy realObj], &JSPROXY_association_proxy_key, nil, OBJC_ASSOCIATION_ASSIGN);
		/* no callbacks */
		[proxy release];
	}
}

// Arguments: 
// Ret value: ccTime
JSBool JSPROXY_CCFiniteTimeAction_duration(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	ccTime ret_val;

	CCFiniteTimeAction *real = (CCFiniteTimeAction*) [proxy realObj];
	ret_val = [real duration ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: CCFiniteTimeAction*
JSBool JSPROXY_CCFiniteTimeAction_reverse(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CCFiniteTimeAction* ret_val;

	CCFiniteTimeAction *real = (CCFiniteTimeAction*) [proxy realObj];
	ret_val = [real reverse ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: ccTime
// Ret value: None
JSBool JSPROXY_CCFiniteTimeAction_setDuration_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCFiniteTimeAction *real = (CCFiniteTimeAction*) [proxy realObj];
	[real setDuration:(ccTime)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

void JSPROXY_CCFiniteTimeAction_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCFiniteTimeAction_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCFiniteTimeAction_class->name = name;
	JSPROXY_CCFiniteTimeAction_class->addProperty = JS_PropertyStub;
	JSPROXY_CCFiniteTimeAction_class->delProperty = JS_PropertyStub;
	JSPROXY_CCFiniteTimeAction_class->getProperty = JS_PropertyStub;
	JSPROXY_CCFiniteTimeAction_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCFiniteTimeAction_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCFiniteTimeAction_class->resolve = JS_ResolveStub;
	JSPROXY_CCFiniteTimeAction_class->convert = JS_ConvertStub;
	JSPROXY_CCFiniteTimeAction_class->finalize = JSPROXY_CCFiniteTimeAction_finalize;
	JSPROXY_CCFiniteTimeAction_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("duration", JSPROXY_CCFiniteTimeAction_duration, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("reverse", JSPROXY_CCFiniteTimeAction_reverse, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setDuration", JSPROXY_CCFiniteTimeAction_setDuration_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FS_END
	};

	JSPROXY_CCFiniteTimeAction_object = JS_InitClass(cx, globalObj, JSPROXY_CCAction_object, JSPROXY_CCFiniteTimeAction_class, JSPROXY_CCFiniteTimeAction_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCFiniteTimeAction

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCFiniteTimeAction_class, JSPROXY_CCFiniteTimeAction_object, NULL);
	JSPROXY_CCFiniteTimeAction *proxy = [[JSPROXY_CCFiniteTimeAction alloc] initWithJSObject:jsobj];
	[proxy setRealObj:realObj];
	JS_SetPrivate(jsobj, proxy);

	if( realObj )
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCActionInterval
 */
#pragma mark - CCActionInterval

JSClass* JSPROXY_CCActionInterval_class = NULL;
JSObject* JSPROXY_CCActionInterval_object = NULL;
 // Constructor
JSBool JSPROXY_CCActionInterval_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCActionInterval createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCActionInterval_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCActionInterval *proxy = (JSPROXY_CCActionInterval*)JS_GetPrivate(obj);
	if (proxy) {
		objc_setAssociatedObject([proxy realObj], &JSPROXY_association_proxy_key, nil, OBJC_ASSOCIATION_ASSIGN);
		/* no callbacks */
		[proxy release];
	}
}

// Arguments: ccTime
// Ret value: CCActionInterval
JSBool JSPROXY_CCActionInterval_actionWithDuration__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCActionInterval *ret_val = [CCActionInterval actionWithDuration:(ccTime)arg0  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: ccTime
JSBool JSPROXY_CCActionInterval_elapsed(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	ccTime ret_val;

	CCActionInterval *real = (CCActionInterval*) [proxy realObj];
	ret_val = [real elapsed ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: ccTime
// Ret value: None
JSBool JSPROXY_CCActionInterval_initWithDuration_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCActionInterval *real = [[CCActionInterval alloc] initWithDuration:(ccTime)arg0  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCActionInterval_isDone(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CCActionInterval *real = (CCActionInterval*) [proxy realObj];
	ret_val = [real isDone ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: CCActionInterval*
JSBool JSPROXY_CCActionInterval_reverse(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CCActionInterval* ret_val;

	CCActionInterval *real = (CCActionInterval*) [proxy realObj];
	ret_val = [real reverse ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

void JSPROXY_CCActionInterval_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCActionInterval_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCActionInterval_class->name = name;
	JSPROXY_CCActionInterval_class->addProperty = JS_PropertyStub;
	JSPROXY_CCActionInterval_class->delProperty = JS_PropertyStub;
	JSPROXY_CCActionInterval_class->getProperty = JS_PropertyStub;
	JSPROXY_CCActionInterval_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCActionInterval_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCActionInterval_class->resolve = JS_ResolveStub;
	JSPROXY_CCActionInterval_class->convert = JS_ConvertStub;
	JSPROXY_CCActionInterval_class->finalize = JSPROXY_CCActionInterval_finalize;
	JSPROXY_CCActionInterval_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("elapsed", JSPROXY_CCActionInterval_elapsed, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithDuration", JSPROXY_CCActionInterval_initWithDuration_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("isDone", JSPROXY_CCActionInterval_isDone, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("reverse", JSPROXY_CCActionInterval_reverse, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("actionWithDuration", JSPROXY_CCActionInterval_actionWithDuration__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FS_END
	};

	JSPROXY_CCActionInterval_object = JS_InitClass(cx, globalObj, JSPROXY_CCFiniteTimeAction_object, JSPROXY_CCActionInterval_class, JSPROXY_CCActionInterval_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCActionInterval

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCActionInterval_class, JSPROXY_CCActionInterval_object, NULL);
	JSPROXY_CCActionInterval *proxy = [[JSPROXY_CCActionInterval alloc] initWithJSObject:jsobj];
	[proxy setRealObj:realObj];
	JS_SetPrivate(jsobj, proxy);

	if( realObj )
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCRepeat
 */
#pragma mark - CCRepeat

JSClass* JSPROXY_CCRepeat_class = NULL;
JSObject* JSPROXY_CCRepeat_object = NULL;
 // Constructor
JSBool JSPROXY_CCRepeat_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCRepeat createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCRepeat_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCRepeat *proxy = (JSPROXY_CCRepeat*)JS_GetPrivate(obj);
	if (proxy) {
		objc_setAssociatedObject([proxy realObj], &JSPROXY_association_proxy_key, nil, OBJC_ASSOCIATION_ASSIGN);
		/* no callbacks */
		[proxy release];
	}
}

// Arguments: CCFiniteTimeAction*, NSUInteger
// Ret value: CCRepeat
JSBool JSPROXY_CCRepeat_actionWithAction_times__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCFiniteTimeAction* arg0 = (CCFiniteTimeAction*) jsval_to_nsobject( *argvp++, cx);
	uint32_t arg1; JS_ValueToECMAUint32( cx, *argvp++, &arg1 );

	CCRepeat *ret_val = [CCRepeat actionWithAction:(CCFiniteTimeAction*)arg0 times:(NSUInteger)arg1  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: CCFiniteTimeAction*, NSUInteger
// Ret value: None
JSBool JSPROXY_CCRepeat_initWithAction_times_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCFiniteTimeAction* arg0 = (CCFiniteTimeAction*) jsval_to_nsobject( *argvp++, cx);
	uint32_t arg1; JS_ValueToECMAUint32( cx, *argvp++, &arg1 );

	CCRepeat *real = [[CCRepeat alloc] initWithAction:(CCFiniteTimeAction*)arg0 times:(NSUInteger)arg1  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: CCFiniteTimeAction*
JSBool JSPROXY_CCRepeat_innerAction(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CCFiniteTimeAction* ret_val;

	CCRepeat *real = (CCRepeat*) [proxy realObj];
	ret_val = [real innerAction ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: CCFiniteTimeAction*
// Ret value: None
JSBool JSPROXY_CCRepeat_setInnerAction_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCFiniteTimeAction* arg0 = (CCFiniteTimeAction*) jsval_to_nsobject( *argvp++, cx);

	CCRepeat *real = (CCRepeat*) [proxy realObj];
	[real setInnerAction:(CCFiniteTimeAction*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

void JSPROXY_CCRepeat_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCRepeat_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCRepeat_class->name = name;
	JSPROXY_CCRepeat_class->addProperty = JS_PropertyStub;
	JSPROXY_CCRepeat_class->delProperty = JS_PropertyStub;
	JSPROXY_CCRepeat_class->getProperty = JS_PropertyStub;
	JSPROXY_CCRepeat_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCRepeat_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCRepeat_class->resolve = JS_ResolveStub;
	JSPROXY_CCRepeat_class->convert = JS_ConvertStub;
	JSPROXY_CCRepeat_class->finalize = JSPROXY_CCRepeat_finalize;
	JSPROXY_CCRepeat_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("initWithActionTimes", JSPROXY_CCRepeat_initWithAction_times_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("innerAction", JSPROXY_CCRepeat_innerAction, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setInnerAction", JSPROXY_CCRepeat_setInnerAction_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("actionWithActionTimes", JSPROXY_CCRepeat_actionWithAction_times__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FS_END
	};

	JSPROXY_CCRepeat_object = JS_InitClass(cx, globalObj, JSPROXY_CCActionInterval_object, JSPROXY_CCRepeat_class, JSPROXY_CCRepeat_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCRepeat

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCRepeat_class, JSPROXY_CCRepeat_object, NULL);
	JSPROXY_CCRepeat *proxy = [[JSPROXY_CCRepeat alloc] initWithJSObject:jsobj];
	[proxy setRealObj:realObj];
	JS_SetPrivate(jsobj, proxy);

	if( realObj )
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCNode
 */
#pragma mark - CCNode

JSClass* JSPROXY_CCNode_class = NULL;
JSObject* JSPROXY_CCNode_object = NULL;
 // Constructor
JSBool JSPROXY_CCNode_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCNode createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCNode_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCNode *proxy = (JSPROXY_CCNode*)JS_GetPrivate(obj);
	if (proxy) {
		objc_setAssociatedObject([proxy realObj], &JSPROXY_association_proxy_key, nil, OBJC_ASSOCIATION_ASSIGN);
		/* no callbacks */
		[proxy release];
	}
}

// Arguments: 
// Ret value: CCActionManager*
JSBool JSPROXY_CCNode_actionManager(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CCActionManager* ret_val;

	CCNode *real = (CCNode*) [proxy realObj];
	ret_val = [real actionManager ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: CCNode*
// Ret value: None
JSBool JSPROXY_CCNode_addChild_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCNode* arg0 = (CCNode*) jsval_to_nsobject( *argvp++, cx);

	CCNode *real = (CCNode*) [proxy realObj];
	[real addChild:(CCNode*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCNode*, NSInteger
// Ret value: None
JSBool JSPROXY_CCNode_addChild_z_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCNode* arg0 = (CCNode*) jsval_to_nsobject( *argvp++, cx);
	int32_t arg1; JS_ValueToECMAInt32( cx, *argvp++, &arg1 );

	CCNode *real = (CCNode*) [proxy realObj];
	[real addChild:(CCNode*)arg0 z:(NSInteger)arg1  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCNode*, NSInteger, NSInteger
// Ret value: None
JSBool JSPROXY_CCNode_addChild_z_tag_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 3, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCNode* arg0 = (CCNode*) jsval_to_nsobject( *argvp++, cx);
	int32_t arg1; JS_ValueToECMAInt32( cx, *argvp++, &arg1 );
	int32_t arg2; JS_ValueToECMAInt32( cx, *argvp++, &arg2 );

	CCNode *real = (CCNode*) [proxy realObj];
	[real addChild:(CCNode*)arg0 z:(NSInteger)arg1 tag:(NSInteger)arg2  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: CGPoint
JSBool JSPROXY_CCNode_anchorPoint(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CGPoint ret_val;

	CCNode *real = (CCNode*) [proxy realObj];
	ret_val = [real anchorPoint ];

	jsval ret_jsval = CGPoint_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: 
// Ret value: CGPoint
JSBool JSPROXY_CCNode_anchorPointInPoints(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CGPoint ret_val;

	CCNode *real = (CCNode*) [proxy realObj];
	ret_val = [real anchorPointInPoints ];

	jsval ret_jsval = CGPoint_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_cleanup(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCNode *real = (CCNode*) [proxy realObj];
	[real cleanup ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: CGSize
JSBool JSPROXY_CCNode_contentSize(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CGSize ret_val;

	CCNode *real = (CCNode*) [proxy realObj];
	ret_val = [real contentSize ];

	jsval ret_jsval = CGSize_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: CGPoint
// Ret value: CGPoint
JSBool JSPROXY_CCNode_convertToNodeSpace_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	NSCAssert( JS_GetTypedArrayByteLength( tmp_arg0 ) == 8, @"Invalid length");
#ifdef __CC_PLATFORM_IOS
	CGPoint arg0 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg0 );
#elif defined(__CC_PLATFORM_MAC)
	float* arg0_array = (float*)JS_GetTypedArrayData( tmp_arg0 );
	CGPoint arg0 = ccp(arg0_array[0], arg0_array[1] );
#else
#error Unsupported Platform
#endif  
	CGPoint ret_val;

	CCNode *real = (CCNode*) [proxy realObj];
	ret_val = [real convertToNodeSpace:(CGPoint)arg0  ];

	jsval ret_jsval = CGPoint_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: CGPoint
// Ret value: CGPoint
JSBool JSPROXY_CCNode_convertToNodeSpaceAR_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	NSCAssert( JS_GetTypedArrayByteLength( tmp_arg0 ) == 8, @"Invalid length");
#ifdef __CC_PLATFORM_IOS
	CGPoint arg0 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg0 );
#elif defined(__CC_PLATFORM_MAC)
	float* arg0_array = (float*)JS_GetTypedArrayData( tmp_arg0 );
	CGPoint arg0 = ccp(arg0_array[0], arg0_array[1] );
#else
#error Unsupported Platform
#endif  
	CGPoint ret_val;

	CCNode *real = (CCNode*) [proxy realObj];
	ret_val = [real convertToNodeSpaceAR:(CGPoint)arg0  ];

	jsval ret_jsval = CGPoint_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: CGPoint
// Ret value: CGPoint
JSBool JSPROXY_CCNode_convertToWorldSpace_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	NSCAssert( JS_GetTypedArrayByteLength( tmp_arg0 ) == 8, @"Invalid length");
#ifdef __CC_PLATFORM_IOS
	CGPoint arg0 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg0 );
#elif defined(__CC_PLATFORM_MAC)
	float* arg0_array = (float*)JS_GetTypedArrayData( tmp_arg0 );
	CGPoint arg0 = ccp(arg0_array[0], arg0_array[1] );
#else
#error Unsupported Platform
#endif  
	CGPoint ret_val;

	CCNode *real = (CCNode*) [proxy realObj];
	ret_val = [real convertToWorldSpace:(CGPoint)arg0  ];

	jsval ret_jsval = CGPoint_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: CGPoint
// Ret value: CGPoint
JSBool JSPROXY_CCNode_convertToWorldSpaceAR_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	NSCAssert( JS_GetTypedArrayByteLength( tmp_arg0 ) == 8, @"Invalid length");
#ifdef __CC_PLATFORM_IOS
	CGPoint arg0 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg0 );
#elif defined(__CC_PLATFORM_MAC)
	float* arg0_array = (float*)JS_GetTypedArrayData( tmp_arg0 );
	CGPoint arg0 = ccp(arg0_array[0], arg0_array[1] );
#else
#error Unsupported Platform
#endif  
	CGPoint ret_val;

	CCNode *real = (CCNode*) [proxy realObj];
	ret_val = [real convertToWorldSpaceAR:(CGPoint)arg0  ];

	jsval ret_jsval = CGPoint_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_draw(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCNode *real = (CCNode*) [proxy realObj];
	[real draw ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSInteger
// Ret value: CCAction*
JSBool JSPROXY_CCNode_getActionByTag_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	int32_t arg0; JS_ValueToECMAInt32( cx, *argvp++, &arg0 );
	CCAction* ret_val;

	CCNode *real = (CCNode*) [proxy realObj];
	ret_val = [real getActionByTag:(NSInteger)arg0  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: NSInteger
// Ret value: CCNode*
JSBool JSPROXY_CCNode_getChildByTag_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	int32_t arg0; JS_ValueToECMAInt32( cx, *argvp++, &arg0 );
	CCNode* ret_val;

	CCNode *real = (CCNode*) [proxy realObj];
	ret_val = [real getChildByTag:(NSInteger)arg0  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: ccGLServerState
JSBool JSPROXY_CCNode_glServerState(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	ccGLServerState ret_val;

	CCNode *real = (CCNode*) [proxy realObj];
	ret_val = [real glServerState ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCNode_ignoreAnchorPointForPosition(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CCNode *real = (CCNode*) [proxy realObj];
	ret_val = [real ignoreAnchorPointForPosition ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_init(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCNode *real = [[CCNode alloc] init ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCNode_isRunning(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CCNode *real = (CCNode*) [proxy realObj];
	ret_val = [real isRunning ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: CCNode
JSBool JSPROXY_CCNode_node_static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCNode *ret_val = [CCNode node ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: NSUInteger
JSBool JSPROXY_CCNode_numberOfRunningActions(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSUInteger ret_val;

	CCNode *real = (CCNode*) [proxy realObj];
	ret_val = [real numberOfRunningActions ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCNode *real = (CCNode*) [proxy realObj];
	[real onEnterTransitionDidFinish ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCNode *real = (CCNode*) [proxy realObj];
	[real onExitTransitionDidStart ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSUInteger
JSBool JSPROXY_CCNode_orderOfArrival(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSUInteger ret_val;

	CCNode *real = (CCNode*) [proxy realObj];
	ret_val = [real orderOfArrival ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: CCNode*
JSBool JSPROXY_CCNode_parent(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CCNode* ret_val;

	CCNode *real = (CCNode*) [proxy realObj];
	ret_val = [real parent ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_pauseSchedulerAndActions(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCNode *real = (CCNode*) [proxy realObj];
	[real pauseSchedulerAndActions ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: CGPoint
JSBool JSPROXY_CCNode_position(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CGPoint ret_val;

	CCNode *real = (CCNode*) [proxy realObj];
	ret_val = [real position ];

	jsval ret_jsval = CGPoint_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCNode_removeAllChildrenWithCleanup_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	CCNode *real = (CCNode*) [proxy realObj];
	[real removeAllChildrenWithCleanup:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCNode*, BOOL
// Ret value: None
JSBool JSPROXY_CCNode_removeChild_cleanup_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCNode* arg0 = (CCNode*) jsval_to_nsobject( *argvp++, cx);
	JSBool arg1; JS_ValueToBoolean( cx, *argvp++, &arg1 );

	CCNode *real = (CCNode*) [proxy realObj];
	[real removeChild:(CCNode*)arg0 cleanup:(BOOL)arg1  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSInteger, BOOL
// Ret value: None
JSBool JSPROXY_CCNode_removeChildByTag_cleanup_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	int32_t arg0; JS_ValueToECMAInt32( cx, *argvp++, &arg0 );
	JSBool arg1; JS_ValueToBoolean( cx, *argvp++, &arg1 );

	CCNode *real = (CCNode*) [proxy realObj];
	[real removeChildByTag:(NSInteger)arg0 cleanup:(BOOL)arg1  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCNode_removeFromParentAndCleanup_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	CCNode *real = (CCNode*) [proxy realObj];
	[real removeFromParentAndCleanup:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCNode*, NSInteger
// Ret value: None
JSBool JSPROXY_CCNode_reorderChild_z_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCNode* arg0 = (CCNode*) jsval_to_nsobject( *argvp++, cx);
	int32_t arg1; JS_ValueToECMAInt32( cx, *argvp++, &arg1 );

	CCNode *real = (CCNode*) [proxy realObj];
	[real reorderChild:(CCNode*)arg0 z:(NSInteger)arg1  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_resumeSchedulerAndActions(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCNode *real = (CCNode*) [proxy realObj];
	[real resumeSchedulerAndActions ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCNode_rotation(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CCNode *real = (CCNode*) [proxy realObj];
	ret_val = [real rotation ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: CCAction*
// Ret value: CCAction*
JSBool JSPROXY_CCNode_runAction_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCAction* arg0 = (CCAction*) jsval_to_nsobject( *argvp++, cx);
	CCAction* ret_val;

	CCNode *real = (CCNode*) [proxy realObj];
	ret_val = [real runAction:(CCAction*)arg0  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCNode_scale(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CCNode *real = (CCNode*) [proxy realObj];
	ret_val = [real scale ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCNode_scaleX(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CCNode *real = (CCNode*) [proxy realObj];
	ret_val = [real scaleX ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCNode_scaleY(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CCNode *real = (CCNode*) [proxy realObj];
	ret_val = [real scaleY ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_scheduleUpdate(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCNode *real = (CCNode*) [proxy realObj];
	[real scheduleUpdate ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSInteger
// Ret value: None
JSBool JSPROXY_CCNode_scheduleUpdateWithPriority_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	int32_t arg0; JS_ValueToECMAInt32( cx, *argvp++, &arg0 );

	CCNode *real = (CCNode*) [proxy realObj];
	[real scheduleUpdateWithPriority:(NSInteger)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: CCScheduler*
JSBool JSPROXY_CCNode_scheduler(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CCScheduler* ret_val;

	CCNode *real = (CCNode*) [proxy realObj];
	ret_val = [real scheduler ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: CCActionManager*
// Ret value: None
JSBool JSPROXY_CCNode_setActionManager_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCActionManager* arg0 = (CCActionManager*) jsval_to_nsobject( *argvp++, cx);

	CCNode *real = (CCNode*) [proxy realObj];
	[real setActionManager:(CCActionManager*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CGPoint
// Ret value: None
JSBool JSPROXY_CCNode_setAnchorPoint_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	NSCAssert( JS_GetTypedArrayByteLength( tmp_arg0 ) == 8, @"Invalid length");
#ifdef __CC_PLATFORM_IOS
	CGPoint arg0 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg0 );
#elif defined(__CC_PLATFORM_MAC)
	float* arg0_array = (float*)JS_GetTypedArrayData( tmp_arg0 );
	CGPoint arg0 = ccp(arg0_array[0], arg0_array[1] );
#else
#error Unsupported Platform
#endif  

	CCNode *real = (CCNode*) [proxy realObj];
	[real setAnchorPoint:(CGPoint)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CGSize
// Ret value: None
JSBool JSPROXY_CCNode_setContentSize_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	CGSize arg0 = *(CGSize*)JS_GetTypedArrayData( tmp_arg0);

	CCNode *real = (CCNode*) [proxy realObj];
	[real setContentSize:(CGSize)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: ccGLServerState
// Ret value: None
JSBool JSPROXY_CCNode_setGlServerState_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	int32_t arg0; JS_ValueToECMAInt32( cx, *argvp++, &arg0 );

	CCNode *real = (CCNode*) [proxy realObj];
	[real setGlServerState:(ccGLServerState)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCNode_setIgnoreAnchorPointForPosition_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	CCNode *real = (CCNode*) [proxy realObj];
	[real setIgnoreAnchorPointForPosition:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSUInteger
// Ret value: None
JSBool JSPROXY_CCNode_setOrderOfArrival_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	uint32_t arg0; JS_ValueToECMAUint32( cx, *argvp++, &arg0 );

	CCNode *real = (CCNode*) [proxy realObj];
	[real setOrderOfArrival:(NSUInteger)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCNode*
// Ret value: None
JSBool JSPROXY_CCNode_setParent_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCNode* arg0 = (CCNode*) jsval_to_nsobject( *argvp++, cx);

	CCNode *real = (CCNode*) [proxy realObj];
	[real setParent:(CCNode*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CGPoint
// Ret value: None
JSBool JSPROXY_CCNode_setPosition_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	NSCAssert( JS_GetTypedArrayByteLength( tmp_arg0 ) == 8, @"Invalid length");
#ifdef __CC_PLATFORM_IOS
	CGPoint arg0 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg0 );
#elif defined(__CC_PLATFORM_MAC)
	float* arg0_array = (float*)JS_GetTypedArrayData( tmp_arg0 );
	CGPoint arg0 = ccp(arg0_array[0], arg0_array[1] );
#else
#error Unsupported Platform
#endif  

	CCNode *real = (CCNode*) [proxy realObj];
	[real setPosition:(CGPoint)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCNode_setRotation_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCNode *real = (CCNode*) [proxy realObj];
	[real setRotation:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCNode_setScale_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCNode *real = (CCNode*) [proxy realObj];
	[real setScale:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCNode_setScaleX_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCNode *real = (CCNode*) [proxy realObj];
	[real setScaleX:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCNode_setScaleY_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCNode *real = (CCNode*) [proxy realObj];
	[real setScaleY:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCScheduler*
// Ret value: None
JSBool JSPROXY_CCNode_setScheduler_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCScheduler* arg0 = (CCScheduler*) jsval_to_nsobject( *argvp++, cx);

	CCNode *real = (CCNode*) [proxy realObj];
	[real setScheduler:(CCScheduler*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCNode_setSkewX_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCNode *real = (CCNode*) [proxy realObj];
	[real setSkewX:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCNode_setSkewY_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCNode *real = (CCNode*) [proxy realObj];
	[real setSkewY:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSInteger
// Ret value: None
JSBool JSPROXY_CCNode_setTag_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	int32_t arg0; JS_ValueToECMAInt32( cx, *argvp++, &arg0 );

	CCNode *real = (CCNode*) [proxy realObj];
	[real setTag:(NSInteger)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCNode_setVertexZ_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCNode *real = (CCNode*) [proxy realObj];
	[real setVertexZ:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCNode_setVisible_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	CCNode *real = (CCNode*) [proxy realObj];
	[real setVisible:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSUInteger
// Ret value: None
JSBool JSPROXY_CCNode_setZOrder_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	uint32_t arg0; JS_ValueToECMAUint32( cx, *argvp++, &arg0 );

	CCNode *real = (CCNode*) [proxy realObj];
	[real setZOrder:(NSUInteger)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCNode_skewX(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CCNode *real = (CCNode*) [proxy realObj];
	ret_val = [real skewX ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCNode_skewY(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CCNode *real = (CCNode*) [proxy realObj];
	ret_val = [real skewY ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_sortAllChildren(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCNode *real = (CCNode*) [proxy realObj];
	[real sortAllChildren ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCAction*
// Ret value: None
JSBool JSPROXY_CCNode_stopAction_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCAction* arg0 = (CCAction*) jsval_to_nsobject( *argvp++, cx);

	CCNode *real = (CCNode*) [proxy realObj];
	[real stopAction:(CCAction*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSInteger
// Ret value: None
JSBool JSPROXY_CCNode_stopActionByTag_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	int32_t arg0; JS_ValueToECMAInt32( cx, *argvp++, &arg0 );

	CCNode *real = (CCNode*) [proxy realObj];
	[real stopActionByTag:(NSInteger)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_stopAllActions(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCNode *real = (CCNode*) [proxy realObj];
	[real stopAllActions ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSInteger
JSBool JSPROXY_CCNode_tag(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSInteger ret_val;

	CCNode *real = (CCNode*) [proxy realObj];
	ret_val = [real tag ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_transform(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCNode *real = (CCNode*) [proxy realObj];
	[real transform ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_transformAncestors(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCNode *real = (CCNode*) [proxy realObj];
	[real transformAncestors ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_unscheduleAllSelectors(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCNode *real = (CCNode*) [proxy realObj];
	[real unscheduleAllSelectors ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_unscheduleUpdate(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCNode *real = (CCNode*) [proxy realObj];
	[real unscheduleUpdate ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCNode_vertexZ(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CCNode *real = (CCNode*) [proxy realObj];
	ret_val = [real vertexZ ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCNode_visible(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CCNode *real = (CCNode*) [proxy realObj];
	ret_val = [real visible ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCNode_visit(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCNode *real = (CCNode*) [proxy realObj];
	[real visit ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSInteger
JSBool JSPROXY_CCNode_zOrder(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSInteger ret_val;

	CCNode *real = (CCNode*) [proxy realObj];
	ret_val = [real zOrder ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

void JSPROXY_CCNode_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCNode_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCNode_class->name = name;
	JSPROXY_CCNode_class->addProperty = JS_PropertyStub;
	JSPROXY_CCNode_class->delProperty = JS_PropertyStub;
	JSPROXY_CCNode_class->getProperty = JS_PropertyStub;
	JSPROXY_CCNode_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCNode_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCNode_class->resolve = JS_ResolveStub;
	JSPROXY_CCNode_class->convert = JS_ConvertStub;
	JSPROXY_CCNode_class->finalize = JSPROXY_CCNode_finalize;
	JSPROXY_CCNode_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("actionManager", JSPROXY_CCNode_actionManager, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("addChild", JSPROXY_CCNode_addChild_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("addChildZ", JSPROXY_CCNode_addChild_z_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("addChildZTag", JSPROXY_CCNode_addChild_z_tag_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("anchorPoint", JSPROXY_CCNode_anchorPoint, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("anchorPointInPoints", JSPROXY_CCNode_anchorPointInPoints, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("cleanup", JSPROXY_CCNode_cleanup, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("contentSize", JSPROXY_CCNode_contentSize, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("convertToNodeSpace", JSPROXY_CCNode_convertToNodeSpace_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("convertToNodeSpaceAR", JSPROXY_CCNode_convertToNodeSpaceAR_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("convertToWorldSpace", JSPROXY_CCNode_convertToWorldSpace_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("convertToWorldSpaceAR", JSPROXY_CCNode_convertToWorldSpaceAR_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("draw", JSPROXY_CCNode_draw, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("getActionByTag", JSPROXY_CCNode_getActionByTag_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("getChildByTag", JSPROXY_CCNode_getChildByTag_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("glServerState", JSPROXY_CCNode_glServerState, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("ignoreAnchorPointForPosition", JSPROXY_CCNode_ignoreAnchorPointForPosition, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("init", JSPROXY_CCNode_init, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("isRunning", JSPROXY_CCNode_isRunning, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("numberOfRunningActions", JSPROXY_CCNode_numberOfRunningActions, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("onEnterTransitionDidFinish", JSPROXY_CCNode_onEnterTransitionDidFinish, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("onExitTransitionDidStart", JSPROXY_CCNode_onExitTransitionDidStart, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("orderOfArrival", JSPROXY_CCNode_orderOfArrival, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("parent", JSPROXY_CCNode_parent, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("pauseSchedulerAndActions", JSPROXY_CCNode_pauseSchedulerAndActions, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("position", JSPROXY_CCNode_position, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("removeAllChildrenWithCleanup", JSPROXY_CCNode_removeAllChildrenWithCleanup_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("removeChildCleanup", JSPROXY_CCNode_removeChild_cleanup_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("removeChildByTagCleanup", JSPROXY_CCNode_removeChildByTag_cleanup_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("removeFromParentAndCleanup", JSPROXY_CCNode_removeFromParentAndCleanup_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("reorderChildZ", JSPROXY_CCNode_reorderChild_z_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("resumeSchedulerAndActions", JSPROXY_CCNode_resumeSchedulerAndActions, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("rotation", JSPROXY_CCNode_rotation, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("runAction", JSPROXY_CCNode_runAction_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("scale", JSPROXY_CCNode_scale, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("scaleX", JSPROXY_CCNode_scaleX, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("scaleY", JSPROXY_CCNode_scaleY, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("scheduleUpdate", JSPROXY_CCNode_scheduleUpdate, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("scheduleUpdateWithPriority", JSPROXY_CCNode_scheduleUpdateWithPriority_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("scheduler", JSPROXY_CCNode_scheduler, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setActionManager", JSPROXY_CCNode_setActionManager_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setAnchorPoint", JSPROXY_CCNode_setAnchorPoint_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setContentSize", JSPROXY_CCNode_setContentSize_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setGlServerState", JSPROXY_CCNode_setGlServerState_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setIgnoreAnchorPointForPosition", JSPROXY_CCNode_setIgnoreAnchorPointForPosition_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setOrderOfArrival", JSPROXY_CCNode_setOrderOfArrival_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setParent", JSPROXY_CCNode_setParent_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setPosition", JSPROXY_CCNode_setPosition_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setRotation", JSPROXY_CCNode_setRotation_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setScale", JSPROXY_CCNode_setScale_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setScaleX", JSPROXY_CCNode_setScaleX_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setScaleY", JSPROXY_CCNode_setScaleY_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setScheduler", JSPROXY_CCNode_setScheduler_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setSkewX", JSPROXY_CCNode_setSkewX_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setSkewY", JSPROXY_CCNode_setSkewY_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setTag", JSPROXY_CCNode_setTag_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setVertexZ", JSPROXY_CCNode_setVertexZ_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setVisible", JSPROXY_CCNode_setVisible_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setZOrder", JSPROXY_CCNode_setZOrder_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("skewX", JSPROXY_CCNode_skewX, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("skewY", JSPROXY_CCNode_skewY, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("sortAllChildren", JSPROXY_CCNode_sortAllChildren, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("stopAction", JSPROXY_CCNode_stopAction_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("stopActionByTag", JSPROXY_CCNode_stopActionByTag_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("stopAllActions", JSPROXY_CCNode_stopAllActions, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("tag", JSPROXY_CCNode_tag, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("transform", JSPROXY_CCNode_transform, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("transformAncestors", JSPROXY_CCNode_transformAncestors, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("unscheduleAllSelectors", JSPROXY_CCNode_unscheduleAllSelectors, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("unscheduleUpdate", JSPROXY_CCNode_unscheduleUpdate, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("vertexZ", JSPROXY_CCNode_vertexZ, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("visible", JSPROXY_CCNode_visible, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("visit", JSPROXY_CCNode_visit, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("zOrder", JSPROXY_CCNode_zOrder, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("node", JSPROXY_CCNode_node_static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FS_END
	};

	JSPROXY_CCNode_object = JS_InitClass(cx, globalObj, JSPROXY_NSObject_object, JSPROXY_CCNode_class, JSPROXY_CCNode_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCNode

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCNode_class, JSPROXY_CCNode_object, NULL);
	JSPROXY_CCNode *proxy = [[JSPROXY_CCNode alloc] initWithJSObject:jsobj];
	[proxy setRealObj:realObj];
	JS_SetPrivate(jsobj, proxy);

	if( realObj )
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);

	[self swizzleMethods];

	return jsobj;
}

+(void) swizzleMethods
{
	[super swizzleMethods];

	static BOOL CCNode_already_swizzled = NO;
	if( ! CCNode_already_swizzled ) {
		NSError *error;

		if( ! [CCNode jr_swizzleMethod:@selector(onEnter) withMethod:@selector(onEnter_JSHook) error:&error] ) 
			NSLog(@"Error swizzling %@", error);

		if( ! [CCNode jr_swizzleMethod:@selector(onExit) withMethod:@selector(onExit_JSHook) error:&error] ) 
			NSLog(@"Error swizzling %@", error);

		CCNode_already_swizzled = YES;
	}
}

-(void) onEnter
{
	if (_jsObj) {
		JSContext* cx = [[ScriptingCore sharedInstance] globalContext];
		JSBool found;
		JS_HasProperty(cx, _jsObj, "onEnter", &found);
		if (found == JS_TRUE) {
			jsval rval, fval;
			JS_GetProperty(cx, _jsObj, "onEnter", &fval);
			JS_CallFunctionValue(cx, _jsObj, fval, 0, 0, &rval);
		}
	}	
}

-(void) onExit
{
	if (_jsObj) {
		JSContext* cx = [[ScriptingCore sharedInstance] globalContext];
		JSBool found;
		JS_HasProperty(cx, _jsObj, "onExit", &found);
		if (found == JS_TRUE) {
			jsval rval, fval;
			JS_GetProperty(cx, _jsObj, "onExit", &fval);
			JS_CallFunctionValue(cx, _jsObj, fval, 0, 0, &rval);
		}
	}	
}

@end
@implementation CCNode (SpiderMonkey)

-(void) onEnter_JSHook
{
	JSPROXY_CCNode *proxy = objc_getAssociatedObject(self, &JSPROXY_association_proxy_key);
	if( proxy )
		[proxy onEnter];
	
	[self onEnter_JSHook];
}

-(void) onExit_JSHook
{
	JSPROXY_CCNode *proxy = objc_getAssociatedObject(self, &JSPROXY_association_proxy_key);
	if( proxy )
		[proxy onExit];
	
	[self onExit_JSHook];
}
@end

/*
 * CCMoveTo
 */
#pragma mark - CCMoveTo

JSClass* JSPROXY_CCMoveTo_class = NULL;
JSObject* JSPROXY_CCMoveTo_object = NULL;
 // Constructor
JSBool JSPROXY_CCMoveTo_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCMoveTo createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCMoveTo_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCMoveTo *proxy = (JSPROXY_CCMoveTo*)JS_GetPrivate(obj);
	if (proxy) {
		objc_setAssociatedObject([proxy realObj], &JSPROXY_association_proxy_key, nil, OBJC_ASSOCIATION_ASSIGN);
		/* no callbacks */
		[proxy release];
	}
}

// Arguments: ccTime, CGPoint
// Ret value: CCMoveTo
JSBool JSPROXY_CCMoveTo_actionWithDuration_position__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	JSObject *tmp_arg1;
	JS_ValueToObject( cx, *argvp++, &tmp_arg1 );
	NSCAssert( JS_GetTypedArrayByteLength( tmp_arg1 ) == 8, @"Invalid length");
#ifdef __CC_PLATFORM_IOS
	CGPoint arg1 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg1 );
#elif defined(__CC_PLATFORM_MAC)
	float* arg1_array = (float*)JS_GetTypedArrayData( tmp_arg1 );
	CGPoint arg1 = ccp(arg1_array[0], arg1_array[1] );
#else
#error Unsupported Platform
#endif  

	CCMoveTo *ret_val = [CCMoveTo actionWithDuration:(ccTime)arg0 position:(CGPoint)arg1  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: ccTime, CGPoint
// Ret value: None
JSBool JSPROXY_CCMoveTo_initWithDuration_position_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	JSObject *tmp_arg1;
	JS_ValueToObject( cx, *argvp++, &tmp_arg1 );
	NSCAssert( JS_GetTypedArrayByteLength( tmp_arg1 ) == 8, @"Invalid length");
#ifdef __CC_PLATFORM_IOS
	CGPoint arg1 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg1 );
#elif defined(__CC_PLATFORM_MAC)
	float* arg1_array = (float*)JS_GetTypedArrayData( tmp_arg1 );
	CGPoint arg1 = ccp(arg1_array[0], arg1_array[1] );
#else
#error Unsupported Platform
#endif  

	CCMoveTo *real = [[CCMoveTo alloc] initWithDuration:(ccTime)arg0 position:(CGPoint)arg1  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

void JSPROXY_CCMoveTo_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCMoveTo_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCMoveTo_class->name = name;
	JSPROXY_CCMoveTo_class->addProperty = JS_PropertyStub;
	JSPROXY_CCMoveTo_class->delProperty = JS_PropertyStub;
	JSPROXY_CCMoveTo_class->getProperty = JS_PropertyStub;
	JSPROXY_CCMoveTo_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCMoveTo_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCMoveTo_class->resolve = JS_ResolveStub;
	JSPROXY_CCMoveTo_class->convert = JS_ConvertStub;
	JSPROXY_CCMoveTo_class->finalize = JSPROXY_CCMoveTo_finalize;
	JSPROXY_CCMoveTo_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("initWithDurationPosition", JSPROXY_CCMoveTo_initWithDuration_position_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("actionWithDurationPosition", JSPROXY_CCMoveTo_actionWithDuration_position__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FS_END
	};

	JSPROXY_CCMoveTo_object = JS_InitClass(cx, globalObj, JSPROXY_CCActionInterval_object, JSPROXY_CCMoveTo_class, JSPROXY_CCMoveTo_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCMoveTo

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCMoveTo_class, JSPROXY_CCMoveTo_object, NULL);
	JSPROXY_CCMoveTo *proxy = [[JSPROXY_CCMoveTo alloc] initWithJSObject:jsobj];
	[proxy setRealObj:realObj];
	JS_SetPrivate(jsobj, proxy);

	if( realObj )
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCMoveBy
 */
#pragma mark - CCMoveBy

JSClass* JSPROXY_CCMoveBy_class = NULL;
JSObject* JSPROXY_CCMoveBy_object = NULL;
 // Constructor
JSBool JSPROXY_CCMoveBy_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCMoveBy createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCMoveBy_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCMoveBy *proxy = (JSPROXY_CCMoveBy*)JS_GetPrivate(obj);
	if (proxy) {
		objc_setAssociatedObject([proxy realObj], &JSPROXY_association_proxy_key, nil, OBJC_ASSOCIATION_ASSIGN);
		/* no callbacks */
		[proxy release];
	}
}

// Arguments: ccTime, CGPoint
// Ret value: CCMoveBy
JSBool JSPROXY_CCMoveBy_actionWithDuration_position__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	JSObject *tmp_arg1;
	JS_ValueToObject( cx, *argvp++, &tmp_arg1 );
	NSCAssert( JS_GetTypedArrayByteLength( tmp_arg1 ) == 8, @"Invalid length");
#ifdef __CC_PLATFORM_IOS
	CGPoint arg1 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg1 );
#elif defined(__CC_PLATFORM_MAC)
	float* arg1_array = (float*)JS_GetTypedArrayData( tmp_arg1 );
	CGPoint arg1 = ccp(arg1_array[0], arg1_array[1] );
#else
#error Unsupported Platform
#endif  

	CCMoveBy *ret_val = [CCMoveBy actionWithDuration:(ccTime)arg0 position:(CGPoint)arg1  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: ccTime, CGPoint
// Ret value: None
JSBool JSPROXY_CCMoveBy_initWithDuration_position_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	JSObject *tmp_arg1;
	JS_ValueToObject( cx, *argvp++, &tmp_arg1 );
	NSCAssert( JS_GetTypedArrayByteLength( tmp_arg1 ) == 8, @"Invalid length");
#ifdef __CC_PLATFORM_IOS
	CGPoint arg1 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg1 );
#elif defined(__CC_PLATFORM_MAC)
	float* arg1_array = (float*)JS_GetTypedArrayData( tmp_arg1 );
	CGPoint arg1 = ccp(arg1_array[0], arg1_array[1] );
#else
#error Unsupported Platform
#endif  

	CCMoveBy *real = [[CCMoveBy alloc] initWithDuration:(ccTime)arg0 position:(CGPoint)arg1  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

void JSPROXY_CCMoveBy_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCMoveBy_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCMoveBy_class->name = name;
	JSPROXY_CCMoveBy_class->addProperty = JS_PropertyStub;
	JSPROXY_CCMoveBy_class->delProperty = JS_PropertyStub;
	JSPROXY_CCMoveBy_class->getProperty = JS_PropertyStub;
	JSPROXY_CCMoveBy_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCMoveBy_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCMoveBy_class->resolve = JS_ResolveStub;
	JSPROXY_CCMoveBy_class->convert = JS_ConvertStub;
	JSPROXY_CCMoveBy_class->finalize = JSPROXY_CCMoveBy_finalize;
	JSPROXY_CCMoveBy_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("initWithDurationPosition", JSPROXY_CCMoveBy_initWithDuration_position_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("actionWithDurationPosition", JSPROXY_CCMoveBy_actionWithDuration_position__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FS_END
	};

	JSPROXY_CCMoveBy_object = JS_InitClass(cx, globalObj, JSPROXY_CCMoveTo_object, JSPROXY_CCMoveBy_class, JSPROXY_CCMoveBy_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCMoveBy

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCMoveBy_class, JSPROXY_CCMoveBy_object, NULL);
	JSPROXY_CCMoveBy *proxy = [[JSPROXY_CCMoveBy alloc] initWithJSObject:jsobj];
	[proxy setRealObj:realObj];
	JS_SetPrivate(jsobj, proxy);

	if( realObj )
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCScaleTo
 */
#pragma mark - CCScaleTo

JSClass* JSPROXY_CCScaleTo_class = NULL;
JSObject* JSPROXY_CCScaleTo_object = NULL;
 // Constructor
JSBool JSPROXY_CCScaleTo_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCScaleTo createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCScaleTo_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCScaleTo *proxy = (JSPROXY_CCScaleTo*)JS_GetPrivate(obj);
	if (proxy) {
		objc_setAssociatedObject([proxy realObj], &JSPROXY_association_proxy_key, nil, OBJC_ASSOCIATION_ASSIGN);
		/* no callbacks */
		[proxy release];
	}
}

// Arguments: ccTime, float
// Ret value: CCScaleTo
JSBool JSPROXY_CCScaleTo_actionWithDuration_scale__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );
	double arg1; JS_ValueToNumber( cx, *argvp++, &arg1 );

	CCScaleTo *ret_val = [CCScaleTo actionWithDuration:(ccTime)arg0 scale:(float)arg1  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: ccTime, float, float
// Ret value: CCScaleTo
JSBool JSPROXY_CCScaleTo_actionWithDuration_scaleX_scaleY__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 3, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );
	double arg1; JS_ValueToNumber( cx, *argvp++, &arg1 );
	double arg2; JS_ValueToNumber( cx, *argvp++, &arg2 );

	CCScaleTo *ret_val = [CCScaleTo actionWithDuration:(ccTime)arg0 scaleX:(float)arg1 scaleY:(float)arg2  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: ccTime, float
// Ret value: None
JSBool JSPROXY_CCScaleTo_initWithDuration_scale_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );
	double arg1; JS_ValueToNumber( cx, *argvp++, &arg1 );

	CCScaleTo *real = [[CCScaleTo alloc] initWithDuration:(ccTime)arg0 scale:(float)arg1  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: ccTime, float, float
// Ret value: None
JSBool JSPROXY_CCScaleTo_initWithDuration_scaleX_scaleY_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 3, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );
	double arg1; JS_ValueToNumber( cx, *argvp++, &arg1 );
	double arg2; JS_ValueToNumber( cx, *argvp++, &arg2 );

	CCScaleTo *real = [[CCScaleTo alloc] initWithDuration:(ccTime)arg0 scaleX:(float)arg1 scaleY:(float)arg2  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

void JSPROXY_CCScaleTo_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCScaleTo_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCScaleTo_class->name = name;
	JSPROXY_CCScaleTo_class->addProperty = JS_PropertyStub;
	JSPROXY_CCScaleTo_class->delProperty = JS_PropertyStub;
	JSPROXY_CCScaleTo_class->getProperty = JS_PropertyStub;
	JSPROXY_CCScaleTo_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCScaleTo_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCScaleTo_class->resolve = JS_ResolveStub;
	JSPROXY_CCScaleTo_class->convert = JS_ConvertStub;
	JSPROXY_CCScaleTo_class->finalize = JSPROXY_CCScaleTo_finalize;
	JSPROXY_CCScaleTo_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("initWithDurationScale", JSPROXY_CCScaleTo_initWithDuration_scale_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithDurationScalexScaley", JSPROXY_CCScaleTo_initWithDuration_scaleX_scaleY_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("actionWithDurationScale", JSPROXY_CCScaleTo_actionWithDuration_scale__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FN("actionWithDurationScalexScaley", JSPROXY_CCScaleTo_actionWithDuration_scaleX_scaleY__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FS_END
	};

	JSPROXY_CCScaleTo_object = JS_InitClass(cx, globalObj, JSPROXY_CCActionInterval_object, JSPROXY_CCScaleTo_class, JSPROXY_CCScaleTo_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCScaleTo

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCScaleTo_class, JSPROXY_CCScaleTo_object, NULL);
	JSPROXY_CCScaleTo *proxy = [[JSPROXY_CCScaleTo alloc] initWithJSObject:jsobj];
	[proxy setRealObj:realObj];
	JS_SetPrivate(jsobj, proxy);

	if( realObj )
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCRepeatForever
 */
#pragma mark - CCRepeatForever

JSClass* JSPROXY_CCRepeatForever_class = NULL;
JSObject* JSPROXY_CCRepeatForever_object = NULL;
 // Constructor
JSBool JSPROXY_CCRepeatForever_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCRepeatForever createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCRepeatForever_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCRepeatForever *proxy = (JSPROXY_CCRepeatForever*)JS_GetPrivate(obj);
	if (proxy) {
		objc_setAssociatedObject([proxy realObj], &JSPROXY_association_proxy_key, nil, OBJC_ASSOCIATION_ASSIGN);
		/* no callbacks */
		[proxy release];
	}
}

// Arguments: CCActionInterval*
// Ret value: CCRepeatForever
JSBool JSPROXY_CCRepeatForever_actionWithAction__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCActionInterval* arg0 = (CCActionInterval*) jsval_to_nsobject( *argvp++, cx);

	CCRepeatForever *ret_val = [CCRepeatForever actionWithAction:(CCActionInterval*)arg0  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: CCActionInterval*
// Ret value: None
JSBool JSPROXY_CCRepeatForever_initWithAction_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCActionInterval* arg0 = (CCActionInterval*) jsval_to_nsobject( *argvp++, cx);

	CCRepeatForever *real = [[CCRepeatForever alloc] initWithAction:(CCActionInterval*)arg0  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: CCActionInterval*
JSBool JSPROXY_CCRepeatForever_innerAction(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CCActionInterval* ret_val;

	CCRepeatForever *real = (CCRepeatForever*) [proxy realObj];
	ret_val = [real innerAction ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: CCActionInterval*
// Ret value: None
JSBool JSPROXY_CCRepeatForever_setInnerAction_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCActionInterval* arg0 = (CCActionInterval*) jsval_to_nsobject( *argvp++, cx);

	CCRepeatForever *real = (CCRepeatForever*) [proxy realObj];
	[real setInnerAction:(CCActionInterval*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

void JSPROXY_CCRepeatForever_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCRepeatForever_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCRepeatForever_class->name = name;
	JSPROXY_CCRepeatForever_class->addProperty = JS_PropertyStub;
	JSPROXY_CCRepeatForever_class->delProperty = JS_PropertyStub;
	JSPROXY_CCRepeatForever_class->getProperty = JS_PropertyStub;
	JSPROXY_CCRepeatForever_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCRepeatForever_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCRepeatForever_class->resolve = JS_ResolveStub;
	JSPROXY_CCRepeatForever_class->convert = JS_ConvertStub;
	JSPROXY_CCRepeatForever_class->finalize = JSPROXY_CCRepeatForever_finalize;
	JSPROXY_CCRepeatForever_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("initWithAction", JSPROXY_CCRepeatForever_initWithAction_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("innerAction", JSPROXY_CCRepeatForever_innerAction, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setInnerAction", JSPROXY_CCRepeatForever_setInnerAction_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("actionWithAction", JSPROXY_CCRepeatForever_actionWithAction__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FS_END
	};

	JSPROXY_CCRepeatForever_object = JS_InitClass(cx, globalObj, JSPROXY_CCAction_object, JSPROXY_CCRepeatForever_class, JSPROXY_CCRepeatForever_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCRepeatForever

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCRepeatForever_class, JSPROXY_CCRepeatForever_object, NULL);
	JSPROXY_CCRepeatForever *proxy = [[JSPROXY_CCRepeatForever alloc] initWithJSObject:jsobj];
	[proxy setRealObj:realObj];
	JS_SetPrivate(jsobj, proxy);

	if( realObj )
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCTextureCache
 */
#pragma mark - CCTextureCache

JSClass* JSPROXY_CCTextureCache_class = NULL;
JSObject* JSPROXY_CCTextureCache_object = NULL;
 // Constructor
JSBool JSPROXY_CCTextureCache_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCTextureCache createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCTextureCache_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCTextureCache *proxy = (JSPROXY_CCTextureCache*)JS_GetPrivate(obj);
	if (proxy) {
		objc_setAssociatedObject([proxy realObj], &JSPROXY_association_proxy_key, nil, OBJC_ASSOCIATION_ASSIGN);
		/* no callbacks */
		[proxy release];
	}
}

// Arguments: NSString*
// Ret value: CCTexture2D*
JSBool JSPROXY_CCTextureCache_addImage_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );
	CCTexture2D* ret_val;

	CCTextureCache *real = (CCTextureCache*) [proxy realObj];
	ret_val = [real addImage:(NSString*)arg0  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: CCTexture2D*
JSBool JSPROXY_CCTextureCache_addPVRImage_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );
	CCTexture2D* ret_val;

	CCTextureCache *real = (CCTextureCache*) [proxy realObj];
	ret_val = [real addPVRImage:(NSString*)arg0  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCTextureCache_dumpCachedTextureInfo(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCTextureCache *real = (CCTextureCache*) [proxy realObj];
	[real dumpCachedTextureInfo ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCTextureCache_purgeSharedTextureCache_static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[CCTextureCache purgeSharedTextureCache ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCTextureCache_removeAllTextures(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCTextureCache *real = (CCTextureCache*) [proxy realObj];
	[real removeAllTextures ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCTexture2D*
// Ret value: None
JSBool JSPROXY_CCTextureCache_removeTexture_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCTexture2D* arg0 = (CCTexture2D*) jsval_to_nsobject( *argvp++, cx);

	CCTextureCache *real = (CCTextureCache*) [proxy realObj];
	[real removeTexture:(CCTexture2D*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: None
JSBool JSPROXY_CCTextureCache_removeTextureForKey_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );

	CCTextureCache *real = (CCTextureCache*) [proxy realObj];
	[real removeTextureForKey:(NSString*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCTextureCache_removeUnusedTextures(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCTextureCache *real = (CCTextureCache*) [proxy realObj];
	[real removeUnusedTextures ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: CCTextureCache*
JSBool JSPROXY_CCTextureCache_sharedTextureCache_static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCTextureCache* ret_val = [CCTextureCache sharedTextureCache ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: CCTexture2D*
JSBool JSPROXY_CCTextureCache_textureForKey_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );
	CCTexture2D* ret_val;

	CCTextureCache *real = (CCTextureCache*) [proxy realObj];
	ret_val = [real textureForKey:(NSString*)arg0  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

void JSPROXY_CCTextureCache_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCTextureCache_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCTextureCache_class->name = name;
	JSPROXY_CCTextureCache_class->addProperty = JS_PropertyStub;
	JSPROXY_CCTextureCache_class->delProperty = JS_PropertyStub;
	JSPROXY_CCTextureCache_class->getProperty = JS_PropertyStub;
	JSPROXY_CCTextureCache_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCTextureCache_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCTextureCache_class->resolve = JS_ResolveStub;
	JSPROXY_CCTextureCache_class->convert = JS_ConvertStub;
	JSPROXY_CCTextureCache_class->finalize = JSPROXY_CCTextureCache_finalize;
	JSPROXY_CCTextureCache_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("addImage", JSPROXY_CCTextureCache_addImage_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("addPVRImage", JSPROXY_CCTextureCache_addPVRImage_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("dumpCachedTextureInfo", JSPROXY_CCTextureCache_dumpCachedTextureInfo, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("removeAllTextures", JSPROXY_CCTextureCache_removeAllTextures, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("removeTexture", JSPROXY_CCTextureCache_removeTexture_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("removeTextureForKey", JSPROXY_CCTextureCache_removeTextureForKey_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("removeUnusedTextures", JSPROXY_CCTextureCache_removeUnusedTextures, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("textureForKey", JSPROXY_CCTextureCache_textureForKey_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("purgeSharedTextureCache", JSPROXY_CCTextureCache_purgeSharedTextureCache_static, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("sharedTextureCache", JSPROXY_CCTextureCache_sharedTextureCache_static, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};

	JSPROXY_CCTextureCache_object = JS_InitClass(cx, globalObj, JSPROXY_NSObject_object, JSPROXY_CCTextureCache_class, JSPROXY_CCTextureCache_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCTextureCache

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCTextureCache_class, JSPROXY_CCTextureCache_object, NULL);
	JSPROXY_CCTextureCache *proxy = [[JSPROXY_CCTextureCache alloc] initWithJSObject:jsobj];
	[proxy setRealObj:realObj];
	JS_SetPrivate(jsobj, proxy);

	if( realObj )
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCMenuItem
 */
#pragma mark - CCMenuItem

JSClass* JSPROXY_CCMenuItem_class = NULL;
JSObject* JSPROXY_CCMenuItem_object = NULL;
 // Constructor
JSBool JSPROXY_CCMenuItem_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCMenuItem createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCMenuItem_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCMenuItem *proxy = (JSPROXY_CCMenuItem*)JS_GetPrivate(obj);
	if (proxy) {
		objc_setAssociatedObject([proxy realObj], &JSPROXY_association_proxy_key, nil, OBJC_ASSOCIATION_ASSIGN);
		/* no callbacks */
		[proxy release];
	}
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCMenuItem_activate(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCMenuItem *real = (CCMenuItem*) [proxy realObj];
	[real activate ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCMenuItem_cleanup(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCMenuItem *real = (CCMenuItem*) [proxy realObj];
	[real cleanup ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: void (^)(id)
// Ret value: None
JSBool JSPROXY_CCMenuItem_initWithBlock_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	// Parsing function
	js_block arg0 = jsval_to_block( *argvp++, cx, JS_THIS_OBJECT(cx, vp) );

	CCMenuItem *real = [[CCMenuItem alloc] initWithBlock:(void (^)(id))arg0  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCMenuItem_isEnabled(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CCMenuItem *real = (CCMenuItem*) [proxy realObj];
	ret_val = [real isEnabled ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCMenuItem_isSelected(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CCMenuItem *real = (CCMenuItem*) [proxy realObj];
	ret_val = [real isSelected ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: void (^)(id)
// Ret value: CCMenuItem
JSBool JSPROXY_CCMenuItem_itemWithBlock__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	// Parsing function
	js_block arg0 = jsval_to_block( *argvp++, cx, JS_THIS_OBJECT(cx, vp) );

	CCMenuItem *ret_val = [CCMenuItem itemWithBlock:(void (^)(id))arg0  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCMenuItem_selected(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCMenuItem *real = (CCMenuItem*) [proxy realObj];
	[real selected ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: void (^)(id)
// Ret value: None
JSBool JSPROXY_CCMenuItem_setBlock_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	// Parsing function
	js_block arg0 = jsval_to_block( *argvp++, cx, JS_THIS_OBJECT(cx, vp) );

	CCMenuItem *real = (CCMenuItem*) [proxy realObj];
	[real setBlock:(void (^)(id))arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCMenuItem_setIsEnabled_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	CCMenuItem *real = (CCMenuItem*) [proxy realObj];
	[real setIsEnabled:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCMenuItem_unselected(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCMenuItem *real = (CCMenuItem*) [proxy realObj];
	[real unselected ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

void JSPROXY_CCMenuItem_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCMenuItem_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCMenuItem_class->name = name;
	JSPROXY_CCMenuItem_class->addProperty = JS_PropertyStub;
	JSPROXY_CCMenuItem_class->delProperty = JS_PropertyStub;
	JSPROXY_CCMenuItem_class->getProperty = JS_PropertyStub;
	JSPROXY_CCMenuItem_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCMenuItem_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCMenuItem_class->resolve = JS_ResolveStub;
	JSPROXY_CCMenuItem_class->convert = JS_ConvertStub;
	JSPROXY_CCMenuItem_class->finalize = JSPROXY_CCMenuItem_finalize;
	JSPROXY_CCMenuItem_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("activate", JSPROXY_CCMenuItem_activate, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("cleanup", JSPROXY_CCMenuItem_cleanup, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithBlock", JSPROXY_CCMenuItem_initWithBlock_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("isEnabled", JSPROXY_CCMenuItem_isEnabled, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("isSelected", JSPROXY_CCMenuItem_isSelected, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("selected", JSPROXY_CCMenuItem_selected, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setBlock", JSPROXY_CCMenuItem_setBlock_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setIsEnabled", JSPROXY_CCMenuItem_setIsEnabled_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("unselected", JSPROXY_CCMenuItem_unselected, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("itemWithBlock", JSPROXY_CCMenuItem_itemWithBlock__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FS_END
	};

	JSPROXY_CCMenuItem_object = JS_InitClass(cx, globalObj, JSPROXY_CCNode_object, JSPROXY_CCMenuItem_class, JSPROXY_CCMenuItem_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCMenuItem

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCMenuItem_class, JSPROXY_CCMenuItem_object, NULL);
	JSPROXY_CCMenuItem *proxy = [[JSPROXY_CCMenuItem alloc] initWithJSObject:jsobj];
	[proxy setRealObj:realObj];
	JS_SetPrivate(jsobj, proxy);

	if( realObj )
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCMenuItemSprite
 */
#pragma mark - CCMenuItemSprite

JSClass* JSPROXY_CCMenuItemSprite_class = NULL;
JSObject* JSPROXY_CCMenuItemSprite_object = NULL;
 // Constructor
JSBool JSPROXY_CCMenuItemSprite_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCMenuItemSprite createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCMenuItemSprite_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCMenuItemSprite *proxy = (JSPROXY_CCMenuItemSprite*)JS_GetPrivate(obj);
	if (proxy) {
		objc_setAssociatedObject([proxy realObj], &JSPROXY_association_proxy_key, nil, OBJC_ASSOCIATION_ASSIGN);
		/* no callbacks */
		[proxy release];
	}
}

// Arguments: 
// Ret value: CCNode*
JSBool JSPROXY_CCMenuItemSprite_disabledImage(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CCNode* ret_val;

	CCMenuItemSprite *real = (CCMenuItemSprite*) [proxy realObj];
	ret_val = [real disabledImage ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: CCNode*, CCNode*, CCNode*, void (^)(id)
// Ret value: None
JSBool JSPROXY_CCMenuItemSprite_initWithNormalSprite_selectedSprite_disabledSprite_block_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 4, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCNode* arg0 = (CCNode*) jsval_to_nsobject( *argvp++, cx);

	CCNode* arg1 = (CCNode*) jsval_to_nsobject( *argvp++, cx);

	CCNode* arg2 = (CCNode*) jsval_to_nsobject( *argvp++, cx);

	// Parsing function
	js_block arg3 = jsval_to_block( *argvp++, cx, JS_THIS_OBJECT(cx, vp) );

	CCMenuItemSprite *real = [[CCMenuItemSprite alloc] initWithNormalSprite:(CCNode*)arg0 selectedSprite:(CCNode*)arg1 disabledSprite:(CCNode*)arg2 block:(void (^)(id))arg3  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCNode*, CCNode*
// Ret value: CCMenuItemSprite
JSBool JSPROXY_CCMenuItemSprite_itemWithNormalSprite_selectedSprite__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCNode* arg0 = (CCNode*) jsval_to_nsobject( *argvp++, cx);

	CCNode* arg1 = (CCNode*) jsval_to_nsobject( *argvp++, cx);

	CCMenuItemSprite *ret_val = [CCMenuItemSprite itemWithNormalSprite:(CCNode*)arg0 selectedSprite:(CCNode*)arg1  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: CCNode*, CCNode*, void (^)(id)
// Ret value: CCMenuItemSprite
JSBool JSPROXY_CCMenuItemSprite_itemWithNormalSprite_selectedSprite_block__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 3, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCNode* arg0 = (CCNode*) jsval_to_nsobject( *argvp++, cx);

	CCNode* arg1 = (CCNode*) jsval_to_nsobject( *argvp++, cx);

	// Parsing function
	js_block arg2 = jsval_to_block( *argvp++, cx, JS_THIS_OBJECT(cx, vp) );

	CCMenuItemSprite *ret_val = [CCMenuItemSprite itemWithNormalSprite:(CCNode*)arg0 selectedSprite:(CCNode*)arg1 block:(void (^)(id))arg2  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: CCNode*, CCNode*, CCNode*, void (^)(id)
// Ret value: CCMenuItemSprite
JSBool JSPROXY_CCMenuItemSprite_itemWithNormalSprite_selectedSprite_disabledSprite_block__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 4, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCNode* arg0 = (CCNode*) jsval_to_nsobject( *argvp++, cx);

	CCNode* arg1 = (CCNode*) jsval_to_nsobject( *argvp++, cx);

	CCNode* arg2 = (CCNode*) jsval_to_nsobject( *argvp++, cx);

	// Parsing function
	js_block arg3 = jsval_to_block( *argvp++, cx, JS_THIS_OBJECT(cx, vp) );

	CCMenuItemSprite *ret_val = [CCMenuItemSprite itemWithNormalSprite:(CCNode*)arg0 selectedSprite:(CCNode*)arg1 disabledSprite:(CCNode*)arg2 block:(void (^)(id))arg3  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: CCNode*
JSBool JSPROXY_CCMenuItemSprite_normalImage(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CCNode* ret_val;

	CCMenuItemSprite *real = (CCMenuItemSprite*) [proxy realObj];
	ret_val = [real normalImage ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: CCNode*
JSBool JSPROXY_CCMenuItemSprite_selectedImage(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CCNode* ret_val;

	CCMenuItemSprite *real = (CCMenuItemSprite*) [proxy realObj];
	ret_val = [real selectedImage ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: CCNode*
// Ret value: None
JSBool JSPROXY_CCMenuItemSprite_setDisabledImage_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCNode* arg0 = (CCNode*) jsval_to_nsobject( *argvp++, cx);

	CCMenuItemSprite *real = (CCMenuItemSprite*) [proxy realObj];
	[real setDisabledImage:(CCNode*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCNode*
// Ret value: None
JSBool JSPROXY_CCMenuItemSprite_setNormalImage_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCNode* arg0 = (CCNode*) jsval_to_nsobject( *argvp++, cx);

	CCMenuItemSprite *real = (CCMenuItemSprite*) [proxy realObj];
	[real setNormalImage:(CCNode*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCNode*
// Ret value: None
JSBool JSPROXY_CCMenuItemSprite_setSelectedImage_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCNode* arg0 = (CCNode*) jsval_to_nsobject( *argvp++, cx);

	CCMenuItemSprite *real = (CCMenuItemSprite*) [proxy realObj];
	[real setSelectedImage:(CCNode*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCMenuItemSprite_doesOpacityModifyRGB(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CCMenuItemSprite *real = (CCMenuItemSprite*) [proxy realObj];
	ret_val = [real doesOpacityModifyRGB ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: GLubyte
JSBool JSPROXY_CCMenuItemSprite_opacity(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	GLubyte ret_val;

	CCMenuItemSprite *real = (CCMenuItemSprite*) [proxy realObj];
	ret_val = [real opacity ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: ccColor3B
// Ret value: None
JSBool JSPROXY_CCMenuItemSprite_setColor_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	ccColor3B arg0 = *(ccColor3B*)JS_GetTypedArrayData( tmp_arg0);

	CCMenuItemSprite *real = (CCMenuItemSprite*) [proxy realObj];
	[real setColor:(ccColor3B)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: GLubyte
// Ret value: None
JSBool JSPROXY_CCMenuItemSprite_setOpacity_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	uint16_t arg0; JS_ValueToUint16( cx, *argvp++, &arg0 );

	CCMenuItemSprite *real = (CCMenuItemSprite*) [proxy realObj];
	[real setOpacity:(GLubyte)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCMenuItemSprite_setOpacityModifyRGB_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	CCMenuItemSprite *real = (CCMenuItemSprite*) [proxy realObj];
	[real setOpacityModifyRGB:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

void JSPROXY_CCMenuItemSprite_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCMenuItemSprite_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCMenuItemSprite_class->name = name;
	JSPROXY_CCMenuItemSprite_class->addProperty = JS_PropertyStub;
	JSPROXY_CCMenuItemSprite_class->delProperty = JS_PropertyStub;
	JSPROXY_CCMenuItemSprite_class->getProperty = JS_PropertyStub;
	JSPROXY_CCMenuItemSprite_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCMenuItemSprite_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCMenuItemSprite_class->resolve = JS_ResolveStub;
	JSPROXY_CCMenuItemSprite_class->convert = JS_ConvertStub;
	JSPROXY_CCMenuItemSprite_class->finalize = JSPROXY_CCMenuItemSprite_finalize;
	JSPROXY_CCMenuItemSprite_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("disabledImage", JSPROXY_CCMenuItemSprite_disabledImage, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithNormalSpriteSelectedspriteDisabledspriteBlock", JSPROXY_CCMenuItemSprite_initWithNormalSprite_selectedSprite_disabledSprite_block_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("normalImage", JSPROXY_CCMenuItemSprite_normalImage, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("selectedImage", JSPROXY_CCMenuItemSprite_selectedImage, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setDisabledImage", JSPROXY_CCMenuItemSprite_setDisabledImage_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setNormalImage", JSPROXY_CCMenuItemSprite_setNormalImage_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setSelectedImage", JSPROXY_CCMenuItemSprite_setSelectedImage_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("doesOpacityModifyRGB", JSPROXY_CCMenuItemSprite_doesOpacityModifyRGB, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("opacity", JSPROXY_CCMenuItemSprite_opacity, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setColor", JSPROXY_CCMenuItemSprite_setColor_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setOpacity", JSPROXY_CCMenuItemSprite_setOpacity_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setOpacityModifyRGB", JSPROXY_CCMenuItemSprite_setOpacityModifyRGB_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("itemWithNormalSpriteSelectedsprite", JSPROXY_CCMenuItemSprite_itemWithNormalSprite_selectedSprite__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FN("itemWithNormalSpriteSelectedspriteBlock", JSPROXY_CCMenuItemSprite_itemWithNormalSprite_selectedSprite_block__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FN("itemWithNormalSpriteSelectedspriteDisabledspriteBlock", JSPROXY_CCMenuItemSprite_itemWithNormalSprite_selectedSprite_disabledSprite_block__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FS_END
	};

	JSPROXY_CCMenuItemSprite_object = JS_InitClass(cx, globalObj, JSPROXY_CCMenuItem_object, JSPROXY_CCMenuItemSprite_class, JSPROXY_CCMenuItemSprite_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCMenuItemSprite

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCMenuItemSprite_class, JSPROXY_CCMenuItemSprite_object, NULL);
	JSPROXY_CCMenuItemSprite *proxy = [[JSPROXY_CCMenuItemSprite alloc] initWithJSObject:jsobj];
	[proxy setRealObj:realObj];
	JS_SetPrivate(jsobj, proxy);

	if( realObj )
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCParticleSystem
 */
#pragma mark - CCParticleSystem

JSClass* JSPROXY_CCParticleSystem_class = NULL;
JSObject* JSPROXY_CCParticleSystem_object = NULL;
 // Constructor
JSBool JSPROXY_CCParticleSystem_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCParticleSystem createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCParticleSystem_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCParticleSystem *proxy = (JSPROXY_CCParticleSystem*)JS_GetPrivate(obj);
	if (proxy) {
		objc_setAssociatedObject([proxy realObj], &JSPROXY_association_proxy_key, nil, OBJC_ASSOCIATION_ASSIGN);
		/* no callbacks */
		[proxy release];
	}
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCParticleSystem_active(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	ret_val = [real active ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_angle(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	ret_val = [real angle ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_angleVar(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	ret_val = [real angleVar ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSUInteger
JSBool JSPROXY_CCParticleSystem_atlasIndex(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSUInteger ret_val;

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	ret_val = [real atlasIndex ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCParticleSystem_autoRemoveOnFinish(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	ret_val = [real autoRemoveOnFinish ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCParticleSystem_blendAdditive(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	ret_val = [real blendAdditive ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCParticleSystem_doesOpacityModifyRGB(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	ret_val = [real doesOpacityModifyRGB ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_duration(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	ret_val = [real duration ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_emissionRate(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	ret_val = [real emissionRate ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSInteger
JSBool JSPROXY_CCParticleSystem_emitterMode(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSInteger ret_val;

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	ret_val = [real emitterMode ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_endRadius(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	ret_val = [real endRadius ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_endRadiusVar(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	ret_val = [real endRadiusVar ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_endSize(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	ret_val = [real endSize ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_endSizeVar(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	ret_val = [real endSizeVar ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_endSpin(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	ret_val = [real endSpin ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_endSpinVar(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	ret_val = [real endSpinVar ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: CGPoint
JSBool JSPROXY_CCParticleSystem_gravity(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CGPoint ret_val;

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	ret_val = [real gravity ];

	jsval ret_jsval = CGPoint_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: None
JSBool JSPROXY_CCParticleSystem_initWithFile_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );

	CCParticleSystem *real = [[CCParticleSystem alloc] initWithFile:(NSString*)arg0  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSUInteger
// Ret value: None
JSBool JSPROXY_CCParticleSystem_initWithTotalParticles_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	uint32_t arg0; JS_ValueToECMAUint32( cx, *argvp++, &arg0 );

	CCParticleSystem *real = [[CCParticleSystem alloc] initWithTotalParticles:(NSUInteger)arg0  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCParticleSystem_isFull(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	ret_val = [real isFull ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_life(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	ret_val = [real life ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_lifeVar(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	ret_val = [real lifeVar ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSUInteger
JSBool JSPROXY_CCParticleSystem_particleCount(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSUInteger ret_val;

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	ret_val = [real particleCount ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: CCParticleSystem
JSBool JSPROXY_CCParticleSystem_particleWithFile__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );

	CCParticleSystem *ret_val = [CCParticleSystem particleWithFile:(NSString*)arg0  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: CGPoint
JSBool JSPROXY_CCParticleSystem_posVar(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CGPoint ret_val;

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	ret_val = [real posVar ];

	jsval ret_jsval = CGPoint_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: 
// Ret value: tCCPositionType
JSBool JSPROXY_CCParticleSystem_positionType(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	tCCPositionType ret_val;

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	ret_val = [real positionType ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCParticleSystem_postStep(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real postStep ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_radialAccel(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	ret_val = [real radialAccel ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_radialAccelVar(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	ret_val = [real radialAccelVar ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCParticleSystem_resetSystem(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real resetSystem ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_rotatePerSecond(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	ret_val = [real rotatePerSecond ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_rotatePerSecondVar(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	ret_val = [real rotatePerSecondVar ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setAngle_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real setAngle:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setAngleVar_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real setAngleVar:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSUInteger
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setAtlasIndex_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	uint32_t arg0; JS_ValueToECMAUint32( cx, *argvp++, &arg0 );

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real setAtlasIndex:(NSUInteger)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setAutoRemoveOnFinish_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real setAutoRemoveOnFinish:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setBlendAdditive_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real setBlendAdditive:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: ccBlendFunc
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setBlendFunc_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	ccBlendFunc arg0 = *(ccBlendFunc*)JS_GetTypedArrayData( tmp_arg0);

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real setBlendFunc:(ccBlendFunc)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setDuration_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real setDuration:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setEmissionRate_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real setEmissionRate:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSInteger
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setEmitterMode_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	int32_t arg0; JS_ValueToECMAInt32( cx, *argvp++, &arg0 );

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real setEmitterMode:(NSInteger)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: ccColor4F
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setEndColor_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	ccColor4F arg0 = *(ccColor4F*)JS_GetTypedArrayData( tmp_arg0);

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real setEndColor:(ccColor4F)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: ccColor4F
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setEndColorVar_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	ccColor4F arg0 = *(ccColor4F*)JS_GetTypedArrayData( tmp_arg0);

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real setEndColorVar:(ccColor4F)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setEndRadius_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real setEndRadius:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setEndRadiusVar_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real setEndRadiusVar:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setEndSize_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real setEndSize:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setEndSizeVar_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real setEndSizeVar:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setEndSpin_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real setEndSpin:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setEndSpinVar_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real setEndSpinVar:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CGPoint
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setGravity_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	NSCAssert( JS_GetTypedArrayByteLength( tmp_arg0 ) == 8, @"Invalid length");
#ifdef __CC_PLATFORM_IOS
	CGPoint arg0 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg0 );
#elif defined(__CC_PLATFORM_MAC)
	float* arg0_array = (float*)JS_GetTypedArrayData( tmp_arg0 );
	CGPoint arg0 = ccp(arg0_array[0], arg0_array[1] );
#else
#error Unsupported Platform
#endif  

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real setGravity:(CGPoint)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setLife_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real setLife:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setLifeVar_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real setLifeVar:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setOpacityModifyRGB_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real setOpacityModifyRGB:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CGPoint
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setPosVar_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	NSCAssert( JS_GetTypedArrayByteLength( tmp_arg0 ) == 8, @"Invalid length");
#ifdef __CC_PLATFORM_IOS
	CGPoint arg0 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg0 );
#elif defined(__CC_PLATFORM_MAC)
	float* arg0_array = (float*)JS_GetTypedArrayData( tmp_arg0 );
	CGPoint arg0 = ccp(arg0_array[0], arg0_array[1] );
#else
#error Unsupported Platform
#endif  

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real setPosVar:(CGPoint)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: tCCPositionType
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setPositionType_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	int32_t arg0; JS_ValueToECMAInt32( cx, *argvp++, &arg0 );

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real setPositionType:(tCCPositionType)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setRadialAccel_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real setRadialAccel:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setRadialAccelVar_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real setRadialAccelVar:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setRotatePerSecond_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real setRotatePerSecond:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setRotatePerSecondVar_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real setRotatePerSecondVar:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CGPoint
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setSourcePosition_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	NSCAssert( JS_GetTypedArrayByteLength( tmp_arg0 ) == 8, @"Invalid length");
#ifdef __CC_PLATFORM_IOS
	CGPoint arg0 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg0 );
#elif defined(__CC_PLATFORM_MAC)
	float* arg0_array = (float*)JS_GetTypedArrayData( tmp_arg0 );
	CGPoint arg0 = ccp(arg0_array[0], arg0_array[1] );
#else
#error Unsupported Platform
#endif  

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real setSourcePosition:(CGPoint)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setSpeed_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real setSpeed:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setSpeedVar_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real setSpeedVar:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: ccColor4F
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setStartColor_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	ccColor4F arg0 = *(ccColor4F*)JS_GetTypedArrayData( tmp_arg0);

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real setStartColor:(ccColor4F)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: ccColor4F
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setStartColorVar_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	ccColor4F arg0 = *(ccColor4F*)JS_GetTypedArrayData( tmp_arg0);

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real setStartColorVar:(ccColor4F)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setStartRadius_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real setStartRadius:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setStartRadiusVar_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real setStartRadiusVar:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setStartSize_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real setStartSize:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setStartSizeVar_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real setStartSizeVar:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setStartSpin_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real setStartSpin:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setStartSpinVar_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real setStartSpinVar:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setTangentialAccel_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real setTangentialAccel:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setTangentialAccelVar_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real setTangentialAccelVar:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCTexture2D*
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setTexture_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCTexture2D* arg0 = (CCTexture2D*) jsval_to_nsobject( *argvp++, cx);

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real setTexture:(CCTexture2D*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSUInteger
// Ret value: None
JSBool JSPROXY_CCParticleSystem_setTotalParticles_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	uint32_t arg0; JS_ValueToECMAUint32( cx, *argvp++, &arg0 );

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real setTotalParticles:(NSUInteger)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: CGPoint
JSBool JSPROXY_CCParticleSystem_sourcePosition(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CGPoint ret_val;

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	ret_val = [real sourcePosition ];

	jsval ret_jsval = CGPoint_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_speed(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	ret_val = [real speed ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_speedVar(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	ret_val = [real speedVar ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_startRadius(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	ret_val = [real startRadius ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_startRadiusVar(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	ret_val = [real startRadiusVar ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_startSize(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	ret_val = [real startSize ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_startSizeVar(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	ret_val = [real startSizeVar ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_startSpin(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	ret_val = [real startSpin ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_startSpinVar(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	ret_val = [real startSpinVar ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCParticleSystem_stopSystem(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real stopSystem ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_tangentialAccel(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	ret_val = [real tangentialAccel ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCParticleSystem_tangentialAccelVar(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	ret_val = [real tangentialAccelVar ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: CCTexture2D*
JSBool JSPROXY_CCParticleSystem_texture(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CCTexture2D* ret_val;

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	ret_val = [real texture ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: NSUInteger
JSBool JSPROXY_CCParticleSystem_totalParticles(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSUInteger ret_val;

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	ret_val = [real totalParticles ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: ccTime
// Ret value: None
JSBool JSPROXY_CCParticleSystem_update_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real update:(ccTime)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCParticleSystem_updateWithNoTime(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCParticleSystem *real = (CCParticleSystem*) [proxy realObj];
	[real updateWithNoTime ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

void JSPROXY_CCParticleSystem_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCParticleSystem_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCParticleSystem_class->name = name;
	JSPROXY_CCParticleSystem_class->addProperty = JS_PropertyStub;
	JSPROXY_CCParticleSystem_class->delProperty = JS_PropertyStub;
	JSPROXY_CCParticleSystem_class->getProperty = JS_PropertyStub;
	JSPROXY_CCParticleSystem_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCParticleSystem_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCParticleSystem_class->resolve = JS_ResolveStub;
	JSPROXY_CCParticleSystem_class->convert = JS_ConvertStub;
	JSPROXY_CCParticleSystem_class->finalize = JSPROXY_CCParticleSystem_finalize;
	JSPROXY_CCParticleSystem_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("active", JSPROXY_CCParticleSystem_active, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("angle", JSPROXY_CCParticleSystem_angle, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("angleVar", JSPROXY_CCParticleSystem_angleVar, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("atlasIndex", JSPROXY_CCParticleSystem_atlasIndex, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("autoRemoveOnFinish", JSPROXY_CCParticleSystem_autoRemoveOnFinish, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("blendAdditive", JSPROXY_CCParticleSystem_blendAdditive, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("doesOpacityModifyRGB", JSPROXY_CCParticleSystem_doesOpacityModifyRGB, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("duration", JSPROXY_CCParticleSystem_duration, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("emissionRate", JSPROXY_CCParticleSystem_emissionRate, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("emitterMode", JSPROXY_CCParticleSystem_emitterMode, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("endRadius", JSPROXY_CCParticleSystem_endRadius, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("endRadiusVar", JSPROXY_CCParticleSystem_endRadiusVar, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("endSize", JSPROXY_CCParticleSystem_endSize, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("endSizeVar", JSPROXY_CCParticleSystem_endSizeVar, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("endSpin", JSPROXY_CCParticleSystem_endSpin, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("endSpinVar", JSPROXY_CCParticleSystem_endSpinVar, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("gravity", JSPROXY_CCParticleSystem_gravity, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithFile", JSPROXY_CCParticleSystem_initWithFile_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithTotalParticles", JSPROXY_CCParticleSystem_initWithTotalParticles_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("isFull", JSPROXY_CCParticleSystem_isFull, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("life", JSPROXY_CCParticleSystem_life, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("lifeVar", JSPROXY_CCParticleSystem_lifeVar, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("particleCount", JSPROXY_CCParticleSystem_particleCount, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("posVar", JSPROXY_CCParticleSystem_posVar, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("positionType", JSPROXY_CCParticleSystem_positionType, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("postStep", JSPROXY_CCParticleSystem_postStep, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("radialAccel", JSPROXY_CCParticleSystem_radialAccel, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("radialAccelVar", JSPROXY_CCParticleSystem_radialAccelVar, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("resetSystem", JSPROXY_CCParticleSystem_resetSystem, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("rotatePerSecond", JSPROXY_CCParticleSystem_rotatePerSecond, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("rotatePerSecondVar", JSPROXY_CCParticleSystem_rotatePerSecondVar, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setAngle", JSPROXY_CCParticleSystem_setAngle_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setAngleVar", JSPROXY_CCParticleSystem_setAngleVar_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setAtlasIndex", JSPROXY_CCParticleSystem_setAtlasIndex_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setAutoRemoveOnFinish", JSPROXY_CCParticleSystem_setAutoRemoveOnFinish_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setBlendAdditive", JSPROXY_CCParticleSystem_setBlendAdditive_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setBlendFunc", JSPROXY_CCParticleSystem_setBlendFunc_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setDuration", JSPROXY_CCParticleSystem_setDuration_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setEmissionRate", JSPROXY_CCParticleSystem_setEmissionRate_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setEmitterMode", JSPROXY_CCParticleSystem_setEmitterMode_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setEndColor", JSPROXY_CCParticleSystem_setEndColor_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setEndColorVar", JSPROXY_CCParticleSystem_setEndColorVar_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setEndRadius", JSPROXY_CCParticleSystem_setEndRadius_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setEndRadiusVar", JSPROXY_CCParticleSystem_setEndRadiusVar_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setEndSize", JSPROXY_CCParticleSystem_setEndSize_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setEndSizeVar", JSPROXY_CCParticleSystem_setEndSizeVar_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setEndSpin", JSPROXY_CCParticleSystem_setEndSpin_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setEndSpinVar", JSPROXY_CCParticleSystem_setEndSpinVar_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setGravity", JSPROXY_CCParticleSystem_setGravity_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setLife", JSPROXY_CCParticleSystem_setLife_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setLifeVar", JSPROXY_CCParticleSystem_setLifeVar_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setOpacityModifyRGB", JSPROXY_CCParticleSystem_setOpacityModifyRGB_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setPosVar", JSPROXY_CCParticleSystem_setPosVar_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setPositionType", JSPROXY_CCParticleSystem_setPositionType_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setRadialAccel", JSPROXY_CCParticleSystem_setRadialAccel_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setRadialAccelVar", JSPROXY_CCParticleSystem_setRadialAccelVar_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setRotatePerSecond", JSPROXY_CCParticleSystem_setRotatePerSecond_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setRotatePerSecondVar", JSPROXY_CCParticleSystem_setRotatePerSecondVar_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setSourcePosition", JSPROXY_CCParticleSystem_setSourcePosition_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setSpeed", JSPROXY_CCParticleSystem_setSpeed_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setSpeedVar", JSPROXY_CCParticleSystem_setSpeedVar_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setStartColor", JSPROXY_CCParticleSystem_setStartColor_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setStartColorVar", JSPROXY_CCParticleSystem_setStartColorVar_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setStartRadius", JSPROXY_CCParticleSystem_setStartRadius_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setStartRadiusVar", JSPROXY_CCParticleSystem_setStartRadiusVar_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setStartSize", JSPROXY_CCParticleSystem_setStartSize_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setStartSizeVar", JSPROXY_CCParticleSystem_setStartSizeVar_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setStartSpin", JSPROXY_CCParticleSystem_setStartSpin_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setStartSpinVar", JSPROXY_CCParticleSystem_setStartSpinVar_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setTangentialAccel", JSPROXY_CCParticleSystem_setTangentialAccel_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setTangentialAccelVar", JSPROXY_CCParticleSystem_setTangentialAccelVar_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setTexture", JSPROXY_CCParticleSystem_setTexture_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setTotalParticles", JSPROXY_CCParticleSystem_setTotalParticles_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("sourcePosition", JSPROXY_CCParticleSystem_sourcePosition, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("speed", JSPROXY_CCParticleSystem_speed, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("speedVar", JSPROXY_CCParticleSystem_speedVar, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("startRadius", JSPROXY_CCParticleSystem_startRadius, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("startRadiusVar", JSPROXY_CCParticleSystem_startRadiusVar, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("startSize", JSPROXY_CCParticleSystem_startSize, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("startSizeVar", JSPROXY_CCParticleSystem_startSizeVar, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("startSpin", JSPROXY_CCParticleSystem_startSpin, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("startSpinVar", JSPROXY_CCParticleSystem_startSpinVar, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("stopSystem", JSPROXY_CCParticleSystem_stopSystem, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("tangentialAccel", JSPROXY_CCParticleSystem_tangentialAccel, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("tangentialAccelVar", JSPROXY_CCParticleSystem_tangentialAccelVar, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("texture", JSPROXY_CCParticleSystem_texture, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("totalParticles", JSPROXY_CCParticleSystem_totalParticles, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("update", JSPROXY_CCParticleSystem_update_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("updateWithNoTime", JSPROXY_CCParticleSystem_updateWithNoTime, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("particleWithFile", JSPROXY_CCParticleSystem_particleWithFile__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FS_END
	};

	JSPROXY_CCParticleSystem_object = JS_InitClass(cx, globalObj, JSPROXY_CCNode_object, JSPROXY_CCParticleSystem_class, JSPROXY_CCParticleSystem_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCParticleSystem

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCParticleSystem_class, JSPROXY_CCParticleSystem_object, NULL);
	JSPROXY_CCParticleSystem *proxy = [[JSPROXY_CCParticleSystem alloc] initWithJSObject:jsobj];
	[proxy setRealObj:realObj];
	JS_SetPrivate(jsobj, proxy);

	if( realObj )
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCScene
 */
#pragma mark - CCScene

JSClass* JSPROXY_CCScene_class = NULL;
JSObject* JSPROXY_CCScene_object = NULL;
 // Constructor
JSBool JSPROXY_CCScene_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCScene createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCScene_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCScene *proxy = (JSPROXY_CCScene*)JS_GetPrivate(obj);
	if (proxy) {
		objc_setAssociatedObject([proxy realObj], &JSPROXY_association_proxy_key, nil, OBJC_ASSOCIATION_ASSIGN);
		/* no callbacks */
		[proxy release];
	}
}

// Arguments: 
// Ret value: CCScene
JSBool JSPROXY_CCScene_node_static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCScene *ret_val = [CCScene node ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

void JSPROXY_CCScene_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCScene_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCScene_class->name = name;
	JSPROXY_CCScene_class->addProperty = JS_PropertyStub;
	JSPROXY_CCScene_class->delProperty = JS_PropertyStub;
	JSPROXY_CCScene_class->getProperty = JS_PropertyStub;
	JSPROXY_CCScene_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCScene_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCScene_class->resolve = JS_ResolveStub;
	JSPROXY_CCScene_class->convert = JS_ConvertStub;
	JSPROXY_CCScene_class->finalize = JSPROXY_CCScene_finalize;
	JSPROXY_CCScene_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("node", JSPROXY_CCScene_node_static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FS_END
	};

	JSPROXY_CCScene_object = JS_InitClass(cx, globalObj, JSPROXY_CCNode_object, JSPROXY_CCScene_class, JSPROXY_CCScene_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCScene

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCScene_class, JSPROXY_CCScene_object, NULL);
	JSPROXY_CCScene *proxy = [[JSPROXY_CCScene alloc] initWithJSObject:jsobj];
	[proxy setRealObj:realObj];
	JS_SetPrivate(jsobj, proxy);

	if( realObj )
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCRotateBy
 */
#pragma mark - CCRotateBy

JSClass* JSPROXY_CCRotateBy_class = NULL;
JSObject* JSPROXY_CCRotateBy_object = NULL;
 // Constructor
JSBool JSPROXY_CCRotateBy_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCRotateBy createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCRotateBy_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCRotateBy *proxy = (JSPROXY_CCRotateBy*)JS_GetPrivate(obj);
	if (proxy) {
		objc_setAssociatedObject([proxy realObj], &JSPROXY_association_proxy_key, nil, OBJC_ASSOCIATION_ASSIGN);
		/* no callbacks */
		[proxy release];
	}
}

// Arguments: ccTime, float
// Ret value: CCRotateBy
JSBool JSPROXY_CCRotateBy_actionWithDuration_angle__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );
	double arg1; JS_ValueToNumber( cx, *argvp++, &arg1 );

	CCRotateBy *ret_val = [CCRotateBy actionWithDuration:(ccTime)arg0 angle:(float)arg1  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: ccTime, float
// Ret value: None
JSBool JSPROXY_CCRotateBy_initWithDuration_angle_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );
	double arg1; JS_ValueToNumber( cx, *argvp++, &arg1 );

	CCRotateBy *real = [[CCRotateBy alloc] initWithDuration:(ccTime)arg0 angle:(float)arg1  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

void JSPROXY_CCRotateBy_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCRotateBy_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCRotateBy_class->name = name;
	JSPROXY_CCRotateBy_class->addProperty = JS_PropertyStub;
	JSPROXY_CCRotateBy_class->delProperty = JS_PropertyStub;
	JSPROXY_CCRotateBy_class->getProperty = JS_PropertyStub;
	JSPROXY_CCRotateBy_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCRotateBy_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCRotateBy_class->resolve = JS_ResolveStub;
	JSPROXY_CCRotateBy_class->convert = JS_ConvertStub;
	JSPROXY_CCRotateBy_class->finalize = JSPROXY_CCRotateBy_finalize;
	JSPROXY_CCRotateBy_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("initWithDurationAngle", JSPROXY_CCRotateBy_initWithDuration_angle_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("actionWithDurationAngle", JSPROXY_CCRotateBy_actionWithDuration_angle__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FS_END
	};

	JSPROXY_CCRotateBy_object = JS_InitClass(cx, globalObj, JSPROXY_CCActionInterval_object, JSPROXY_CCRotateBy_class, JSPROXY_CCRotateBy_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCRotateBy

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCRotateBy_class, JSPROXY_CCRotateBy_object, NULL);
	JSPROXY_CCRotateBy *proxy = [[JSPROXY_CCRotateBy alloc] initWithJSObject:jsobj];
	[proxy setRealObj:realObj];
	JS_SetPrivate(jsobj, proxy);

	if( realObj )
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCTintBy
 */
#pragma mark - CCTintBy

JSClass* JSPROXY_CCTintBy_class = NULL;
JSObject* JSPROXY_CCTintBy_object = NULL;
 // Constructor
JSBool JSPROXY_CCTintBy_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCTintBy createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCTintBy_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCTintBy *proxy = (JSPROXY_CCTintBy*)JS_GetPrivate(obj);
	if (proxy) {
		objc_setAssociatedObject([proxy realObj], &JSPROXY_association_proxy_key, nil, OBJC_ASSOCIATION_ASSIGN);
		/* no callbacks */
		[proxy release];
	}
}

// Arguments: ccTime, GLshort, GLshort, GLshort
// Ret value: CCTintBy
JSBool JSPROXY_CCTintBy_actionWithDuration_red_green_blue__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 4, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );
	uint16_t arg1; JS_ValueToUint16( cx, *argvp++, &arg1 );
	uint16_t arg2; JS_ValueToUint16( cx, *argvp++, &arg2 );
	uint16_t arg3; JS_ValueToUint16( cx, *argvp++, &arg3 );

	CCTintBy *ret_val = [CCTintBy actionWithDuration:(ccTime)arg0 red:(GLshort)arg1 green:(GLshort)arg2 blue:(GLshort)arg3  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: ccTime, GLshort, GLshort, GLshort
// Ret value: None
JSBool JSPROXY_CCTintBy_initWithDuration_red_green_blue_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 4, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );
	uint16_t arg1; JS_ValueToUint16( cx, *argvp++, &arg1 );
	uint16_t arg2; JS_ValueToUint16( cx, *argvp++, &arg2 );
	uint16_t arg3; JS_ValueToUint16( cx, *argvp++, &arg3 );

	CCTintBy *real = [[CCTintBy alloc] initWithDuration:(ccTime)arg0 red:(GLshort)arg1 green:(GLshort)arg2 blue:(GLshort)arg3  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

void JSPROXY_CCTintBy_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCTintBy_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCTintBy_class->name = name;
	JSPROXY_CCTintBy_class->addProperty = JS_PropertyStub;
	JSPROXY_CCTintBy_class->delProperty = JS_PropertyStub;
	JSPROXY_CCTintBy_class->getProperty = JS_PropertyStub;
	JSPROXY_CCTintBy_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCTintBy_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCTintBy_class->resolve = JS_ResolveStub;
	JSPROXY_CCTintBy_class->convert = JS_ConvertStub;
	JSPROXY_CCTintBy_class->finalize = JSPROXY_CCTintBy_finalize;
	JSPROXY_CCTintBy_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("initWithDurationRedGreenBlue", JSPROXY_CCTintBy_initWithDuration_red_green_blue_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("actionWithDurationRedGreenBlue", JSPROXY_CCTintBy_actionWithDuration_red_green_blue__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FS_END
	};

	JSPROXY_CCTintBy_object = JS_InitClass(cx, globalObj, JSPROXY_CCActionInterval_object, JSPROXY_CCTintBy_class, JSPROXY_CCTintBy_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCTintBy

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCTintBy_class, JSPROXY_CCTintBy_object, NULL);
	JSPROXY_CCTintBy *proxy = [[JSPROXY_CCTintBy alloc] initWithJSObject:jsobj];
	[proxy setRealObj:realObj];
	JS_SetPrivate(jsobj, proxy);

	if( realObj )
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCMenuItemLabel
 */
#pragma mark - CCMenuItemLabel

JSClass* JSPROXY_CCMenuItemLabel_class = NULL;
JSObject* JSPROXY_CCMenuItemLabel_object = NULL;
 // Constructor
JSBool JSPROXY_CCMenuItemLabel_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCMenuItemLabel createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCMenuItemLabel_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCMenuItemLabel *proxy = (JSPROXY_CCMenuItemLabel*)JS_GetPrivate(obj);
	if (proxy) {
		objc_setAssociatedObject([proxy realObj], &JSPROXY_association_proxy_key, nil, OBJC_ASSOCIATION_ASSIGN);
		/* no callbacks */
		[proxy release];
	}
}

// Arguments: CCNode*, void (^)(id)
// Ret value: None
JSBool JSPROXY_CCMenuItemLabel_initWithLabel_block_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCNode* arg0 = (CCNode*) jsval_to_nsobject( *argvp++, cx);

	// Parsing function
	js_block arg1 = jsval_to_block( *argvp++, cx, JS_THIS_OBJECT(cx, vp) );

	CCMenuItemLabel *real = [[CCMenuItemLabel alloc] initWithLabel:(CCNode*)arg0 block:(void (^)(id))arg1  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCNode*
// Ret value: CCMenuItemLabel
JSBool JSPROXY_CCMenuItemLabel_itemWithLabel__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCNode* arg0 = (CCNode*) jsval_to_nsobject( *argvp++, cx);

	CCMenuItemLabel *ret_val = [CCMenuItemLabel itemWithLabel:(CCNode*)arg0  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: CCNode*, void (^)(id)
// Ret value: CCMenuItemLabel
JSBool JSPROXY_CCMenuItemLabel_itemWithLabel_block__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCNode* arg0 = (CCNode*) jsval_to_nsobject( *argvp++, cx);

	// Parsing function
	js_block arg1 = jsval_to_block( *argvp++, cx, JS_THIS_OBJECT(cx, vp) );

	CCMenuItemLabel *ret_val = [CCMenuItemLabel itemWithLabel:(CCNode*)arg0 block:(void (^)(id))arg1  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: CCNode*
JSBool JSPROXY_CCMenuItemLabel_label(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CCNode* ret_val;

	CCMenuItemLabel *real = (CCMenuItemLabel*) [proxy realObj];
	ret_val = [real label ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: ccColor3B
// Ret value: None
JSBool JSPROXY_CCMenuItemLabel_setDisabledColor_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	ccColor3B arg0 = *(ccColor3B*)JS_GetTypedArrayData( tmp_arg0);

	CCMenuItemLabel *real = (CCMenuItemLabel*) [proxy realObj];
	[real setDisabledColor:(ccColor3B)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCMenuItemLabel_setIsEnabled_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	CCMenuItemLabel *real = (CCMenuItemLabel*) [proxy realObj];
	[real setIsEnabled:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCNode*
// Ret value: None
JSBool JSPROXY_CCMenuItemLabel_setLabel_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCNode* arg0 = (CCNode*) jsval_to_nsobject( *argvp++, cx);

	CCMenuItemLabel *real = (CCMenuItemLabel*) [proxy realObj];
	[real setLabel:(CCNode*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: None
JSBool JSPROXY_CCMenuItemLabel_setString_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );

	CCMenuItemLabel *real = (CCMenuItemLabel*) [proxy realObj];
	[real setString:(NSString*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCMenuItemLabel_doesOpacityModifyRGB(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CCMenuItemLabel *real = (CCMenuItemLabel*) [proxy realObj];
	ret_val = [real doesOpacityModifyRGB ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: GLubyte
JSBool JSPROXY_CCMenuItemLabel_opacity(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	GLubyte ret_val;

	CCMenuItemLabel *real = (CCMenuItemLabel*) [proxy realObj];
	ret_val = [real opacity ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: ccColor3B
// Ret value: None
JSBool JSPROXY_CCMenuItemLabel_setColor_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	ccColor3B arg0 = *(ccColor3B*)JS_GetTypedArrayData( tmp_arg0);

	CCMenuItemLabel *real = (CCMenuItemLabel*) [proxy realObj];
	[real setColor:(ccColor3B)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: GLubyte
// Ret value: None
JSBool JSPROXY_CCMenuItemLabel_setOpacity_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	uint16_t arg0; JS_ValueToUint16( cx, *argvp++, &arg0 );

	CCMenuItemLabel *real = (CCMenuItemLabel*) [proxy realObj];
	[real setOpacity:(GLubyte)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCMenuItemLabel_setOpacityModifyRGB_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	CCMenuItemLabel *real = (CCMenuItemLabel*) [proxy realObj];
	[real setOpacityModifyRGB:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

void JSPROXY_CCMenuItemLabel_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCMenuItemLabel_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCMenuItemLabel_class->name = name;
	JSPROXY_CCMenuItemLabel_class->addProperty = JS_PropertyStub;
	JSPROXY_CCMenuItemLabel_class->delProperty = JS_PropertyStub;
	JSPROXY_CCMenuItemLabel_class->getProperty = JS_PropertyStub;
	JSPROXY_CCMenuItemLabel_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCMenuItemLabel_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCMenuItemLabel_class->resolve = JS_ResolveStub;
	JSPROXY_CCMenuItemLabel_class->convert = JS_ConvertStub;
	JSPROXY_CCMenuItemLabel_class->finalize = JSPROXY_CCMenuItemLabel_finalize;
	JSPROXY_CCMenuItemLabel_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("initWithLabelBlock", JSPROXY_CCMenuItemLabel_initWithLabel_block_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("label", JSPROXY_CCMenuItemLabel_label, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setDisabledColor", JSPROXY_CCMenuItemLabel_setDisabledColor_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setIsEnabled", JSPROXY_CCMenuItemLabel_setIsEnabled_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setLabel", JSPROXY_CCMenuItemLabel_setLabel_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setString", JSPROXY_CCMenuItemLabel_setString_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("doesOpacityModifyRGB", JSPROXY_CCMenuItemLabel_doesOpacityModifyRGB, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("opacity", JSPROXY_CCMenuItemLabel_opacity, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setColor", JSPROXY_CCMenuItemLabel_setColor_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setOpacity", JSPROXY_CCMenuItemLabel_setOpacity_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setOpacityModifyRGB", JSPROXY_CCMenuItemLabel_setOpacityModifyRGB_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("itemWithLabel", JSPROXY_CCMenuItemLabel_itemWithLabel__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FN("itemWithLabelBlock", JSPROXY_CCMenuItemLabel_itemWithLabel_block__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FS_END
	};

	JSPROXY_CCMenuItemLabel_object = JS_InitClass(cx, globalObj, JSPROXY_CCMenuItem_object, JSPROXY_CCMenuItemLabel_class, JSPROXY_CCMenuItemLabel_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCMenuItemLabel

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCMenuItemLabel_class, JSPROXY_CCMenuItemLabel_object, NULL);
	JSPROXY_CCMenuItemLabel *proxy = [[JSPROXY_CCMenuItemLabel alloc] initWithJSObject:jsobj];
	[proxy setRealObj:realObj];
	JS_SetPrivate(jsobj, proxy);

	if( realObj )
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCMenuItemFont
 */
#pragma mark - CCMenuItemFont

JSClass* JSPROXY_CCMenuItemFont_class = NULL;
JSObject* JSPROXY_CCMenuItemFont_object = NULL;
 // Constructor
JSBool JSPROXY_CCMenuItemFont_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCMenuItemFont createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCMenuItemFont_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCMenuItemFont *proxy = (JSPROXY_CCMenuItemFont*)JS_GetPrivate(obj);
	if (proxy) {
		objc_setAssociatedObject([proxy realObj], &JSPROXY_association_proxy_key, nil, OBJC_ASSOCIATION_ASSIGN);
		/* no callbacks */
		[proxy release];
	}
}

// Arguments: 
// Ret value: NSString*
JSBool JSPROXY_CCMenuItemFont_fontName_static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	NSString* ret_val = [CCMenuItemFont fontName ];

	JSString *ret_obj = JS_NewStringCopyZ(cx, [ret_val UTF8String]);
	JS_SET_RVAL(cx, vp, STRING_TO_JSVAL(ret_obj) );

	return JS_TRUE;
}

// Arguments: 
// Ret value: NSString*
JSBool JSPROXY_CCMenuItemFont_fontName(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSString* ret_val;

	CCMenuItemFont *real = (CCMenuItemFont*) [proxy realObj];
	ret_val = [real fontName ];

	JSString *ret_obj = JS_NewStringCopyZ(cx, [ret_val UTF8String]);
	JS_SET_RVAL(cx, vp, STRING_TO_JSVAL(ret_obj) );

	return JS_TRUE;
}

// Arguments: 
// Ret value: NSUInteger
JSBool JSPROXY_CCMenuItemFont_fontSize_static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	NSUInteger ret_val = [CCMenuItemFont fontSize ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSUInteger
JSBool JSPROXY_CCMenuItemFont_fontSize(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSUInteger ret_val;

	CCMenuItemFont *real = (CCMenuItemFont*) [proxy realObj];
	ret_val = [real fontSize ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: NSString*, void (^)(id)
// Ret value: None
JSBool JSPROXY_CCMenuItemFont_initWithString_block_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );

	// Parsing function
	js_block arg1 = jsval_to_block( *argvp++, cx, JS_THIS_OBJECT(cx, vp) );

	CCMenuItemFont *real = [[CCMenuItemFont alloc] initWithString:(NSString*)arg0 block:(void (^)(id))arg1  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: CCMenuItemFont
JSBool JSPROXY_CCMenuItemFont_itemWithString__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );

	CCMenuItemFont *ret_val = [CCMenuItemFont itemWithString:(NSString*)arg0  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: NSString*, void (^)(id)
// Ret value: CCMenuItemFont
JSBool JSPROXY_CCMenuItemFont_itemWithString_block__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );

	// Parsing function
	js_block arg1 = jsval_to_block( *argvp++, cx, JS_THIS_OBJECT(cx, vp) );

	CCMenuItemFont *ret_val = [CCMenuItemFont itemWithString:(NSString*)arg0 block:(void (^)(id))arg1  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: None
JSBool JSPROXY_CCMenuItemFont_setFontName__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );

	[CCMenuItemFont setFontName:(NSString*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: None
JSBool JSPROXY_CCMenuItemFont_setFontName_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );

	CCMenuItemFont *real = (CCMenuItemFont*) [proxy realObj];
	[real setFontName:(NSString*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSUInteger
// Ret value: None
JSBool JSPROXY_CCMenuItemFont_setFontSize__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	uint32_t arg0; JS_ValueToECMAUint32( cx, *argvp++, &arg0 );

	[CCMenuItemFont setFontSize:(NSUInteger)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSUInteger
// Ret value: None
JSBool JSPROXY_CCMenuItemFont_setFontSize_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	uint32_t arg0; JS_ValueToECMAUint32( cx, *argvp++, &arg0 );

	CCMenuItemFont *real = (CCMenuItemFont*) [proxy realObj];
	[real setFontSize:(NSUInteger)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

void JSPROXY_CCMenuItemFont_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCMenuItemFont_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCMenuItemFont_class->name = name;
	JSPROXY_CCMenuItemFont_class->addProperty = JS_PropertyStub;
	JSPROXY_CCMenuItemFont_class->delProperty = JS_PropertyStub;
	JSPROXY_CCMenuItemFont_class->getProperty = JS_PropertyStub;
	JSPROXY_CCMenuItemFont_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCMenuItemFont_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCMenuItemFont_class->resolve = JS_ResolveStub;
	JSPROXY_CCMenuItemFont_class->convert = JS_ConvertStub;
	JSPROXY_CCMenuItemFont_class->finalize = JSPROXY_CCMenuItemFont_finalize;
	JSPROXY_CCMenuItemFont_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("fontName", JSPROXY_CCMenuItemFont_fontName, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("fontSize", JSPROXY_CCMenuItemFont_fontSize, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithStringBlock", JSPROXY_CCMenuItemFont_initWithString_block_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setFontName", JSPROXY_CCMenuItemFont_setFontName_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setFontSize", JSPROXY_CCMenuItemFont_setFontSize_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("fontName", JSPROXY_CCMenuItemFont_fontName_static, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("fontSize", JSPROXY_CCMenuItemFont_fontSize_static, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("itemWithString", JSPROXY_CCMenuItemFont_itemWithString__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FN("itemWithStringBlock", JSPROXY_CCMenuItemFont_itemWithString_block__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FN("setFontName", JSPROXY_CCMenuItemFont_setFontName__static, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setFontSize", JSPROXY_CCMenuItemFont_setFontSize__static, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};

	JSPROXY_CCMenuItemFont_object = JS_InitClass(cx, globalObj, JSPROXY_CCMenuItemLabel_object, JSPROXY_CCMenuItemFont_class, JSPROXY_CCMenuItemFont_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCMenuItemFont

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCMenuItemFont_class, JSPROXY_CCMenuItemFont_object, NULL);
	JSPROXY_CCMenuItemFont *proxy = [[JSPROXY_CCMenuItemFont alloc] initWithJSObject:jsobj];
	[proxy setRealObj:realObj];
	JS_SetPrivate(jsobj, proxy);

	if( realObj )
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCSkewTo
 */
#pragma mark - CCSkewTo

JSClass* JSPROXY_CCSkewTo_class = NULL;
JSObject* JSPROXY_CCSkewTo_object = NULL;
 // Constructor
JSBool JSPROXY_CCSkewTo_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCSkewTo createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCSkewTo_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCSkewTo *proxy = (JSPROXY_CCSkewTo*)JS_GetPrivate(obj);
	if (proxy) {
		objc_setAssociatedObject([proxy realObj], &JSPROXY_association_proxy_key, nil, OBJC_ASSOCIATION_ASSIGN);
		/* no callbacks */
		[proxy release];
	}
}

// Arguments: ccTime, float, float
// Ret value: CCSkewTo
JSBool JSPROXY_CCSkewTo_actionWithDuration_skewX_skewY__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 3, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );
	double arg1; JS_ValueToNumber( cx, *argvp++, &arg1 );
	double arg2; JS_ValueToNumber( cx, *argvp++, &arg2 );

	CCSkewTo *ret_val = [CCSkewTo actionWithDuration:(ccTime)arg0 skewX:(float)arg1 skewY:(float)arg2  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: ccTime, float, float
// Ret value: None
JSBool JSPROXY_CCSkewTo_initWithDuration_skewX_skewY_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 3, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );
	double arg1; JS_ValueToNumber( cx, *argvp++, &arg1 );
	double arg2; JS_ValueToNumber( cx, *argvp++, &arg2 );

	CCSkewTo *real = [[CCSkewTo alloc] initWithDuration:(ccTime)arg0 skewX:(float)arg1 skewY:(float)arg2  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

void JSPROXY_CCSkewTo_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCSkewTo_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCSkewTo_class->name = name;
	JSPROXY_CCSkewTo_class->addProperty = JS_PropertyStub;
	JSPROXY_CCSkewTo_class->delProperty = JS_PropertyStub;
	JSPROXY_CCSkewTo_class->getProperty = JS_PropertyStub;
	JSPROXY_CCSkewTo_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCSkewTo_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCSkewTo_class->resolve = JS_ResolveStub;
	JSPROXY_CCSkewTo_class->convert = JS_ConvertStub;
	JSPROXY_CCSkewTo_class->finalize = JSPROXY_CCSkewTo_finalize;
	JSPROXY_CCSkewTo_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("initWithDurationSkewxSkewy", JSPROXY_CCSkewTo_initWithDuration_skewX_skewY_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("actionWithDurationSkewxSkewy", JSPROXY_CCSkewTo_actionWithDuration_skewX_skewY__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FS_END
	};

	JSPROXY_CCSkewTo_object = JS_InitClass(cx, globalObj, JSPROXY_CCActionInterval_object, JSPROXY_CCSkewTo_class, JSPROXY_CCSkewTo_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCSkewTo

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCSkewTo_class, JSPROXY_CCSkewTo_object, NULL);
	JSPROXY_CCSkewTo *proxy = [[JSPROXY_CCSkewTo alloc] initWithJSObject:jsobj];
	[proxy setRealObj:realObj];
	JS_SetPrivate(jsobj, proxy);

	if( realObj )
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCSkewBy
 */
#pragma mark - CCSkewBy

JSClass* JSPROXY_CCSkewBy_class = NULL;
JSObject* JSPROXY_CCSkewBy_object = NULL;
 // Constructor
JSBool JSPROXY_CCSkewBy_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCSkewBy createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCSkewBy_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCSkewBy *proxy = (JSPROXY_CCSkewBy*)JS_GetPrivate(obj);
	if (proxy) {
		objc_setAssociatedObject([proxy realObj], &JSPROXY_association_proxy_key, nil, OBJC_ASSOCIATION_ASSIGN);
		/* no callbacks */
		[proxy release];
	}
}

// Arguments: ccTime, float, float
// Ret value: None
JSBool JSPROXY_CCSkewBy_initWithDuration_skewX_skewY_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 3, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );
	double arg1; JS_ValueToNumber( cx, *argvp++, &arg1 );
	double arg2; JS_ValueToNumber( cx, *argvp++, &arg2 );

	CCSkewBy *real = [[CCSkewBy alloc] initWithDuration:(ccTime)arg0 skewX:(float)arg1 skewY:(float)arg2  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

void JSPROXY_CCSkewBy_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCSkewBy_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCSkewBy_class->name = name;
	JSPROXY_CCSkewBy_class->addProperty = JS_PropertyStub;
	JSPROXY_CCSkewBy_class->delProperty = JS_PropertyStub;
	JSPROXY_CCSkewBy_class->getProperty = JS_PropertyStub;
	JSPROXY_CCSkewBy_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCSkewBy_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCSkewBy_class->resolve = JS_ResolveStub;
	JSPROXY_CCSkewBy_class->convert = JS_ConvertStub;
	JSPROXY_CCSkewBy_class->finalize = JSPROXY_CCSkewBy_finalize;
	JSPROXY_CCSkewBy_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("initWithDurationSkewxSkewy", JSPROXY_CCSkewBy_initWithDuration_skewX_skewY_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FS_END
	};

	JSPROXY_CCSkewBy_object = JS_InitClass(cx, globalObj, JSPROXY_CCSkewTo_object, JSPROXY_CCSkewBy_class, JSPROXY_CCSkewBy_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCSkewBy

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCSkewBy_class, JSPROXY_CCSkewBy_object, NULL);
	JSPROXY_CCSkewBy *proxy = [[JSPROXY_CCSkewBy alloc] initWithJSObject:jsobj];
	[proxy setRealObj:realObj];
	JS_SetPrivate(jsobj, proxy);

	if( realObj )
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCLayer
 */
#pragma mark - CCLayer

JSClass* JSPROXY_CCLayer_class = NULL;
JSObject* JSPROXY_CCLayer_object = NULL;
 // Constructor
JSBool JSPROXY_CCLayer_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCLayer createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCLayer_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCLayer *proxy = (JSPROXY_CCLayer*)JS_GetPrivate(obj);
	if (proxy) {
		objc_setAssociatedObject([proxy realObj], &JSPROXY_association_proxy_key, nil, OBJC_ASSOCIATION_ASSIGN);
		/* no callbacks */
		[proxy release];
	}
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCLayer_isKeyboardEnabled(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CCLayer *real = (CCLayer*) [proxy realObj];
	ret_val = [real isKeyboardEnabled ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCLayer_isMouseEnabled(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CCLayer *real = (CCLayer*) [proxy realObj];
	ret_val = [real isMouseEnabled ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCLayer_isTouchEnabled(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CCLayer *real = (CCLayer*) [proxy realObj];
	ret_val = [real isTouchEnabled ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSInteger
JSBool JSPROXY_CCLayer_keyboardDelegatePriority(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSInteger ret_val;

	CCLayer *real = (CCLayer*) [proxy realObj];
	ret_val = [real keyboardDelegatePriority ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSInteger
JSBool JSPROXY_CCLayer_mouseDelegatePriority(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSInteger ret_val;

	CCLayer *real = (CCLayer*) [proxy realObj];
	ret_val = [real mouseDelegatePriority ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCLayer_setIsKeyboardEnabled_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	CCLayer *real = (CCLayer*) [proxy realObj];
	[real setIsKeyboardEnabled:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCLayer_setIsMouseEnabled_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	CCLayer *real = (CCLayer*) [proxy realObj];
	[real setIsMouseEnabled:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCLayer_setIsTouchEnabled_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	CCLayer *real = (CCLayer*) [proxy realObj];
	[real setIsTouchEnabled:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSInteger
JSBool JSPROXY_CCLayer_touchDelegatePriority(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSInteger ret_val;

	CCLayer *real = (CCLayer*) [proxy realObj];
	ret_val = [real touchDelegatePriority ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

void JSPROXY_CCLayer_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCLayer_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCLayer_class->name = name;
	JSPROXY_CCLayer_class->addProperty = JS_PropertyStub;
	JSPROXY_CCLayer_class->delProperty = JS_PropertyStub;
	JSPROXY_CCLayer_class->getProperty = JS_PropertyStub;
	JSPROXY_CCLayer_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCLayer_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCLayer_class->resolve = JS_ResolveStub;
	JSPROXY_CCLayer_class->convert = JS_ConvertStub;
	JSPROXY_CCLayer_class->finalize = JSPROXY_CCLayer_finalize;
	JSPROXY_CCLayer_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("isKeyboardEnabled", JSPROXY_CCLayer_isKeyboardEnabled, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("isMouseEnabled", JSPROXY_CCLayer_isMouseEnabled, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("isTouchEnabled", JSPROXY_CCLayer_isTouchEnabled, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("keyboardDelegatePriority", JSPROXY_CCLayer_keyboardDelegatePriority, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("mouseDelegatePriority", JSPROXY_CCLayer_mouseDelegatePriority, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setIsKeyboardEnabled", JSPROXY_CCLayer_setIsKeyboardEnabled_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setIsMouseEnabled", JSPROXY_CCLayer_setIsMouseEnabled_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setIsTouchEnabled", JSPROXY_CCLayer_setIsTouchEnabled_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("touchDelegatePriority", JSPROXY_CCLayer_touchDelegatePriority, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FS_END
	};

	JSPROXY_CCLayer_object = JS_InitClass(cx, globalObj, JSPROXY_CCNode_object, JSPROXY_CCLayer_class, JSPROXY_CCLayer_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCLayer

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCLayer_class, JSPROXY_CCLayer_object, NULL);
	JSPROXY_CCLayer *proxy = [[JSPROXY_CCLayer alloc] initWithJSObject:jsobj];
	[proxy setRealObj:realObj];
	JS_SetPrivate(jsobj, proxy);

	if( realObj )
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCMenu
 */
#pragma mark - CCMenu

JSClass* JSPROXY_CCMenu_class = NULL;
JSObject* JSPROXY_CCMenu_object = NULL;
 // Constructor
JSBool JSPROXY_CCMenu_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCMenu createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCMenu_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCMenu *proxy = (JSPROXY_CCMenu*)JS_GetPrivate(obj);
	if (proxy) {
		objc_setAssociatedObject([proxy realObj], &JSPROXY_association_proxy_key, nil, OBJC_ASSOCIATION_ASSIGN);
		/* no callbacks */
		[proxy release];
	}
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCMenu_alignItemsHorizontally(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCMenu *real = (CCMenu*) [proxy realObj];
	[real alignItemsHorizontally ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCMenu_alignItemsHorizontallyWithPadding_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCMenu *real = (CCMenu*) [proxy realObj];
	[real alignItemsHorizontallyWithPadding:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCMenu_alignItemsVertically(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCMenu *real = (CCMenu*) [proxy realObj];
	[real alignItemsVertically ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCMenu_alignItemsVerticallyWithPadding_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCMenu *real = (CCMenu*) [proxy realObj];
	[real alignItemsVerticallyWithPadding:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCMenu_enabled(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CCMenu *real = (CCMenu*) [proxy realObj];
	ret_val = [real enabled ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: NSArray*
// Ret value: None
JSBool JSPROXY_CCMenu_initWithArray_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	// Parsing sequence
	NSArray *arg0 = jsval_to_nsarray( *argvp++, cx );

	CCMenu *real = [[CCMenu alloc] initWithArray:(NSArray*)arg0  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSArray*
// Ret value: CCMenu
JSBool JSPROXY_CCMenu_menuWithArray__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	// Parsing sequence
	NSArray *arg0 = jsval_to_nsarray( *argvp++, cx );

	CCMenu *ret_val = [CCMenu menuWithArray:(NSArray*)arg0  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: GLubyte
JSBool JSPROXY_CCMenu_opacity(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	GLubyte ret_val;

	CCMenu *real = (CCMenu*) [proxy realObj];
	ret_val = [real opacity ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCMenu_setEnabled_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	CCMenu *real = (CCMenu*) [proxy realObj];
	[real setEnabled:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSInteger
// Ret value: None
JSBool JSPROXY_CCMenu_setHandlerPriority_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	int32_t arg0; JS_ValueToECMAInt32( cx, *argvp++, &arg0 );

	CCMenu *real = (CCMenu*) [proxy realObj];
	[real setHandlerPriority:(NSInteger)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCMenu_doesOpacityModifyRGB(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CCMenu *real = (CCMenu*) [proxy realObj];
	ret_val = [real doesOpacityModifyRGB ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: ccColor3B
// Ret value: None
JSBool JSPROXY_CCMenu_setColor_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	ccColor3B arg0 = *(ccColor3B*)JS_GetTypedArrayData( tmp_arg0);

	CCMenu *real = (CCMenu*) [proxy realObj];
	[real setColor:(ccColor3B)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: GLubyte
// Ret value: None
JSBool JSPROXY_CCMenu_setOpacity_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	uint16_t arg0; JS_ValueToUint16( cx, *argvp++, &arg0 );

	CCMenu *real = (CCMenu*) [proxy realObj];
	[real setOpacity:(GLubyte)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCMenu_setOpacityModifyRGB_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	CCMenu *real = (CCMenu*) [proxy realObj];
	[real setOpacityModifyRGB:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

void JSPROXY_CCMenu_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCMenu_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCMenu_class->name = name;
	JSPROXY_CCMenu_class->addProperty = JS_PropertyStub;
	JSPROXY_CCMenu_class->delProperty = JS_PropertyStub;
	JSPROXY_CCMenu_class->getProperty = JS_PropertyStub;
	JSPROXY_CCMenu_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCMenu_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCMenu_class->resolve = JS_ResolveStub;
	JSPROXY_CCMenu_class->convert = JS_ConvertStub;
	JSPROXY_CCMenu_class->finalize = JSPROXY_CCMenu_finalize;
	JSPROXY_CCMenu_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("alignItemsHorizontally", JSPROXY_CCMenu_alignItemsHorizontally, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("alignItemsHorizontallyWithPadding", JSPROXY_CCMenu_alignItemsHorizontallyWithPadding_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("alignItemsVertically", JSPROXY_CCMenu_alignItemsVertically, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("alignItemsVerticallyWithPadding", JSPROXY_CCMenu_alignItemsVerticallyWithPadding_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("enabled", JSPROXY_CCMenu_enabled, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithArray", JSPROXY_CCMenu_initWithArray_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("opacity", JSPROXY_CCMenu_opacity, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setEnabled", JSPROXY_CCMenu_setEnabled_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setHandlerPriority", JSPROXY_CCMenu_setHandlerPriority_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("doesOpacityModifyRGB", JSPROXY_CCMenu_doesOpacityModifyRGB, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setColor", JSPROXY_CCMenu_setColor_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setOpacity", JSPROXY_CCMenu_setOpacity_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setOpacityModifyRGB", JSPROXY_CCMenu_setOpacityModifyRGB_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("menuWithArray", JSPROXY_CCMenu_menuWithArray__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FS_END
	};

	JSPROXY_CCMenu_object = JS_InitClass(cx, globalObj, JSPROXY_CCLayer_object, JSPROXY_CCMenu_class, JSPROXY_CCMenu_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCMenu

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCMenu_class, JSPROXY_CCMenu_object, NULL);
	JSPROXY_CCMenu *proxy = [[JSPROXY_CCMenu alloc] initWithJSObject:jsobj];
	[proxy setRealObj:realObj];
	JS_SetPrivate(jsobj, proxy);

	if( realObj )
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCSprite
 */
#pragma mark - CCSprite

JSClass* JSPROXY_CCSprite_class = NULL;
JSObject* JSPROXY_CCSprite_object = NULL;
 // Constructor
JSBool JSPROXY_CCSprite_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCSprite createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCSprite_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCSprite *proxy = (JSPROXY_CCSprite*)JS_GetPrivate(obj);
	if (proxy) {
		objc_setAssociatedObject([proxy realObj], &JSPROXY_association_proxy_key, nil, OBJC_ASSOCIATION_ASSIGN);
		/* no callbacks */
		[proxy release];
	}
}

// Arguments: 
// Ret value: NSUInteger
JSBool JSPROXY_CCSprite_atlasIndex(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSUInteger ret_val;

	CCSprite *real = (CCSprite*) [proxy realObj];
	ret_val = [real atlasIndex ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: CCSpriteBatchNode*
JSBool JSPROXY_CCSprite_batchNode(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CCSpriteBatchNode* ret_val;

	CCSprite *real = (CCSprite*) [proxy realObj];
	ret_val = [real batchNode ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCSprite_dirty(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CCSprite *real = (CCSprite*) [proxy realObj];
	ret_val = [real dirty ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCSprite_flipX(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CCSprite *real = (CCSprite*) [proxy realObj];
	ret_val = [real flipX ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCSprite_flipY(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CCSprite *real = (CCSprite*) [proxy realObj];
	ret_val = [real flipY ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: None
JSBool JSPROXY_CCSprite_initWithFile_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );

	CCSprite *real = [[CCSprite alloc] initWithFile:(NSString*)arg0  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: None
JSBool JSPROXY_CCSprite_initWithSpriteFrameName_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );

	CCSprite *real = [[CCSprite alloc] initWithSpriteFrameName:(NSString*)arg0  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCTexture2D*
// Ret value: None
JSBool JSPROXY_CCSprite_initWithTexture_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCTexture2D* arg0 = (CCTexture2D*) jsval_to_nsobject( *argvp++, cx);

	CCSprite *real = [[CCSprite alloc] initWithTexture:(CCTexture2D*)arg0  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: CGPoint
JSBool JSPROXY_CCSprite_offsetPosition(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CGPoint ret_val;

	CCSprite *real = (CCSprite*) [proxy realObj];
	ret_val = [real offsetPosition ];

	jsval ret_jsval = CGPoint_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: 
// Ret value: GLubyte
JSBool JSPROXY_CCSprite_opacity(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	GLubyte ret_val;

	CCSprite *real = (CCSprite*) [proxy realObj];
	ret_val = [real opacity ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: NSUInteger
// Ret value: None
JSBool JSPROXY_CCSprite_setAtlasIndex_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	uint32_t arg0; JS_ValueToECMAUint32( cx, *argvp++, &arg0 );

	CCSprite *real = (CCSprite*) [proxy realObj];
	[real setAtlasIndex:(NSUInteger)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCSpriteBatchNode*
// Ret value: None
JSBool JSPROXY_CCSprite_setBatchNode_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCSpriteBatchNode* arg0 = (CCSpriteBatchNode*) jsval_to_nsobject( *argvp++, cx);

	CCSprite *real = (CCSprite*) [proxy realObj];
	[real setBatchNode:(CCSpriteBatchNode*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: ccBlendFunc
// Ret value: None
JSBool JSPROXY_CCSprite_setBlendFunc_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	ccBlendFunc arg0 = *(ccBlendFunc*)JS_GetTypedArrayData( tmp_arg0);

	CCSprite *real = (CCSprite*) [proxy realObj];
	[real setBlendFunc:(ccBlendFunc)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: ccColor3B
// Ret value: None
JSBool JSPROXY_CCSprite_setColor_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	ccColor3B arg0 = *(ccColor3B*)JS_GetTypedArrayData( tmp_arg0);

	CCSprite *real = (CCSprite*) [proxy realObj];
	[real setColor:(ccColor3B)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCSprite_setDirty_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	CCSprite *real = (CCSprite*) [proxy realObj];
	[real setDirty:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*, int
// Ret value: None
JSBool JSPROXY_CCSprite_setDisplayFrameWithAnimationName_index_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );
	int32_t arg1; JS_ValueToECMAInt32( cx, *argvp++, &arg1 );

	CCSprite *real = (CCSprite*) [proxy realObj];
	[real setDisplayFrameWithAnimationName:(NSString*)arg0 index:(int)arg1  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCSprite_setFlipX_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	CCSprite *real = (CCSprite*) [proxy realObj];
	[real setFlipX:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCSprite_setFlipY_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	CCSprite *real = (CCSprite*) [proxy realObj];
	[real setFlipY:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: GLubyte
// Ret value: None
JSBool JSPROXY_CCSprite_setOpacity_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	uint16_t arg0; JS_ValueToUint16( cx, *argvp++, &arg0 );

	CCSprite *real = (CCSprite*) [proxy realObj];
	[real setOpacity:(GLubyte)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: CCSprite
JSBool JSPROXY_CCSprite_spriteWithFile__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );

	CCSprite *ret_val = [CCSprite spriteWithFile:(NSString*)arg0  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: CCSprite
JSBool JSPROXY_CCSprite_spriteWithSpriteFrameName__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );

	CCSprite *ret_val = [CCSprite spriteWithSpriteFrameName:(NSString*)arg0  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: CCTexture2D*
// Ret value: CCSprite
JSBool JSPROXY_CCSprite_spriteWithTexture__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCTexture2D* arg0 = (CCTexture2D*) jsval_to_nsobject( *argvp++, cx);

	CCSprite *ret_val = [CCSprite spriteWithTexture:(CCTexture2D*)arg0  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCSprite_textureRectRotated(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CCSprite *real = (CCSprite*) [proxy realObj];
	ret_val = [real textureRectRotated ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCSprite_updateTransform(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCSprite *real = (CCSprite*) [proxy realObj];
	[real updateTransform ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCSprite_doesOpacityModifyRGB(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CCSprite *real = (CCSprite*) [proxy realObj];
	ret_val = [real doesOpacityModifyRGB ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCSprite_setOpacityModifyRGB_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	CCSprite *real = (CCSprite*) [proxy realObj];
	[real setOpacityModifyRGB:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCTexture2D*
// Ret value: None
JSBool JSPROXY_CCSprite_setTexture_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCTexture2D* arg0 = (CCTexture2D*) jsval_to_nsobject( *argvp++, cx);

	CCSprite *real = (CCSprite*) [proxy realObj];
	[real setTexture:(CCTexture2D*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: CCTexture2D*
JSBool JSPROXY_CCSprite_texture(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CCTexture2D* ret_val;

	CCSprite *real = (CCSprite*) [proxy realObj];
	ret_val = [real texture ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

void JSPROXY_CCSprite_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCSprite_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCSprite_class->name = name;
	JSPROXY_CCSprite_class->addProperty = JS_PropertyStub;
	JSPROXY_CCSprite_class->delProperty = JS_PropertyStub;
	JSPROXY_CCSprite_class->getProperty = JS_PropertyStub;
	JSPROXY_CCSprite_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCSprite_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCSprite_class->resolve = JS_ResolveStub;
	JSPROXY_CCSprite_class->convert = JS_ConvertStub;
	JSPROXY_CCSprite_class->finalize = JSPROXY_CCSprite_finalize;
	JSPROXY_CCSprite_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("atlasIndex", JSPROXY_CCSprite_atlasIndex, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("batchNode", JSPROXY_CCSprite_batchNode, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("dirty", JSPROXY_CCSprite_dirty, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("flipX", JSPROXY_CCSprite_flipX, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("flipY", JSPROXY_CCSprite_flipY, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithFile", JSPROXY_CCSprite_initWithFile_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithSpriteFrameName", JSPROXY_CCSprite_initWithSpriteFrameName_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithTexture", JSPROXY_CCSprite_initWithTexture_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("offsetPosition", JSPROXY_CCSprite_offsetPosition, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("opacity", JSPROXY_CCSprite_opacity, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setAtlasIndex", JSPROXY_CCSprite_setAtlasIndex_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setBatchNode", JSPROXY_CCSprite_setBatchNode_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setBlendFunc", JSPROXY_CCSprite_setBlendFunc_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setColor", JSPROXY_CCSprite_setColor_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setDirty", JSPROXY_CCSprite_setDirty_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setDisplayFrameWithAnimationNameIndex", JSPROXY_CCSprite_setDisplayFrameWithAnimationName_index_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setFlipX", JSPROXY_CCSprite_setFlipX_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setFlipY", JSPROXY_CCSprite_setFlipY_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setOpacity", JSPROXY_CCSprite_setOpacity_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("textureRectRotated", JSPROXY_CCSprite_textureRectRotated, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("updateTransform", JSPROXY_CCSprite_updateTransform, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("doesOpacityModifyRGB", JSPROXY_CCSprite_doesOpacityModifyRGB, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setOpacityModifyRGB", JSPROXY_CCSprite_setOpacityModifyRGB_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setTexture", JSPROXY_CCSprite_setTexture_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("texture", JSPROXY_CCSprite_texture, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("spriteWithFile", JSPROXY_CCSprite_spriteWithFile__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FN("spriteWithSpriteFrameName", JSPROXY_CCSprite_spriteWithSpriteFrameName__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FN("spriteWithTexture", JSPROXY_CCSprite_spriteWithTexture__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FS_END
	};

	JSPROXY_CCSprite_object = JS_InitClass(cx, globalObj, JSPROXY_CCNode_object, JSPROXY_CCSprite_class, JSPROXY_CCSprite_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCSprite

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCSprite_class, JSPROXY_CCSprite_object, NULL);
	JSPROXY_CCSprite *proxy = [[JSPROXY_CCSprite alloc] initWithJSObject:jsobj];
	[proxy setRealObj:realObj];
	JS_SetPrivate(jsobj, proxy);

	if( realObj )
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCLabelTTF
 */
#pragma mark - CCLabelTTF

JSClass* JSPROXY_CCLabelTTF_class = NULL;
JSObject* JSPROXY_CCLabelTTF_object = NULL;
 // Constructor
JSBool JSPROXY_CCLabelTTF_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCLabelTTF createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCLabelTTF_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCLabelTTF *proxy = (JSPROXY_CCLabelTTF*)JS_GetPrivate(obj);
	if (proxy) {
		objc_setAssociatedObject([proxy realObj], &JSPROXY_association_proxy_key, nil, OBJC_ASSOCIATION_ASSIGN);
		/* no callbacks */
		[proxy release];
	}
}

// Arguments: 
// Ret value: CGSize
JSBool JSPROXY_CCLabelTTF_dimensions(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CGSize ret_val;

	CCLabelTTF *real = (CCLabelTTF*) [proxy realObj];
	ret_val = [real dimensions ];

	jsval ret_jsval = CGSize_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: 
// Ret value: NSString*
JSBool JSPROXY_CCLabelTTF_fontName(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSString* ret_val;

	CCLabelTTF *real = (CCLabelTTF*) [proxy realObj];
	ret_val = [real fontName ];

	JSString *ret_obj = JS_NewStringCopyZ(cx, [ret_val UTF8String]);
	JS_SET_RVAL(cx, vp, STRING_TO_JSVAL(ret_obj) );

	return JS_TRUE;
}

// Arguments: 
// Ret value: float
JSBool JSPROXY_CCLabelTTF_fontSize(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CCLabelTTF *real = (CCLabelTTF*) [proxy realObj];
	ret_val = [real fontSize ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: CCTextAlignment
JSBool JSPROXY_CCLabelTTF_horizontalAlignment(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CCTextAlignment ret_val;

	CCLabelTTF *real = (CCLabelTTF*) [proxy realObj];
	ret_val = [real horizontalAlignment ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: NSString*, CGSize, CCTextAlignment, NSString*, CGFloat
// Ret value: None
JSBool JSPROXY_CCLabelTTF_initWithString_dimensions_hAlignment_fontName_fontSize_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 5, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );

	JSObject *tmp_arg1;
	JS_ValueToObject( cx, *argvp++, &tmp_arg1 );
	CGSize arg1 = *(CGSize*)JS_GetTypedArrayData( tmp_arg1);
	int32_t arg2; JS_ValueToECMAInt32( cx, *argvp++, &arg2 );

	NSString *arg3 = jsval_to_nsstring( *argvp++, cx );
	double arg4; JS_ValueToNumber( cx, *argvp++, &arg4 );

	CCLabelTTF *real = [[CCLabelTTF alloc] initWithString:(NSString*)arg0 dimensions:(CGSize)arg1 hAlignment:(CCTextAlignment)arg2 fontName:(NSString*)arg3 fontSize:(CGFloat)arg4  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*, CGSize, CCTextAlignment, CCLineBreakMode, NSString*, CGFloat
// Ret value: None
JSBool JSPROXY_CCLabelTTF_initWithString_dimensions_hAlignment_lineBreakMode_fontName_fontSize_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 6, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );

	JSObject *tmp_arg1;
	JS_ValueToObject( cx, *argvp++, &tmp_arg1 );
	CGSize arg1 = *(CGSize*)JS_GetTypedArrayData( tmp_arg1);
	int32_t arg2; JS_ValueToECMAInt32( cx, *argvp++, &arg2 );
	int32_t arg3; JS_ValueToECMAInt32( cx, *argvp++, &arg3 );

	NSString *arg4 = jsval_to_nsstring( *argvp++, cx );
	double arg5; JS_ValueToNumber( cx, *argvp++, &arg5 );

	CCLabelTTF *real = [[CCLabelTTF alloc] initWithString:(NSString*)arg0 dimensions:(CGSize)arg1 hAlignment:(CCTextAlignment)arg2 lineBreakMode:(CCLineBreakMode)arg3 fontName:(NSString*)arg4 fontSize:(CGFloat)arg5  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*, CGSize, CCTextAlignment, CCVerticalTextAlignment, NSString*, CGFloat
// Ret value: None
JSBool JSPROXY_CCLabelTTF_initWithString_dimensions_hAlignment_vAlignment_fontName_fontSize_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 6, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );

	JSObject *tmp_arg1;
	JS_ValueToObject( cx, *argvp++, &tmp_arg1 );
	CGSize arg1 = *(CGSize*)JS_GetTypedArrayData( tmp_arg1);
	int32_t arg2; JS_ValueToECMAInt32( cx, *argvp++, &arg2 );
	int32_t arg3; JS_ValueToECMAInt32( cx, *argvp++, &arg3 );

	NSString *arg4 = jsval_to_nsstring( *argvp++, cx );
	double arg5; JS_ValueToNumber( cx, *argvp++, &arg5 );

	CCLabelTTF *real = [[CCLabelTTF alloc] initWithString:(NSString*)arg0 dimensions:(CGSize)arg1 hAlignment:(CCTextAlignment)arg2 vAlignment:(CCVerticalTextAlignment)arg3 fontName:(NSString*)arg4 fontSize:(CGFloat)arg5  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*, CGSize, CCTextAlignment, CCVerticalTextAlignment, CCLineBreakMode, NSString*, CGFloat
// Ret value: None
JSBool JSPROXY_CCLabelTTF_initWithString_dimensions_hAlignment_vAlignment_lineBreakMode_fontName_fontSize_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 7, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );

	JSObject *tmp_arg1;
	JS_ValueToObject( cx, *argvp++, &tmp_arg1 );
	CGSize arg1 = *(CGSize*)JS_GetTypedArrayData( tmp_arg1);
	int32_t arg2; JS_ValueToECMAInt32( cx, *argvp++, &arg2 );
	int32_t arg3; JS_ValueToECMAInt32( cx, *argvp++, &arg3 );
	int32_t arg4; JS_ValueToECMAInt32( cx, *argvp++, &arg4 );

	NSString *arg5 = jsval_to_nsstring( *argvp++, cx );
	double arg6; JS_ValueToNumber( cx, *argvp++, &arg6 );

	CCLabelTTF *real = [[CCLabelTTF alloc] initWithString:(NSString*)arg0 dimensions:(CGSize)arg1 hAlignment:(CCTextAlignment)arg2 vAlignment:(CCVerticalTextAlignment)arg3 lineBreakMode:(CCLineBreakMode)arg4 fontName:(NSString*)arg5 fontSize:(CGFloat)arg6  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*, NSString*, CGFloat
// Ret value: None
JSBool JSPROXY_CCLabelTTF_initWithString_fontName_fontSize_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 3, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );

	NSString *arg1 = jsval_to_nsstring( *argvp++, cx );
	double arg2; JS_ValueToNumber( cx, *argvp++, &arg2 );

	CCLabelTTF *real = [[CCLabelTTF alloc] initWithString:(NSString*)arg0 fontName:(NSString*)arg1 fontSize:(CGFloat)arg2  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*, CGSize, CCTextAlignment, NSString*, CGFloat
// Ret value: CCLabelTTF
JSBool JSPROXY_CCLabelTTF_labelWithString_dimensions_hAlignment_fontName_fontSize__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 5, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );

	JSObject *tmp_arg1;
	JS_ValueToObject( cx, *argvp++, &tmp_arg1 );
	CGSize arg1 = *(CGSize*)JS_GetTypedArrayData( tmp_arg1);
	int32_t arg2; JS_ValueToECMAInt32( cx, *argvp++, &arg2 );

	NSString *arg3 = jsval_to_nsstring( *argvp++, cx );
	double arg4; JS_ValueToNumber( cx, *argvp++, &arg4 );

	CCLabelTTF *ret_val = [CCLabelTTF labelWithString:(NSString*)arg0 dimensions:(CGSize)arg1 hAlignment:(CCTextAlignment)arg2 fontName:(NSString*)arg3 fontSize:(CGFloat)arg4  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: NSString*, CGSize, CCTextAlignment, CCLineBreakMode, NSString*, CGFloat
// Ret value: CCLabelTTF
JSBool JSPROXY_CCLabelTTF_labelWithString_dimensions_hAlignment_lineBreakMode_fontName_fontSize__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 6, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );

	JSObject *tmp_arg1;
	JS_ValueToObject( cx, *argvp++, &tmp_arg1 );
	CGSize arg1 = *(CGSize*)JS_GetTypedArrayData( tmp_arg1);
	int32_t arg2; JS_ValueToECMAInt32( cx, *argvp++, &arg2 );
	int32_t arg3; JS_ValueToECMAInt32( cx, *argvp++, &arg3 );

	NSString *arg4 = jsval_to_nsstring( *argvp++, cx );
	double arg5; JS_ValueToNumber( cx, *argvp++, &arg5 );

	CCLabelTTF *ret_val = [CCLabelTTF labelWithString:(NSString*)arg0 dimensions:(CGSize)arg1 hAlignment:(CCTextAlignment)arg2 lineBreakMode:(CCLineBreakMode)arg3 fontName:(NSString*)arg4 fontSize:(CGFloat)arg5  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: NSString*, CGSize, CCTextAlignment, CCVerticalTextAlignment, NSString*, CGFloat
// Ret value: CCLabelTTF
JSBool JSPROXY_CCLabelTTF_labelWithString_dimensions_hAlignment_vAlignment_fontName_fontSize__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 6, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );

	JSObject *tmp_arg1;
	JS_ValueToObject( cx, *argvp++, &tmp_arg1 );
	CGSize arg1 = *(CGSize*)JS_GetTypedArrayData( tmp_arg1);
	int32_t arg2; JS_ValueToECMAInt32( cx, *argvp++, &arg2 );
	int32_t arg3; JS_ValueToECMAInt32( cx, *argvp++, &arg3 );

	NSString *arg4 = jsval_to_nsstring( *argvp++, cx );
	double arg5; JS_ValueToNumber( cx, *argvp++, &arg5 );

	CCLabelTTF *ret_val = [CCLabelTTF labelWithString:(NSString*)arg0 dimensions:(CGSize)arg1 hAlignment:(CCTextAlignment)arg2 vAlignment:(CCVerticalTextAlignment)arg3 fontName:(NSString*)arg4 fontSize:(CGFloat)arg5  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: NSString*, CGSize, CCTextAlignment, CCVerticalTextAlignment, CCLineBreakMode, NSString*, CGFloat
// Ret value: CCLabelTTF
JSBool JSPROXY_CCLabelTTF_labelWithString_dimensions_hAlignment_vAlignment_lineBreakMode_fontName_fontSize__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 7, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );

	JSObject *tmp_arg1;
	JS_ValueToObject( cx, *argvp++, &tmp_arg1 );
	CGSize arg1 = *(CGSize*)JS_GetTypedArrayData( tmp_arg1);
	int32_t arg2; JS_ValueToECMAInt32( cx, *argvp++, &arg2 );
	int32_t arg3; JS_ValueToECMAInt32( cx, *argvp++, &arg3 );
	int32_t arg4; JS_ValueToECMAInt32( cx, *argvp++, &arg4 );

	NSString *arg5 = jsval_to_nsstring( *argvp++, cx );
	double arg6; JS_ValueToNumber( cx, *argvp++, &arg6 );

	CCLabelTTF *ret_val = [CCLabelTTF labelWithString:(NSString*)arg0 dimensions:(CGSize)arg1 hAlignment:(CCTextAlignment)arg2 vAlignment:(CCVerticalTextAlignment)arg3 lineBreakMode:(CCLineBreakMode)arg4 fontName:(NSString*)arg5 fontSize:(CGFloat)arg6  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: NSString*, NSString*, CGFloat
// Ret value: CCLabelTTF
JSBool JSPROXY_CCLabelTTF_labelWithString_fontName_fontSize__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 3, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );

	NSString *arg1 = jsval_to_nsstring( *argvp++, cx );
	double arg2; JS_ValueToNumber( cx, *argvp++, &arg2 );

	CCLabelTTF *ret_val = [CCLabelTTF labelWithString:(NSString*)arg0 fontName:(NSString*)arg1 fontSize:(CGFloat)arg2  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: CGSize
// Ret value: None
JSBool JSPROXY_CCLabelTTF_setDimensions_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	CGSize arg0 = *(CGSize*)JS_GetTypedArrayData( tmp_arg0);

	CCLabelTTF *real = (CCLabelTTF*) [proxy realObj];
	[real setDimensions:(CGSize)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: None
JSBool JSPROXY_CCLabelTTF_setFontName_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );

	CCLabelTTF *real = (CCLabelTTF*) [proxy realObj];
	[real setFontName:(NSString*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCLabelTTF_setFontSize_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCLabelTTF *real = (CCLabelTTF*) [proxy realObj];
	[real setFontSize:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCTextAlignment
// Ret value: None
JSBool JSPROXY_CCLabelTTF_setHorizontalAlignment_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	int32_t arg0; JS_ValueToECMAInt32( cx, *argvp++, &arg0 );

	CCLabelTTF *real = (CCLabelTTF*) [proxy realObj];
	[real setHorizontalAlignment:(CCTextAlignment)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: None
JSBool JSPROXY_CCLabelTTF_setString_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );

	CCLabelTTF *real = (CCLabelTTF*) [proxy realObj];
	[real setString:(NSString*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCVerticalTextAlignment
// Ret value: None
JSBool JSPROXY_CCLabelTTF_setVerticalAlignment_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	int32_t arg0; JS_ValueToECMAInt32( cx, *argvp++, &arg0 );

	CCLabelTTF *real = (CCLabelTTF*) [proxy realObj];
	[real setVerticalAlignment:(CCVerticalTextAlignment)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: CCVerticalTextAlignment
JSBool JSPROXY_CCLabelTTF_verticalAlignment(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CCVerticalTextAlignment ret_val;

	CCLabelTTF *real = (CCLabelTTF*) [proxy realObj];
	ret_val = [real verticalAlignment ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSString*
JSBool JSPROXY_CCLabelTTF_string(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSString* ret_val;

	CCLabelTTF *real = (CCLabelTTF*) [proxy realObj];
	ret_val = [real string ];

	JSString *ret_obj = JS_NewStringCopyZ(cx, [ret_val UTF8String]);
	JS_SET_RVAL(cx, vp, STRING_TO_JSVAL(ret_obj) );

	return JS_TRUE;
}

void JSPROXY_CCLabelTTF_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCLabelTTF_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCLabelTTF_class->name = name;
	JSPROXY_CCLabelTTF_class->addProperty = JS_PropertyStub;
	JSPROXY_CCLabelTTF_class->delProperty = JS_PropertyStub;
	JSPROXY_CCLabelTTF_class->getProperty = JS_PropertyStub;
	JSPROXY_CCLabelTTF_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCLabelTTF_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCLabelTTF_class->resolve = JS_ResolveStub;
	JSPROXY_CCLabelTTF_class->convert = JS_ConvertStub;
	JSPROXY_CCLabelTTF_class->finalize = JSPROXY_CCLabelTTF_finalize;
	JSPROXY_CCLabelTTF_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("dimensions", JSPROXY_CCLabelTTF_dimensions, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("fontName", JSPROXY_CCLabelTTF_fontName, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("fontSize", JSPROXY_CCLabelTTF_fontSize, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("horizontalAlignment", JSPROXY_CCLabelTTF_horizontalAlignment, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithStringDimensionsHalignmentFontnameFontsize", JSPROXY_CCLabelTTF_initWithString_dimensions_hAlignment_fontName_fontSize_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithStringDimensionsHalignmentLinebreakmodeFontnameFontsize", JSPROXY_CCLabelTTF_initWithString_dimensions_hAlignment_lineBreakMode_fontName_fontSize_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithStringDimensionsHalignmentValignmentFontnameFontsize", JSPROXY_CCLabelTTF_initWithString_dimensions_hAlignment_vAlignment_fontName_fontSize_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithStringDimensionsHalignmentValignmentLinebreakmodeFontnameFontsize", JSPROXY_CCLabelTTF_initWithString_dimensions_hAlignment_vAlignment_lineBreakMode_fontName_fontSize_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithStringFontnameFontsize", JSPROXY_CCLabelTTF_initWithString_fontName_fontSize_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setDimensions", JSPROXY_CCLabelTTF_setDimensions_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setFontName", JSPROXY_CCLabelTTF_setFontName_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setFontSize", JSPROXY_CCLabelTTF_setFontSize_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setHorizontalAlignment", JSPROXY_CCLabelTTF_setHorizontalAlignment_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setString", JSPROXY_CCLabelTTF_setString_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setVerticalAlignment", JSPROXY_CCLabelTTF_setVerticalAlignment_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("verticalAlignment", JSPROXY_CCLabelTTF_verticalAlignment, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("string", JSPROXY_CCLabelTTF_string, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("labelWithStringDimensionsHalignmentFontnameFontsize", JSPROXY_CCLabelTTF_labelWithString_dimensions_hAlignment_fontName_fontSize__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FN("labelWithStringDimensionsHalignmentLinebreakmodeFontnameFontsize", JSPROXY_CCLabelTTF_labelWithString_dimensions_hAlignment_lineBreakMode_fontName_fontSize__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FN("labelWithStringDimensionsHalignmentValignmentFontnameFontsize", JSPROXY_CCLabelTTF_labelWithString_dimensions_hAlignment_vAlignment_fontName_fontSize__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FN("labelWithStringDimensionsHalignmentValignmentLinebreakmodeFontnameFontsize", JSPROXY_CCLabelTTF_labelWithString_dimensions_hAlignment_vAlignment_lineBreakMode_fontName_fontSize__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FN("labelWithStringFontnameFontsize", JSPROXY_CCLabelTTF_labelWithString_fontName_fontSize__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FS_END
	};

	JSPROXY_CCLabelTTF_object = JS_InitClass(cx, globalObj, JSPROXY_CCSprite_object, JSPROXY_CCLabelTTF_class, JSPROXY_CCLabelTTF_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCLabelTTF

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCLabelTTF_class, JSPROXY_CCLabelTTF_object, NULL);
	JSPROXY_CCLabelTTF *proxy = [[JSPROXY_CCLabelTTF alloc] initWithJSObject:jsobj];
	[proxy setRealObj:realObj];
	JS_SetPrivate(jsobj, proxy);

	if( realObj )
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCSpawn
 */
#pragma mark - CCSpawn

JSClass* JSPROXY_CCSpawn_class = NULL;
JSObject* JSPROXY_CCSpawn_object = NULL;
 // Constructor
JSBool JSPROXY_CCSpawn_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCSpawn createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCSpawn_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCSpawn *proxy = (JSPROXY_CCSpawn*)JS_GetPrivate(obj);
	if (proxy) {
		objc_setAssociatedObject([proxy realObj], &JSPROXY_association_proxy_key, nil, OBJC_ASSOCIATION_ASSIGN);
		/* no callbacks */
		[proxy release];
	}
}

// Arguments: CCFiniteTimeAction*, CCFiniteTimeAction*
// Ret value: CCSpawn
JSBool JSPROXY_CCSpawn_actionOne_two__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCFiniteTimeAction* arg0 = (CCFiniteTimeAction*) jsval_to_nsobject( *argvp++, cx);

	CCFiniteTimeAction* arg1 = (CCFiniteTimeAction*) jsval_to_nsobject( *argvp++, cx);

	CCSpawn *ret_val = [CCSpawn actionOne:(CCFiniteTimeAction*)arg0 two:(CCFiniteTimeAction*)arg1  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: NSArray*
// Ret value: CCSpawn
JSBool JSPROXY_CCSpawn_actionWithArray__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	// Parsing sequence
	NSArray *arg0 = jsval_to_nsarray( *argvp++, cx );

	CCSpawn *ret_val = [CCSpawn actionWithArray:(NSArray*)arg0  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: CCFiniteTimeAction*, CCFiniteTimeAction*
// Ret value: None
JSBool JSPROXY_CCSpawn_initOne_two_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCFiniteTimeAction* arg0 = (CCFiniteTimeAction*) jsval_to_nsobject( *argvp++, cx);

	CCFiniteTimeAction* arg1 = (CCFiniteTimeAction*) jsval_to_nsobject( *argvp++, cx);

	CCSpawn *real = [[CCSpawn alloc] initOne:(CCFiniteTimeAction*)arg0 two:(CCFiniteTimeAction*)arg1  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

void JSPROXY_CCSpawn_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCSpawn_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCSpawn_class->name = name;
	JSPROXY_CCSpawn_class->addProperty = JS_PropertyStub;
	JSPROXY_CCSpawn_class->delProperty = JS_PropertyStub;
	JSPROXY_CCSpawn_class->getProperty = JS_PropertyStub;
	JSPROXY_CCSpawn_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCSpawn_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCSpawn_class->resolve = JS_ResolveStub;
	JSPROXY_CCSpawn_class->convert = JS_ConvertStub;
	JSPROXY_CCSpawn_class->finalize = JSPROXY_CCSpawn_finalize;
	JSPROXY_CCSpawn_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("initOneTwo", JSPROXY_CCSpawn_initOne_two_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("actionOneTwo", JSPROXY_CCSpawn_actionOne_two__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FN("actionWithArray", JSPROXY_CCSpawn_actionWithArray__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FS_END
	};

	JSPROXY_CCSpawn_object = JS_InitClass(cx, globalObj, JSPROXY_CCActionInterval_object, JSPROXY_CCSpawn_class, JSPROXY_CCSpawn_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCSpawn

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCSpawn_class, JSPROXY_CCSpawn_object, NULL);
	JSPROXY_CCSpawn *proxy = [[JSPROXY_CCSpawn alloc] initWithJSObject:jsobj];
	[proxy setRealObj:realObj];
	JS_SetPrivate(jsobj, proxy);

	if( realObj )
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCScaleBy
 */
#pragma mark - CCScaleBy

JSClass* JSPROXY_CCScaleBy_class = NULL;
JSObject* JSPROXY_CCScaleBy_object = NULL;
 // Constructor
JSBool JSPROXY_CCScaleBy_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCScaleBy createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCScaleBy_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCScaleBy *proxy = (JSPROXY_CCScaleBy*)JS_GetPrivate(obj);
	if (proxy) {
		objc_setAssociatedObject([proxy realObj], &JSPROXY_association_proxy_key, nil, OBJC_ASSOCIATION_ASSIGN);
		/* no callbacks */
		[proxy release];
	}
}

// Arguments: ccTime, float
// Ret value: None
JSBool JSPROXY_CCScaleBy_initWithDuration_scale_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );
	double arg1; JS_ValueToNumber( cx, *argvp++, &arg1 );

	CCScaleBy *real = [[CCScaleBy alloc] initWithDuration:(ccTime)arg0 scale:(float)arg1  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

void JSPROXY_CCScaleBy_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCScaleBy_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCScaleBy_class->name = name;
	JSPROXY_CCScaleBy_class->addProperty = JS_PropertyStub;
	JSPROXY_CCScaleBy_class->delProperty = JS_PropertyStub;
	JSPROXY_CCScaleBy_class->getProperty = JS_PropertyStub;
	JSPROXY_CCScaleBy_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCScaleBy_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCScaleBy_class->resolve = JS_ResolveStub;
	JSPROXY_CCScaleBy_class->convert = JS_ConvertStub;
	JSPROXY_CCScaleBy_class->finalize = JSPROXY_CCScaleBy_finalize;
	JSPROXY_CCScaleBy_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("initWithDurationScale", JSPROXY_CCScaleBy_initWithDuration_scale_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FS_END
	};

	JSPROXY_CCScaleBy_object = JS_InitClass(cx, globalObj, JSPROXY_CCScaleTo_object, JSPROXY_CCScaleBy_class, JSPROXY_CCScaleBy_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCScaleBy

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCScaleBy_class, JSPROXY_CCScaleBy_object, NULL);
	JSPROXY_CCScaleBy *proxy = [[JSPROXY_CCScaleBy alloc] initWithJSObject:jsobj];
	[proxy setRealObj:realObj];
	JS_SetPrivate(jsobj, proxy);

	if( realObj )
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCParticleSystemQuad
 */
#pragma mark - CCParticleSystemQuad

JSClass* JSPROXY_CCParticleSystemQuad_class = NULL;
JSObject* JSPROXY_CCParticleSystemQuad_object = NULL;
 // Constructor
JSBool JSPROXY_CCParticleSystemQuad_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCParticleSystemQuad createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCParticleSystemQuad_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCParticleSystemQuad *proxy = (JSPROXY_CCParticleSystemQuad*)JS_GetPrivate(obj);
	if (proxy) {
		objc_setAssociatedObject([proxy realObj], &JSPROXY_association_proxy_key, nil, OBJC_ASSOCIATION_ASSIGN);
		/* no callbacks */
		[proxy release];
	}
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCParticleSystemQuad_initIndices(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCParticleSystemQuad *real = (CCParticleSystemQuad*) [proxy realObj];
	[real initIndices ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

void JSPROXY_CCParticleSystemQuad_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCParticleSystemQuad_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCParticleSystemQuad_class->name = name;
	JSPROXY_CCParticleSystemQuad_class->addProperty = JS_PropertyStub;
	JSPROXY_CCParticleSystemQuad_class->delProperty = JS_PropertyStub;
	JSPROXY_CCParticleSystemQuad_class->getProperty = JS_PropertyStub;
	JSPROXY_CCParticleSystemQuad_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCParticleSystemQuad_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCParticleSystemQuad_class->resolve = JS_ResolveStub;
	JSPROXY_CCParticleSystemQuad_class->convert = JS_ConvertStub;
	JSPROXY_CCParticleSystemQuad_class->finalize = JSPROXY_CCParticleSystemQuad_finalize;
	JSPROXY_CCParticleSystemQuad_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("initIndices", JSPROXY_CCParticleSystemQuad_initIndices, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FS_END
	};

	JSPROXY_CCParticleSystemQuad_object = JS_InitClass(cx, globalObj, JSPROXY_CCParticleSystem_object, JSPROXY_CCParticleSystemQuad_class, JSPROXY_CCParticleSystemQuad_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCParticleSystemQuad

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCParticleSystemQuad_class, JSPROXY_CCParticleSystemQuad_object, NULL);
	JSPROXY_CCParticleSystemQuad *proxy = [[JSPROXY_CCParticleSystemQuad alloc] initWithJSObject:jsobj];
	[proxy setRealObj:realObj];
	JS_SetPrivate(jsobj, proxy);

	if( realObj )
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCSpriteBatchNode
 */
#pragma mark - CCSpriteBatchNode

JSClass* JSPROXY_CCSpriteBatchNode_class = NULL;
JSObject* JSPROXY_CCSpriteBatchNode_object = NULL;
 // Constructor
JSBool JSPROXY_CCSpriteBatchNode_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCSpriteBatchNode createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCSpriteBatchNode_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCSpriteBatchNode *proxy = (JSPROXY_CCSpriteBatchNode*)JS_GetPrivate(obj);
	if (proxy) {
		objc_setAssociatedObject([proxy realObj], &JSPROXY_association_proxy_key, nil, OBJC_ASSOCIATION_ASSIGN);
		/* no callbacks */
		[proxy release];
	}
}

// Arguments: CCSprite*, NSUInteger
// Ret value: None
JSBool JSPROXY_CCSpriteBatchNode_addQuadFromSprite_quadIndex_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCSprite* arg0 = (CCSprite*) jsval_to_nsobject( *argvp++, cx);
	uint32_t arg1; JS_ValueToECMAUint32( cx, *argvp++, &arg1 );

	CCSpriteBatchNode *real = (CCSpriteBatchNode*) [proxy realObj];
	[real addQuadFromSprite:(CCSprite*)arg0 quadIndex:(NSUInteger)arg1  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCSprite*
// Ret value: None
JSBool JSPROXY_CCSpriteBatchNode_appendChild_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCSprite* arg0 = (CCSprite*) jsval_to_nsobject( *argvp++, cx);

	CCSpriteBatchNode *real = (CCSpriteBatchNode*) [proxy realObj];
	[real appendChild:(CCSprite*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCSprite*, NSInteger
// Ret value: NSUInteger
JSBool JSPROXY_CCSpriteBatchNode_atlasIndexForChild_atZ_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCSprite* arg0 = (CCSprite*) jsval_to_nsobject( *argvp++, cx);
	int32_t arg1; JS_ValueToECMAInt32( cx, *argvp++, &arg1 );
	NSUInteger ret_val;

	CCSpriteBatchNode *real = (CCSpriteBatchNode*) [proxy realObj];
	ret_val = [real atlasIndexForChild:(CCSprite*)arg0 atZ:(NSInteger)arg1  ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: CCSpriteBatchNode
JSBool JSPROXY_CCSpriteBatchNode_batchNodeWithFile__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );

	CCSpriteBatchNode *ret_val = [CCSpriteBatchNode batchNodeWithFile:(NSString*)arg0  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: NSString*, NSUInteger
// Ret value: CCSpriteBatchNode
JSBool JSPROXY_CCSpriteBatchNode_batchNodeWithFile_capacity__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );
	uint32_t arg1; JS_ValueToECMAUint32( cx, *argvp++, &arg1 );

	CCSpriteBatchNode *ret_val = [CCSpriteBatchNode batchNodeWithFile:(NSString*)arg0 capacity:(NSUInteger)arg1  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: CCTexture2D*
// Ret value: CCSpriteBatchNode
JSBool JSPROXY_CCSpriteBatchNode_batchNodeWithTexture__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCTexture2D* arg0 = (CCTexture2D*) jsval_to_nsobject( *argvp++, cx);

	CCSpriteBatchNode *ret_val = [CCSpriteBatchNode batchNodeWithTexture:(CCTexture2D*)arg0  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: CCTexture2D*, NSUInteger
// Ret value: CCSpriteBatchNode
JSBool JSPROXY_CCSpriteBatchNode_batchNodeWithTexture_capacity__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCTexture2D* arg0 = (CCTexture2D*) jsval_to_nsobject( *argvp++, cx);
	uint32_t arg1; JS_ValueToECMAUint32( cx, *argvp++, &arg1 );

	CCSpriteBatchNode *ret_val = [CCSpriteBatchNode batchNodeWithTexture:(CCTexture2D*)arg0 capacity:(NSUInteger)arg1  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCSpriteBatchNode_increaseAtlasCapacity(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCSpriteBatchNode *real = (CCSpriteBatchNode*) [proxy realObj];
	[real increaseAtlasCapacity ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*, NSUInteger
// Ret value: None
JSBool JSPROXY_CCSpriteBatchNode_initWithFile_capacity_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );
	uint32_t arg1; JS_ValueToECMAUint32( cx, *argvp++, &arg1 );

	CCSpriteBatchNode *real = [[CCSpriteBatchNode alloc] initWithFile:(NSString*)arg0 capacity:(NSUInteger)arg1  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCTexture2D*, NSUInteger
// Ret value: None
JSBool JSPROXY_CCSpriteBatchNode_initWithTexture_capacity_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCTexture2D* arg0 = (CCTexture2D*) jsval_to_nsobject( *argvp++, cx);
	uint32_t arg1; JS_ValueToECMAUint32( cx, *argvp++, &arg1 );

	CCSpriteBatchNode *real = [[CCSpriteBatchNode alloc] initWithTexture:(CCTexture2D*)arg0 capacity:(NSUInteger)arg1  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCSprite*, NSUInteger
// Ret value: None
JSBool JSPROXY_CCSpriteBatchNode_insertChild_inAtlasAtIndex_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCSprite* arg0 = (CCSprite*) jsval_to_nsobject( *argvp++, cx);
	uint32_t arg1; JS_ValueToECMAUint32( cx, *argvp++, &arg1 );

	CCSpriteBatchNode *real = (CCSpriteBatchNode*) [proxy realObj];
	[real insertChild:(CCSprite*)arg0 inAtlasAtIndex:(NSUInteger)arg1  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCSprite*, NSUInteger
// Ret value: NSUInteger
JSBool JSPROXY_CCSpriteBatchNode_rebuildIndexInOrder_atlasIndex_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCSprite* arg0 = (CCSprite*) jsval_to_nsobject( *argvp++, cx);
	uint32_t arg1; JS_ValueToECMAUint32( cx, *argvp++, &arg1 );
	NSUInteger ret_val;

	CCSpriteBatchNode *real = (CCSpriteBatchNode*) [proxy realObj];
	ret_val = [real rebuildIndexInOrder:(CCSprite*)arg0 atlasIndex:(NSUInteger)arg1  ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: CCSprite*, BOOL
// Ret value: None
JSBool JSPROXY_CCSpriteBatchNode_removeChild_cleanup_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCSprite* arg0 = (CCSprite*) jsval_to_nsobject( *argvp++, cx);
	JSBool arg1; JS_ValueToBoolean( cx, *argvp++, &arg1 );

	CCSpriteBatchNode *real = (CCSpriteBatchNode*) [proxy realObj];
	[real removeChild:(CCSprite*)arg0 cleanup:(BOOL)arg1  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSUInteger, BOOL
// Ret value: None
JSBool JSPROXY_CCSpriteBatchNode_removeChildAtIndex_cleanup_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	uint32_t arg0; JS_ValueToECMAUint32( cx, *argvp++, &arg0 );
	JSBool arg1; JS_ValueToBoolean( cx, *argvp++, &arg1 );

	CCSpriteBatchNode *real = (CCSpriteBatchNode*) [proxy realObj];
	[real removeChildAtIndex:(NSUInteger)arg0 cleanup:(BOOL)arg1  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCSprite*
// Ret value: None
JSBool JSPROXY_CCSpriteBatchNode_removeSpriteFromAtlas_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCSprite* arg0 = (CCSprite*) jsval_to_nsobject( *argvp++, cx);

	CCSpriteBatchNode *real = (CCSpriteBatchNode*) [proxy realObj];
	[real removeSpriteFromAtlas:(CCSprite*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCSpriteBatchNode_reorderBatch_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	CCSpriteBatchNode *real = (CCSpriteBatchNode*) [proxy realObj];
	[real reorderBatch:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: ccBlendFunc
// Ret value: None
JSBool JSPROXY_CCSpriteBatchNode_setBlendFunc_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	ccBlendFunc arg0 = *(ccBlendFunc*)JS_GetTypedArrayData( tmp_arg0);

	CCSpriteBatchNode *real = (CCSpriteBatchNode*) [proxy realObj];
	[real setBlendFunc:(ccBlendFunc)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCTexture2D*
// Ret value: None
JSBool JSPROXY_CCSpriteBatchNode_setTexture_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCTexture2D* arg0 = (CCTexture2D*) jsval_to_nsobject( *argvp++, cx);

	CCSpriteBatchNode *real = (CCSpriteBatchNode*) [proxy realObj];
	[real setTexture:(CCTexture2D*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: CCTexture2D*
JSBool JSPROXY_CCSpriteBatchNode_texture(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CCTexture2D* ret_val;

	CCSpriteBatchNode *real = (CCSpriteBatchNode*) [proxy realObj];
	ret_val = [real texture ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

void JSPROXY_CCSpriteBatchNode_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCSpriteBatchNode_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCSpriteBatchNode_class->name = name;
	JSPROXY_CCSpriteBatchNode_class->addProperty = JS_PropertyStub;
	JSPROXY_CCSpriteBatchNode_class->delProperty = JS_PropertyStub;
	JSPROXY_CCSpriteBatchNode_class->getProperty = JS_PropertyStub;
	JSPROXY_CCSpriteBatchNode_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCSpriteBatchNode_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCSpriteBatchNode_class->resolve = JS_ResolveStub;
	JSPROXY_CCSpriteBatchNode_class->convert = JS_ConvertStub;
	JSPROXY_CCSpriteBatchNode_class->finalize = JSPROXY_CCSpriteBatchNode_finalize;
	JSPROXY_CCSpriteBatchNode_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("addQuadFromSpriteQuadindex", JSPROXY_CCSpriteBatchNode_addQuadFromSprite_quadIndex_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("appendChild", JSPROXY_CCSpriteBatchNode_appendChild_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("atlasIndexForChildAtz", JSPROXY_CCSpriteBatchNode_atlasIndexForChild_atZ_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("increaseAtlasCapacity", JSPROXY_CCSpriteBatchNode_increaseAtlasCapacity, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithFileCapacity", JSPROXY_CCSpriteBatchNode_initWithFile_capacity_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithTextureCapacity", JSPROXY_CCSpriteBatchNode_initWithTexture_capacity_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("insertChildInatlasatindex", JSPROXY_CCSpriteBatchNode_insertChild_inAtlasAtIndex_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("rebuildIndexInOrderAtlasindex", JSPROXY_CCSpriteBatchNode_rebuildIndexInOrder_atlasIndex_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("removeChildCleanup", JSPROXY_CCSpriteBatchNode_removeChild_cleanup_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("removeChildAtIndexCleanup", JSPROXY_CCSpriteBatchNode_removeChildAtIndex_cleanup_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("removeSpriteFromAtlas", JSPROXY_CCSpriteBatchNode_removeSpriteFromAtlas_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("reorderBatch", JSPROXY_CCSpriteBatchNode_reorderBatch_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setBlendFunc", JSPROXY_CCSpriteBatchNode_setBlendFunc_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setTexture", JSPROXY_CCSpriteBatchNode_setTexture_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("texture", JSPROXY_CCSpriteBatchNode_texture, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("batchNodeWithFile", JSPROXY_CCSpriteBatchNode_batchNodeWithFile__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FN("batchNodeWithFileCapacity", JSPROXY_CCSpriteBatchNode_batchNodeWithFile_capacity__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FN("batchNodeWithTexture", JSPROXY_CCSpriteBatchNode_batchNodeWithTexture__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FN("batchNodeWithTextureCapacity", JSPROXY_CCSpriteBatchNode_batchNodeWithTexture_capacity__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FS_END
	};

	JSPROXY_CCSpriteBatchNode_object = JS_InitClass(cx, globalObj, JSPROXY_CCNode_object, JSPROXY_CCSpriteBatchNode_class, JSPROXY_CCSpriteBatchNode_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCSpriteBatchNode

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCSpriteBatchNode_class, JSPROXY_CCSpriteBatchNode_object, NULL);
	JSPROXY_CCSpriteBatchNode *proxy = [[JSPROXY_CCSpriteBatchNode alloc] initWithJSObject:jsobj];
	[proxy setRealObj:realObj];
	JS_SetPrivate(jsobj, proxy);

	if( realObj )
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCLabelBMFont
 */
#pragma mark - CCLabelBMFont

JSClass* JSPROXY_CCLabelBMFont_class = NULL;
JSObject* JSPROXY_CCLabelBMFont_object = NULL;
 // Constructor
JSBool JSPROXY_CCLabelBMFont_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCLabelBMFont createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCLabelBMFont_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCLabelBMFont *proxy = (JSPROXY_CCLabelBMFont*)JS_GetPrivate(obj);
	if (proxy) {
		objc_setAssociatedObject([proxy realObj], &JSPROXY_association_proxy_key, nil, OBJC_ASSOCIATION_ASSIGN);
		/* no callbacks */
		[proxy release];
	}
}

// Arguments: 
// Ret value: CCTextAlignment
JSBool JSPROXY_CCLabelBMFont_alignment(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CCTextAlignment ret_val;

	CCLabelBMFont *real = (CCLabelBMFont*) [proxy realObj];
	ret_val = [real alignment ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCLabelBMFont_createFontChars(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCLabelBMFont *real = (CCLabelBMFont*) [proxy realObj];
	[real createFontChars ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSString*
JSBool JSPROXY_CCLabelBMFont_fntFile(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSString* ret_val;

	CCLabelBMFont *real = (CCLabelBMFont*) [proxy realObj];
	ret_val = [real fntFile ];

	JSString *ret_obj = JS_NewStringCopyZ(cx, [ret_val UTF8String]);
	JS_SET_RVAL(cx, vp, STRING_TO_JSVAL(ret_obj) );

	return JS_TRUE;
}

// Arguments: NSString*, NSString*
// Ret value: None
JSBool JSPROXY_CCLabelBMFont_initWithString_fntFile_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );

	NSString *arg1 = jsval_to_nsstring( *argvp++, cx );

	CCLabelBMFont *real = [[CCLabelBMFont alloc] initWithString:(NSString*)arg0 fntFile:(NSString*)arg1  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*, NSString*, float, CCTextAlignment
// Ret value: None
JSBool JSPROXY_CCLabelBMFont_initWithString_fntFile_width_alignment_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 4, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );

	NSString *arg1 = jsval_to_nsstring( *argvp++, cx );
	double arg2; JS_ValueToNumber( cx, *argvp++, &arg2 );
	int32_t arg3; JS_ValueToECMAInt32( cx, *argvp++, &arg3 );

	CCLabelBMFont *real = [[CCLabelBMFont alloc] initWithString:(NSString*)arg0 fntFile:(NSString*)arg1 width:(float)arg2 alignment:(CCTextAlignment)arg3  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*, NSString*, float, CCTextAlignment, CGPoint
// Ret value: None
JSBool JSPROXY_CCLabelBMFont_initWithString_fntFile_width_alignment_imageOffset_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 5, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );

	NSString *arg1 = jsval_to_nsstring( *argvp++, cx );
	double arg2; JS_ValueToNumber( cx, *argvp++, &arg2 );
	int32_t arg3; JS_ValueToECMAInt32( cx, *argvp++, &arg3 );

	JSObject *tmp_arg4;
	JS_ValueToObject( cx, *argvp++, &tmp_arg4 );
	NSCAssert( JS_GetTypedArrayByteLength( tmp_arg4 ) == 8, @"Invalid length");
#ifdef __CC_PLATFORM_IOS
	CGPoint arg4 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg4 );
#elif defined(__CC_PLATFORM_MAC)
	float* arg4_array = (float*)JS_GetTypedArrayData( tmp_arg4 );
	CGPoint arg4 = ccp(arg4_array[0], arg4_array[1] );
#else
#error Unsupported Platform
#endif  

	CCLabelBMFont *real = [[CCLabelBMFont alloc] initWithString:(NSString*)arg0 fntFile:(NSString*)arg1 width:(float)arg2 alignment:(CCTextAlignment)arg3 imageOffset:(CGPoint)arg4  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*, NSString*
// Ret value: CCLabelBMFont
JSBool JSPROXY_CCLabelBMFont_labelWithString_fntFile__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );

	NSString *arg1 = jsval_to_nsstring( *argvp++, cx );

	CCLabelBMFont *ret_val = [CCLabelBMFont labelWithString:(NSString*)arg0 fntFile:(NSString*)arg1  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: NSString*, NSString*, float, CCTextAlignment
// Ret value: CCLabelBMFont
JSBool JSPROXY_CCLabelBMFont_labelWithString_fntFile_width_alignment__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 4, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );

	NSString *arg1 = jsval_to_nsstring( *argvp++, cx );
	double arg2; JS_ValueToNumber( cx, *argvp++, &arg2 );
	int32_t arg3; JS_ValueToECMAInt32( cx, *argvp++, &arg3 );

	CCLabelBMFont *ret_val = [CCLabelBMFont labelWithString:(NSString*)arg0 fntFile:(NSString*)arg1 width:(float)arg2 alignment:(CCTextAlignment)arg3  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: NSString*, NSString*, float, CCTextAlignment, CGPoint
// Ret value: CCLabelBMFont
JSBool JSPROXY_CCLabelBMFont_labelWithString_fntFile_width_alignment_imageOffset__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 5, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );

	NSString *arg1 = jsval_to_nsstring( *argvp++, cx );
	double arg2; JS_ValueToNumber( cx, *argvp++, &arg2 );
	int32_t arg3; JS_ValueToECMAInt32( cx, *argvp++, &arg3 );

	JSObject *tmp_arg4;
	JS_ValueToObject( cx, *argvp++, &tmp_arg4 );
	NSCAssert( JS_GetTypedArrayByteLength( tmp_arg4 ) == 8, @"Invalid length");
#ifdef __CC_PLATFORM_IOS
	CGPoint arg4 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg4 );
#elif defined(__CC_PLATFORM_MAC)
	float* arg4_array = (float*)JS_GetTypedArrayData( tmp_arg4 );
	CGPoint arg4 = ccp(arg4_array[0], arg4_array[1] );
#else
#error Unsupported Platform
#endif  

	CCLabelBMFont *ret_val = [CCLabelBMFont labelWithString:(NSString*)arg0 fntFile:(NSString*)arg1 width:(float)arg2 alignment:(CCTextAlignment)arg3 imageOffset:(CGPoint)arg4  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: GLubyte
JSBool JSPROXY_CCLabelBMFont_opacity(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	GLubyte ret_val;

	CCLabelBMFont *real = (CCLabelBMFont*) [proxy realObj];
	ret_val = [real opacity ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCLabelBMFont_purgeCachedData_static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[CCLabelBMFont purgeCachedData ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCTextAlignment
// Ret value: None
JSBool JSPROXY_CCLabelBMFont_setAlignment_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	int32_t arg0; JS_ValueToECMAInt32( cx, *argvp++, &arg0 );

	CCLabelBMFont *real = (CCLabelBMFont*) [proxy realObj];
	[real setAlignment:(CCTextAlignment)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: ccColor3B
// Ret value: None
JSBool JSPROXY_CCLabelBMFont_setColor_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	ccColor3B arg0 = *(ccColor3B*)JS_GetTypedArrayData( tmp_arg0);

	CCLabelBMFont *real = (CCLabelBMFont*) [proxy realObj];
	[real setColor:(ccColor3B)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: None
JSBool JSPROXY_CCLabelBMFont_setFntFile_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );

	CCLabelBMFont *real = (CCLabelBMFont*) [proxy realObj];
	[real setFntFile:(NSString*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: GLubyte
// Ret value: None
JSBool JSPROXY_CCLabelBMFont_setOpacity_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	uint16_t arg0; JS_ValueToUint16( cx, *argvp++, &arg0 );

	CCLabelBMFont *real = (CCLabelBMFont*) [proxy realObj];
	[real setOpacity:(GLubyte)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCLabelBMFont_setWidth_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCLabelBMFont *real = (CCLabelBMFont*) [proxy realObj];
	[real setWidth:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: None
JSBool JSPROXY_CCLabelBMFont_setString_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );

	CCLabelBMFont *real = (CCLabelBMFont*) [proxy realObj];
	[real setString:(NSString*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSString*
JSBool JSPROXY_CCLabelBMFont_string(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSString* ret_val;

	CCLabelBMFont *real = (CCLabelBMFont*) [proxy realObj];
	ret_val = [real string ];

	JSString *ret_obj = JS_NewStringCopyZ(cx, [ret_val UTF8String]);
	JS_SET_RVAL(cx, vp, STRING_TO_JSVAL(ret_obj) );

	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCLabelBMFont_doesOpacityModifyRGB(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CCLabelBMFont *real = (CCLabelBMFont*) [proxy realObj];
	ret_val = [real doesOpacityModifyRGB ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCLabelBMFont_setOpacityModifyRGB_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	CCLabelBMFont *real = (CCLabelBMFont*) [proxy realObj];
	[real setOpacityModifyRGB:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

void JSPROXY_CCLabelBMFont_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCLabelBMFont_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCLabelBMFont_class->name = name;
	JSPROXY_CCLabelBMFont_class->addProperty = JS_PropertyStub;
	JSPROXY_CCLabelBMFont_class->delProperty = JS_PropertyStub;
	JSPROXY_CCLabelBMFont_class->getProperty = JS_PropertyStub;
	JSPROXY_CCLabelBMFont_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCLabelBMFont_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCLabelBMFont_class->resolve = JS_ResolveStub;
	JSPROXY_CCLabelBMFont_class->convert = JS_ConvertStub;
	JSPROXY_CCLabelBMFont_class->finalize = JSPROXY_CCLabelBMFont_finalize;
	JSPROXY_CCLabelBMFont_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("alignment", JSPROXY_CCLabelBMFont_alignment, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("createFontChars", JSPROXY_CCLabelBMFont_createFontChars, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("fntFile", JSPROXY_CCLabelBMFont_fntFile, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithStringFntfile", JSPROXY_CCLabelBMFont_initWithString_fntFile_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithStringFntfileWidthAlignment", JSPROXY_CCLabelBMFont_initWithString_fntFile_width_alignment_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithStringFntfileWidthAlignmentImageoffset", JSPROXY_CCLabelBMFont_initWithString_fntFile_width_alignment_imageOffset_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("opacity", JSPROXY_CCLabelBMFont_opacity, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setAlignment", JSPROXY_CCLabelBMFont_setAlignment_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setColor", JSPROXY_CCLabelBMFont_setColor_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setFntFile", JSPROXY_CCLabelBMFont_setFntFile_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setOpacity", JSPROXY_CCLabelBMFont_setOpacity_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setWidth", JSPROXY_CCLabelBMFont_setWidth_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setString", JSPROXY_CCLabelBMFont_setString_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("string", JSPROXY_CCLabelBMFont_string, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("doesOpacityModifyRGB", JSPROXY_CCLabelBMFont_doesOpacityModifyRGB, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setOpacityModifyRGB", JSPROXY_CCLabelBMFont_setOpacityModifyRGB_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("labelWithStringFntfile", JSPROXY_CCLabelBMFont_labelWithString_fntFile__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FN("labelWithStringFntfileWidthAlignment", JSPROXY_CCLabelBMFont_labelWithString_fntFile_width_alignment__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FN("labelWithStringFntfileWidthAlignmentImageoffset", JSPROXY_CCLabelBMFont_labelWithString_fntFile_width_alignment_imageOffset__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FN("purgeCachedData", JSPROXY_CCLabelBMFont_purgeCachedData_static, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};

	JSPROXY_CCLabelBMFont_object = JS_InitClass(cx, globalObj, JSPROXY_CCSpriteBatchNode_object, JSPROXY_CCLabelBMFont_class, JSPROXY_CCLabelBMFont_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCLabelBMFont

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCLabelBMFont_class, JSPROXY_CCLabelBMFont_object, NULL);
	JSPROXY_CCLabelBMFont *proxy = [[JSPROXY_CCLabelBMFont alloc] initWithJSObject:jsobj];
	[proxy setRealObj:realObj];
	JS_SetPrivate(jsobj, proxy);

	if( realObj )
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCTexture2D
 */
#pragma mark - CCTexture2D

JSClass* JSPROXY_CCTexture2D_class = NULL;
JSObject* JSPROXY_CCTexture2D_object = NULL;
 // Constructor
JSBool JSPROXY_CCTexture2D_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCTexture2D createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCTexture2D_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCTexture2D *proxy = (JSPROXY_CCTexture2D*)JS_GetPrivate(obj);
	if (proxy) {
		objc_setAssociatedObject([proxy realObj], &JSPROXY_association_proxy_key, nil, OBJC_ASSOCIATION_ASSIGN);
		/* no callbacks */
		[proxy release];
	}
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCTexture2D_PVRImagesHavePremultipliedAlpha__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	[CCTexture2D PVRImagesHavePremultipliedAlpha:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSUInteger
JSBool JSPROXY_CCTexture2D_bitsPerPixelForFormat(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSUInteger ret_val;

	CCTexture2D *real = (CCTexture2D*) [proxy realObj];
	ret_val = [real bitsPerPixelForFormat ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: CCTexture2DPixelFormat
// Ret value: NSUInteger
JSBool JSPROXY_CCTexture2D_bitsPerPixelForFormat__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	int32_t arg0; JS_ValueToECMAInt32( cx, *argvp++, &arg0 );

	NSUInteger ret_val = [CCTexture2D bitsPerPixelForFormat:(CCTexture2DPixelFormat)arg0  ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: CGSize
JSBool JSPROXY_CCTexture2D_contentSize(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CGSize ret_val;

	CCTexture2D *real = (CCTexture2D*) [proxy realObj];
	ret_val = [real contentSize ];

	jsval ret_jsval = CGSize_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: 
// Ret value: CGSize
JSBool JSPROXY_CCTexture2D_contentSizeInPixels(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CGSize ret_val;

	CCTexture2D *real = (CCTexture2D*) [proxy realObj];
	ret_val = [real contentSizeInPixels ];

	jsval ret_jsval = CGSize_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: 
// Ret value: CCTexture2DPixelFormat
JSBool JSPROXY_CCTexture2D_defaultAlphaPixelFormat_static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCTexture2DPixelFormat ret_val = [CCTexture2D defaultAlphaPixelFormat ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: CGPoint
// Ret value: None
JSBool JSPROXY_CCTexture2D_drawAtPoint_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	NSCAssert( JS_GetTypedArrayByteLength( tmp_arg0 ) == 8, @"Invalid length");
#ifdef __CC_PLATFORM_IOS
	CGPoint arg0 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg0 );
#elif defined(__CC_PLATFORM_MAC)
	float* arg0_array = (float*)JS_GetTypedArrayData( tmp_arg0 );
	CGPoint arg0 = ccp(arg0_array[0], arg0_array[1] );
#else
#error Unsupported Platform
#endif  

	CCTexture2D *real = (CCTexture2D*) [proxy realObj];
	[real drawAtPoint:(CGPoint)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCTexture2D_generateMipmap(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCTexture2D *real = (CCTexture2D*) [proxy realObj];
	[real generateMipmap ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCTexture2D_hasPremultipliedAlpha(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CCTexture2D *real = (CCTexture2D*) [proxy realObj];
	ret_val = [real hasPremultipliedAlpha ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: None
JSBool JSPROXY_CCTexture2D_initWithPVRFile_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );

	CCTexture2D *real = [[CCTexture2D alloc] initWithPVRFile:(NSString*)arg0  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*, CGSize, CCTextAlignment, CCVerticalTextAlignment, NSString*, CGFloat
// Ret value: None
JSBool JSPROXY_CCTexture2D_initWithString_dimensions_hAlignment_vAlignment_fontName_fontSize_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 6, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );

	JSObject *tmp_arg1;
	JS_ValueToObject( cx, *argvp++, &tmp_arg1 );
	CGSize arg1 = *(CGSize*)JS_GetTypedArrayData( tmp_arg1);
	int32_t arg2; JS_ValueToECMAInt32( cx, *argvp++, &arg2 );
	int32_t arg3; JS_ValueToECMAInt32( cx, *argvp++, &arg3 );

	NSString *arg4 = jsval_to_nsstring( *argvp++, cx );
	double arg5; JS_ValueToNumber( cx, *argvp++, &arg5 );

	CCTexture2D *real = [[CCTexture2D alloc] initWithString:(NSString*)arg0 dimensions:(CGSize)arg1 hAlignment:(CCTextAlignment)arg2 vAlignment:(CCVerticalTextAlignment)arg3 fontName:(NSString*)arg4 fontSize:(CGFloat)arg5  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*, CGSize, CCTextAlignment, CCVerticalTextAlignment, CCLineBreakMode, NSString*, CGFloat
// Ret value: None
JSBool JSPROXY_CCTexture2D_initWithString_dimensions_hAlignment_vAlignment_lineBreakMode_fontName_fontSize_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 7, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );

	JSObject *tmp_arg1;
	JS_ValueToObject( cx, *argvp++, &tmp_arg1 );
	CGSize arg1 = *(CGSize*)JS_GetTypedArrayData( tmp_arg1);
	int32_t arg2; JS_ValueToECMAInt32( cx, *argvp++, &arg2 );
	int32_t arg3; JS_ValueToECMAInt32( cx, *argvp++, &arg3 );
	int32_t arg4; JS_ValueToECMAInt32( cx, *argvp++, &arg4 );

	NSString *arg5 = jsval_to_nsstring( *argvp++, cx );
	double arg6; JS_ValueToNumber( cx, *argvp++, &arg6 );

	CCTexture2D *real = [[CCTexture2D alloc] initWithString:(NSString*)arg0 dimensions:(CGSize)arg1 hAlignment:(CCTextAlignment)arg2 vAlignment:(CCVerticalTextAlignment)arg3 lineBreakMode:(CCLineBreakMode)arg4 fontName:(NSString*)arg5 fontSize:(CGFloat)arg6  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*, NSString*, CGFloat
// Ret value: None
JSBool JSPROXY_CCTexture2D_initWithString_fontName_fontSize_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 3, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );

	NSString *arg1 = jsval_to_nsstring( *argvp++, cx );
	double arg2; JS_ValueToNumber( cx, *argvp++, &arg2 );

	CCTexture2D *real = [[CCTexture2D alloc] initWithString:(NSString*)arg0 fontName:(NSString*)arg1 fontSize:(CGFloat)arg2  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: GLfloat
JSBool JSPROXY_CCTexture2D_maxS(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	GLfloat ret_val;

	CCTexture2D *real = (CCTexture2D*) [proxy realObj];
	ret_val = [real maxS ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: GLfloat
JSBool JSPROXY_CCTexture2D_maxT(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	GLfloat ret_val;

	CCTexture2D *real = (CCTexture2D*) [proxy realObj];
	ret_val = [real maxT ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: GLuint
JSBool JSPROXY_CCTexture2D_name(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	GLuint ret_val;

	CCTexture2D *real = (CCTexture2D*) [proxy realObj];
	ret_val = [real name ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: CCTexture2DPixelFormat
JSBool JSPROXY_CCTexture2D_pixelFormat(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CCTexture2DPixelFormat ret_val;

	CCTexture2D *real = (CCTexture2D*) [proxy realObj];
	ret_val = [real pixelFormat ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSUInteger
JSBool JSPROXY_CCTexture2D_pixelsHigh(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSUInteger ret_val;

	CCTexture2D *real = (CCTexture2D*) [proxy realObj];
	ret_val = [real pixelsHigh ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSUInteger
JSBool JSPROXY_CCTexture2D_pixelsWide(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSUInteger ret_val;

	CCTexture2D *real = (CCTexture2D*) [proxy realObj];
	ret_val = [real pixelsWide ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCTexture2D_setAliasTexParameters(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCTexture2D *real = (CCTexture2D*) [proxy realObj];
	[real setAliasTexParameters ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCTexture2D_setAntiAliasTexParameters(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCTexture2D *real = (CCTexture2D*) [proxy realObj];
	[real setAntiAliasTexParameters ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCTexture2DPixelFormat
// Ret value: None
JSBool JSPROXY_CCTexture2D_setDefaultAlphaPixelFormat__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	int32_t arg0; JS_ValueToECMAInt32( cx, *argvp++, &arg0 );

	[CCTexture2D setDefaultAlphaPixelFormat:(CCTexture2DPixelFormat)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: GLfloat
// Ret value: None
JSBool JSPROXY_CCTexture2D_setMaxS_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCTexture2D *real = (CCTexture2D*) [proxy realObj];
	[real setMaxS:(GLfloat)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: GLfloat
// Ret value: None
JSBool JSPROXY_CCTexture2D_setMaxT_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCTexture2D *real = (CCTexture2D*) [proxy realObj];
	[real setMaxT:(GLfloat)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSString*
JSBool JSPROXY_CCTexture2D_stringForFormat(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSString* ret_val;

	CCTexture2D *real = (CCTexture2D*) [proxy realObj];
	ret_val = [real stringForFormat ];

	JSString *ret_obj = JS_NewStringCopyZ(cx, [ret_val UTF8String]);
	JS_SET_RVAL(cx, vp, STRING_TO_JSVAL(ret_obj) );

	return JS_TRUE;
}

void JSPROXY_CCTexture2D_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCTexture2D_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCTexture2D_class->name = name;
	JSPROXY_CCTexture2D_class->addProperty = JS_PropertyStub;
	JSPROXY_CCTexture2D_class->delProperty = JS_PropertyStub;
	JSPROXY_CCTexture2D_class->getProperty = JS_PropertyStub;
	JSPROXY_CCTexture2D_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCTexture2D_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCTexture2D_class->resolve = JS_ResolveStub;
	JSPROXY_CCTexture2D_class->convert = JS_ConvertStub;
	JSPROXY_CCTexture2D_class->finalize = JSPROXY_CCTexture2D_finalize;
	JSPROXY_CCTexture2D_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("bitsPerPixelForFormat", JSPROXY_CCTexture2D_bitsPerPixelForFormat, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("contentSize", JSPROXY_CCTexture2D_contentSize, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("contentSizeInPixels", JSPROXY_CCTexture2D_contentSizeInPixels, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("drawAtPoint", JSPROXY_CCTexture2D_drawAtPoint_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("generateMipmap", JSPROXY_CCTexture2D_generateMipmap, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("hasPremultipliedAlpha", JSPROXY_CCTexture2D_hasPremultipliedAlpha, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithPVRFile", JSPROXY_CCTexture2D_initWithPVRFile_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithStringDimensionsHalignmentValignmentFontnameFontsize", JSPROXY_CCTexture2D_initWithString_dimensions_hAlignment_vAlignment_fontName_fontSize_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithStringDimensionsHalignmentValignmentLinebreakmodeFontnameFontsize", JSPROXY_CCTexture2D_initWithString_dimensions_hAlignment_vAlignment_lineBreakMode_fontName_fontSize_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithStringFontnameFontsize", JSPROXY_CCTexture2D_initWithString_fontName_fontSize_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("maxS", JSPROXY_CCTexture2D_maxS, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("maxT", JSPROXY_CCTexture2D_maxT, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("name", JSPROXY_CCTexture2D_name, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("pixelFormat", JSPROXY_CCTexture2D_pixelFormat, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("pixelsHigh", JSPROXY_CCTexture2D_pixelsHigh, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("pixelsWide", JSPROXY_CCTexture2D_pixelsWide, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setAliasTexParameters", JSPROXY_CCTexture2D_setAliasTexParameters, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setAntiAliasTexParameters", JSPROXY_CCTexture2D_setAntiAliasTexParameters, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setMaxS", JSPROXY_CCTexture2D_setMaxS_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setMaxT", JSPROXY_CCTexture2D_setMaxT_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("stringForFormat", JSPROXY_CCTexture2D_stringForFormat, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("PVRImagesHavePremultipliedAlpha", JSPROXY_CCTexture2D_PVRImagesHavePremultipliedAlpha__static, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("bitsPerPixelForFormat", JSPROXY_CCTexture2D_bitsPerPixelForFormat__static, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("defaultAlphaPixelFormat", JSPROXY_CCTexture2D_defaultAlphaPixelFormat_static, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setDefaultAlphaPixelFormat", JSPROXY_CCTexture2D_setDefaultAlphaPixelFormat__static, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};

	JSPROXY_CCTexture2D_object = JS_InitClass(cx, globalObj, JSPROXY_NSObject_object, JSPROXY_CCTexture2D_class, JSPROXY_CCTexture2D_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCTexture2D

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCTexture2D_class, JSPROXY_CCTexture2D_object, NULL);
	JSPROXY_CCTexture2D *proxy = [[JSPROXY_CCTexture2D alloc] initWithJSObject:jsobj];
	[proxy setRealObj:realObj];
	JS_SetPrivate(jsobj, proxy);

	if( realObj )
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCSequence
 */
#pragma mark - CCSequence

JSClass* JSPROXY_CCSequence_class = NULL;
JSObject* JSPROXY_CCSequence_object = NULL;
 // Constructor
JSBool JSPROXY_CCSequence_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCSequence createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCSequence_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCSequence *proxy = (JSPROXY_CCSequence*)JS_GetPrivate(obj);
	if (proxy) {
		objc_setAssociatedObject([proxy realObj], &JSPROXY_association_proxy_key, nil, OBJC_ASSOCIATION_ASSIGN);
		/* no callbacks */
		[proxy release];
	}
}

// Arguments: CCFiniteTimeAction*, CCFiniteTimeAction*
// Ret value: CCSequence
JSBool JSPROXY_CCSequence_actionOne_two__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCFiniteTimeAction* arg0 = (CCFiniteTimeAction*) jsval_to_nsobject( *argvp++, cx);

	CCFiniteTimeAction* arg1 = (CCFiniteTimeAction*) jsval_to_nsobject( *argvp++, cx);

	CCSequence *ret_val = [CCSequence actionOne:(CCFiniteTimeAction*)arg0 two:(CCFiniteTimeAction*)arg1  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: NSArray*
// Ret value: CCSequence
JSBool JSPROXY_CCSequence_actionWithArray__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	// Parsing sequence
	NSArray *arg0 = jsval_to_nsarray( *argvp++, cx );

	CCSequence *ret_val = [CCSequence actionWithArray:(NSArray*)arg0  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: CCFiniteTimeAction*, CCFiniteTimeAction*
// Ret value: None
JSBool JSPROXY_CCSequence_initOne_two_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCFiniteTimeAction* arg0 = (CCFiniteTimeAction*) jsval_to_nsobject( *argvp++, cx);

	CCFiniteTimeAction* arg1 = (CCFiniteTimeAction*) jsval_to_nsobject( *argvp++, cx);

	CCSequence *real = [[CCSequence alloc] initOne:(CCFiniteTimeAction*)arg0 two:(CCFiniteTimeAction*)arg1  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

void JSPROXY_CCSequence_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCSequence_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCSequence_class->name = name;
	JSPROXY_CCSequence_class->addProperty = JS_PropertyStub;
	JSPROXY_CCSequence_class->delProperty = JS_PropertyStub;
	JSPROXY_CCSequence_class->getProperty = JS_PropertyStub;
	JSPROXY_CCSequence_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCSequence_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCSequence_class->resolve = JS_ResolveStub;
	JSPROXY_CCSequence_class->convert = JS_ConvertStub;
	JSPROXY_CCSequence_class->finalize = JSPROXY_CCSequence_finalize;
	JSPROXY_CCSequence_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("initOneTwo", JSPROXY_CCSequence_initOne_two_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("actionOneTwo", JSPROXY_CCSequence_actionOne_two__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FN("actionWithArray", JSPROXY_CCSequence_actionWithArray__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FS_END
	};

	JSPROXY_CCSequence_object = JS_InitClass(cx, globalObj, JSPROXY_CCActionInterval_object, JSPROXY_CCSequence_class, JSPROXY_CCSequence_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCSequence

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCSequence_class, JSPROXY_CCSequence_object, NULL);
	JSPROXY_CCSequence *proxy = [[JSPROXY_CCSequence alloc] initWithJSObject:jsobj];
	[proxy setRealObj:realObj];
	JS_SetPrivate(jsobj, proxy);

	if( realObj )
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCTintTo
 */
#pragma mark - CCTintTo

JSClass* JSPROXY_CCTintTo_class = NULL;
JSObject* JSPROXY_CCTintTo_object = NULL;
 // Constructor
JSBool JSPROXY_CCTintTo_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCTintTo createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCTintTo_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCTintTo *proxy = (JSPROXY_CCTintTo*)JS_GetPrivate(obj);
	if (proxy) {
		objc_setAssociatedObject([proxy realObj], &JSPROXY_association_proxy_key, nil, OBJC_ASSOCIATION_ASSIGN);
		/* no callbacks */
		[proxy release];
	}
}

// Arguments: ccTime, GLubyte, GLubyte, GLubyte
// Ret value: CCTintTo
JSBool JSPROXY_CCTintTo_actionWithDuration_red_green_blue__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 4, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );
	uint16_t arg1; JS_ValueToUint16( cx, *argvp++, &arg1 );
	uint16_t arg2; JS_ValueToUint16( cx, *argvp++, &arg2 );
	uint16_t arg3; JS_ValueToUint16( cx, *argvp++, &arg3 );

	CCTintTo *ret_val = [CCTintTo actionWithDuration:(ccTime)arg0 red:(GLubyte)arg1 green:(GLubyte)arg2 blue:(GLubyte)arg3  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: ccTime, GLubyte, GLubyte, GLubyte
// Ret value: None
JSBool JSPROXY_CCTintTo_initWithDuration_red_green_blue_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 4, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );
	uint16_t arg1; JS_ValueToUint16( cx, *argvp++, &arg1 );
	uint16_t arg2; JS_ValueToUint16( cx, *argvp++, &arg2 );
	uint16_t arg3; JS_ValueToUint16( cx, *argvp++, &arg3 );

	CCTintTo *real = [[CCTintTo alloc] initWithDuration:(ccTime)arg0 red:(GLubyte)arg1 green:(GLubyte)arg2 blue:(GLubyte)arg3  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

void JSPROXY_CCTintTo_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCTintTo_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCTintTo_class->name = name;
	JSPROXY_CCTintTo_class->addProperty = JS_PropertyStub;
	JSPROXY_CCTintTo_class->delProperty = JS_PropertyStub;
	JSPROXY_CCTintTo_class->getProperty = JS_PropertyStub;
	JSPROXY_CCTintTo_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCTintTo_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCTintTo_class->resolve = JS_ResolveStub;
	JSPROXY_CCTintTo_class->convert = JS_ConvertStub;
	JSPROXY_CCTintTo_class->finalize = JSPROXY_CCTintTo_finalize;
	JSPROXY_CCTintTo_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("initWithDurationRedGreenBlue", JSPROXY_CCTintTo_initWithDuration_red_green_blue_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("actionWithDurationRedGreenBlue", JSPROXY_CCTintTo_actionWithDuration_red_green_blue__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FS_END
	};

	JSPROXY_CCTintTo_object = JS_InitClass(cx, globalObj, JSPROXY_CCActionInterval_object, JSPROXY_CCTintTo_class, JSPROXY_CCTintTo_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCTintTo

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCTintTo_class, JSPROXY_CCTintTo_object, NULL);
	JSPROXY_CCTintTo *proxy = [[JSPROXY_CCTintTo alloc] initWithJSObject:jsobj];
	[proxy setRealObj:realObj];
	JS_SetPrivate(jsobj, proxy);

	if( realObj )
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCRenderTexture
 */
#pragma mark - CCRenderTexture

JSClass* JSPROXY_CCRenderTexture_class = NULL;
JSObject* JSPROXY_CCRenderTexture_object = NULL;
 // Constructor
JSBool JSPROXY_CCRenderTexture_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCRenderTexture createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCRenderTexture_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCRenderTexture *proxy = (JSPROXY_CCRenderTexture*)JS_GetPrivate(obj);
	if (proxy) {
		objc_setAssociatedObject([proxy realObj], &JSPROXY_association_proxy_key, nil, OBJC_ASSOCIATION_ASSIGN);
		/* no callbacks */
		[proxy release];
	}
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCRenderTexture_begin(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCRenderTexture *real = (CCRenderTexture*) [proxy realObj];
	[real begin ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float, float, float, float
// Ret value: None
JSBool JSPROXY_CCRenderTexture_beginWithClear_g_b_a_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 4, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );
	double arg1; JS_ValueToNumber( cx, *argvp++, &arg1 );
	double arg2; JS_ValueToNumber( cx, *argvp++, &arg2 );
	double arg3; JS_ValueToNumber( cx, *argvp++, &arg3 );

	CCRenderTexture *real = (CCRenderTexture*) [proxy realObj];
	[real beginWithClear:(float)arg0 g:(float)arg1 b:(float)arg2 a:(float)arg3  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float, float, float, float, float
// Ret value: None
JSBool JSPROXY_CCRenderTexture_beginWithClear_g_b_a_depth_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 5, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );
	double arg1; JS_ValueToNumber( cx, *argvp++, &arg1 );
	double arg2; JS_ValueToNumber( cx, *argvp++, &arg2 );
	double arg3; JS_ValueToNumber( cx, *argvp++, &arg3 );
	double arg4; JS_ValueToNumber( cx, *argvp++, &arg4 );

	CCRenderTexture *real = (CCRenderTexture*) [proxy realObj];
	[real beginWithClear:(float)arg0 g:(float)arg1 b:(float)arg2 a:(float)arg3 depth:(float)arg4  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float, float, float, float, float, int
// Ret value: None
JSBool JSPROXY_CCRenderTexture_beginWithClear_g_b_a_depth_stencil_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 6, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );
	double arg1; JS_ValueToNumber( cx, *argvp++, &arg1 );
	double arg2; JS_ValueToNumber( cx, *argvp++, &arg2 );
	double arg3; JS_ValueToNumber( cx, *argvp++, &arg3 );
	double arg4; JS_ValueToNumber( cx, *argvp++, &arg4 );
	int32_t arg5; JS_ValueToECMAInt32( cx, *argvp++, &arg5 );

	CCRenderTexture *real = (CCRenderTexture*) [proxy realObj];
	[real beginWithClear:(float)arg0 g:(float)arg1 b:(float)arg2 a:(float)arg3 depth:(float)arg4 stencil:(int)arg5  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float, float, float, float
// Ret value: None
JSBool JSPROXY_CCRenderTexture_clear_g_b_a_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 4, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );
	double arg1; JS_ValueToNumber( cx, *argvp++, &arg1 );
	double arg2; JS_ValueToNumber( cx, *argvp++, &arg2 );
	double arg3; JS_ValueToNumber( cx, *argvp++, &arg3 );

	CCRenderTexture *real = (CCRenderTexture*) [proxy realObj];
	[real clear:(float)arg0 g:(float)arg1 b:(float)arg2 a:(float)arg3  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCRenderTexture_clearDepth_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCRenderTexture *real = (CCRenderTexture*) [proxy realObj];
	[real clearDepth:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: int
// Ret value: None
JSBool JSPROXY_CCRenderTexture_clearStencil_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	int32_t arg0; JS_ValueToECMAInt32( cx, *argvp++, &arg0 );

	CCRenderTexture *real = (CCRenderTexture*) [proxy realObj];
	[real clearStencil:(int)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCRenderTexture_end(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCRenderTexture *real = (CCRenderTexture*) [proxy realObj];
	[real end ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: int, int, CCTexture2DPixelFormat
// Ret value: None
JSBool JSPROXY_CCRenderTexture_initWithWidth_height_pixelFormat_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 3, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	int32_t arg0; JS_ValueToECMAInt32( cx, *argvp++, &arg0 );
	int32_t arg1; JS_ValueToECMAInt32( cx, *argvp++, &arg1 );
	int32_t arg2; JS_ValueToECMAInt32( cx, *argvp++, &arg2 );

	CCRenderTexture *real = [[CCRenderTexture alloc] initWithWidth:(int)arg0 height:(int)arg1 pixelFormat:(CCTexture2DPixelFormat)arg2  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: int, int, CCTexture2DPixelFormat, GLuint
// Ret value: None
JSBool JSPROXY_CCRenderTexture_initWithWidth_height_pixelFormat_depthStencilFormat_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 4, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	int32_t arg0; JS_ValueToECMAInt32( cx, *argvp++, &arg0 );
	int32_t arg1; JS_ValueToECMAInt32( cx, *argvp++, &arg1 );
	int32_t arg2; JS_ValueToECMAInt32( cx, *argvp++, &arg2 );
	uint32_t arg3; JS_ValueToECMAUint32( cx, *argvp++, &arg3 );

	CCRenderTexture *real = [[CCRenderTexture alloc] initWithWidth:(int)arg0 height:(int)arg1 pixelFormat:(CCTexture2DPixelFormat)arg2 depthStencilFormat:(GLuint)arg3  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: int, int
// Ret value: CCRenderTexture
JSBool JSPROXY_CCRenderTexture_renderTextureWithWidth_height__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	int32_t arg0; JS_ValueToECMAInt32( cx, *argvp++, &arg0 );
	int32_t arg1; JS_ValueToECMAInt32( cx, *argvp++, &arg1 );

	CCRenderTexture *ret_val = [CCRenderTexture renderTextureWithWidth:(int)arg0 height:(int)arg1  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: int, int, CCTexture2DPixelFormat
// Ret value: CCRenderTexture
JSBool JSPROXY_CCRenderTexture_renderTextureWithWidth_height_pixelFormat__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 3, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	int32_t arg0; JS_ValueToECMAInt32( cx, *argvp++, &arg0 );
	int32_t arg1; JS_ValueToECMAInt32( cx, *argvp++, &arg1 );
	int32_t arg2; JS_ValueToECMAInt32( cx, *argvp++, &arg2 );

	CCRenderTexture *ret_val = [CCRenderTexture renderTextureWithWidth:(int)arg0 height:(int)arg1 pixelFormat:(CCTexture2DPixelFormat)arg2  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: int, int, CCTexture2DPixelFormat, GLuint
// Ret value: CCRenderTexture
JSBool JSPROXY_CCRenderTexture_renderTextureWithWidth_height_pixelFormat_depthStencilFormat__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 4, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	int32_t arg0; JS_ValueToECMAInt32( cx, *argvp++, &arg0 );
	int32_t arg1; JS_ValueToECMAInt32( cx, *argvp++, &arg1 );
	int32_t arg2; JS_ValueToECMAInt32( cx, *argvp++, &arg2 );
	uint32_t arg3; JS_ValueToECMAUint32( cx, *argvp++, &arg3 );

	CCRenderTexture *ret_val = [CCRenderTexture renderTextureWithWidth:(int)arg0 height:(int)arg1 pixelFormat:(CCTexture2DPixelFormat)arg2 depthStencilFormat:(GLuint)arg3  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: BOOL
JSBool JSPROXY_CCRenderTexture_saveToFile_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );
	BOOL ret_val;

	CCRenderTexture *real = (CCRenderTexture*) [proxy realObj];
	ret_val = [real saveToFile:(NSString*)arg0  ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: NSString*, tCCImageFormat
// Ret value: BOOL
JSBool JSPROXY_CCRenderTexture_saveToFile_format_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	NSString *arg0 = jsval_to_nsstring( *argvp++, cx );
	int32_t arg1; JS_ValueToECMAInt32( cx, *argvp++, &arg1 );
	BOOL ret_val;

	CCRenderTexture *real = (CCRenderTexture*) [proxy realObj];
	ret_val = [real saveToFile:(NSString*)arg0 format:(tCCImageFormat)arg1  ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: CCSprite*
// Ret value: None
JSBool JSPROXY_CCRenderTexture_setSprite_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCSprite* arg0 = (CCSprite*) jsval_to_nsobject( *argvp++, cx);

	CCRenderTexture *real = (CCRenderTexture*) [proxy realObj];
	[real setSprite:(CCSprite*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: CCSprite*
JSBool JSPROXY_CCRenderTexture_sprite(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CCSprite* ret_val;

	CCRenderTexture *real = (CCRenderTexture*) [proxy realObj];
	ret_val = [real sprite ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

void JSPROXY_CCRenderTexture_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCRenderTexture_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCRenderTexture_class->name = name;
	JSPROXY_CCRenderTexture_class->addProperty = JS_PropertyStub;
	JSPROXY_CCRenderTexture_class->delProperty = JS_PropertyStub;
	JSPROXY_CCRenderTexture_class->getProperty = JS_PropertyStub;
	JSPROXY_CCRenderTexture_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCRenderTexture_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCRenderTexture_class->resolve = JS_ResolveStub;
	JSPROXY_CCRenderTexture_class->convert = JS_ConvertStub;
	JSPROXY_CCRenderTexture_class->finalize = JSPROXY_CCRenderTexture_finalize;
	JSPROXY_CCRenderTexture_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("begin", JSPROXY_CCRenderTexture_begin, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("beginWithClearGBA", JSPROXY_CCRenderTexture_beginWithClear_g_b_a_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("beginWithClearGBADepth", JSPROXY_CCRenderTexture_beginWithClear_g_b_a_depth_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("beginWithClearGBADepthStencil", JSPROXY_CCRenderTexture_beginWithClear_g_b_a_depth_stencil_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("clearGBA", JSPROXY_CCRenderTexture_clear_g_b_a_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("clearDepth", JSPROXY_CCRenderTexture_clearDepth_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("clearStencil", JSPROXY_CCRenderTexture_clearStencil_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("end", JSPROXY_CCRenderTexture_end, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithWidthHeightPixelformat", JSPROXY_CCRenderTexture_initWithWidth_height_pixelFormat_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithWidthHeightPixelformatDepthstencilformat", JSPROXY_CCRenderTexture_initWithWidth_height_pixelFormat_depthStencilFormat_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("saveToFile", JSPROXY_CCRenderTexture_saveToFile_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("saveToFileFormat", JSPROXY_CCRenderTexture_saveToFile_format_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setSprite", JSPROXY_CCRenderTexture_setSprite_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("sprite", JSPROXY_CCRenderTexture_sprite, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("renderTextureWithWidthHeight", JSPROXY_CCRenderTexture_renderTextureWithWidth_height__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FN("renderTextureWithWidthHeightPixelformat", JSPROXY_CCRenderTexture_renderTextureWithWidth_height_pixelFormat__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FN("renderTextureWithWidthHeightPixelformatDepthstencilformat", JSPROXY_CCRenderTexture_renderTextureWithWidth_height_pixelFormat_depthStencilFormat__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FS_END
	};

	JSPROXY_CCRenderTexture_object = JS_InitClass(cx, globalObj, JSPROXY_CCNode_object, JSPROXY_CCRenderTexture_class, JSPROXY_CCRenderTexture_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCRenderTexture

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCRenderTexture_class, JSPROXY_CCRenderTexture_object, NULL);
	JSPROXY_CCRenderTexture *proxy = [[JSPROXY_CCRenderTexture alloc] initWithJSObject:jsobj];
	[proxy setRealObj:realObj];
	JS_SetPrivate(jsobj, proxy);

	if( realObj )
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCScheduler
 */
#pragma mark - CCScheduler

JSClass* JSPROXY_CCScheduler_class = NULL;
JSObject* JSPROXY_CCScheduler_object = NULL;
 // Constructor
JSBool JSPROXY_CCScheduler_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCScheduler createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCScheduler_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCScheduler *proxy = (JSPROXY_CCScheduler*)JS_GetPrivate(obj);
	if (proxy) {
		objc_setAssociatedObject([proxy realObj], &JSPROXY_association_proxy_key, nil, OBJC_ASSOCIATION_ASSIGN);
		/* no callbacks */
		[proxy release];
	}
}

// Arguments: ccTime
// Ret value: None
JSBool JSPROXY_CCScheduler_setTimeScale_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCScheduler *real = (CCScheduler*) [proxy realObj];
	[real setTimeScale:(ccTime)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: ccTime
JSBool JSPROXY_CCScheduler_timeScale(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	ccTime ret_val;

	CCScheduler *real = (CCScheduler*) [proxy realObj];
	ret_val = [real timeScale ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCScheduler_unscheduleAllSelectors(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCScheduler *real = (CCScheduler*) [proxy realObj];
	[real unscheduleAllSelectors ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSInteger
// Ret value: None
JSBool JSPROXY_CCScheduler_unscheduleAllSelectorsWithMinPriority_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	int32_t arg0; JS_ValueToECMAInt32( cx, *argvp++, &arg0 );

	CCScheduler *real = (CCScheduler*) [proxy realObj];
	[real unscheduleAllSelectorsWithMinPriority:(NSInteger)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: ccTime
// Ret value: None
JSBool JSPROXY_CCScheduler_update_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCScheduler *real = (CCScheduler*) [proxy realObj];
	[real update:(ccTime)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

void JSPROXY_CCScheduler_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCScheduler_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCScheduler_class->name = name;
	JSPROXY_CCScheduler_class->addProperty = JS_PropertyStub;
	JSPROXY_CCScheduler_class->delProperty = JS_PropertyStub;
	JSPROXY_CCScheduler_class->getProperty = JS_PropertyStub;
	JSPROXY_CCScheduler_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCScheduler_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCScheduler_class->resolve = JS_ResolveStub;
	JSPROXY_CCScheduler_class->convert = JS_ConvertStub;
	JSPROXY_CCScheduler_class->finalize = JSPROXY_CCScheduler_finalize;
	JSPROXY_CCScheduler_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("setTimeScale", JSPROXY_CCScheduler_setTimeScale_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("timeScale", JSPROXY_CCScheduler_timeScale, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("unscheduleAllSelectors", JSPROXY_CCScheduler_unscheduleAllSelectors, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("unscheduleAllSelectorsWithMinPriority", JSPROXY_CCScheduler_unscheduleAllSelectorsWithMinPriority_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("update", JSPROXY_CCScheduler_update_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FS_END
	};

	JSPROXY_CCScheduler_object = JS_InitClass(cx, globalObj, JSPROXY_NSObject_object, JSPROXY_CCScheduler_class, JSPROXY_CCScheduler_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCScheduler

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCScheduler_class, JSPROXY_CCScheduler_object, NULL);
	JSPROXY_CCScheduler *proxy = [[JSPROXY_CCScheduler alloc] initWithJSObject:jsobj];
	[proxy setRealObj:realObj];
	JS_SetPrivate(jsobj, proxy);

	if( realObj )
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCRotateTo
 */
#pragma mark - CCRotateTo

JSClass* JSPROXY_CCRotateTo_class = NULL;
JSObject* JSPROXY_CCRotateTo_object = NULL;
 // Constructor
JSBool JSPROXY_CCRotateTo_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCRotateTo createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCRotateTo_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCRotateTo *proxy = (JSPROXY_CCRotateTo*)JS_GetPrivate(obj);
	if (proxy) {
		objc_setAssociatedObject([proxy realObj], &JSPROXY_association_proxy_key, nil, OBJC_ASSOCIATION_ASSIGN);
		/* no callbacks */
		[proxy release];
	}
}

// Arguments: ccTime, float
// Ret value: CCRotateTo
JSBool JSPROXY_CCRotateTo_actionWithDuration_angle__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );
	double arg1; JS_ValueToNumber( cx, *argvp++, &arg1 );

	CCRotateTo *ret_val = [CCRotateTo actionWithDuration:(ccTime)arg0 angle:(float)arg1  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: ccTime, float
// Ret value: None
JSBool JSPROXY_CCRotateTo_initWithDuration_angle_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );
	double arg1; JS_ValueToNumber( cx, *argvp++, &arg1 );

	CCRotateTo *real = [[CCRotateTo alloc] initWithDuration:(ccTime)arg0 angle:(float)arg1  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

void JSPROXY_CCRotateTo_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCRotateTo_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCRotateTo_class->name = name;
	JSPROXY_CCRotateTo_class->addProperty = JS_PropertyStub;
	JSPROXY_CCRotateTo_class->delProperty = JS_PropertyStub;
	JSPROXY_CCRotateTo_class->getProperty = JS_PropertyStub;
	JSPROXY_CCRotateTo_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCRotateTo_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCRotateTo_class->resolve = JS_ResolveStub;
	JSPROXY_CCRotateTo_class->convert = JS_ConvertStub;
	JSPROXY_CCRotateTo_class->finalize = JSPROXY_CCRotateTo_finalize;
	JSPROXY_CCRotateTo_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("initWithDurationAngle", JSPROXY_CCRotateTo_initWithDuration_angle_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("actionWithDurationAngle", JSPROXY_CCRotateTo_actionWithDuration_angle__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FS_END
	};

	JSPROXY_CCRotateTo_object = JS_InitClass(cx, globalObj, JSPROXY_CCActionInterval_object, JSPROXY_CCRotateTo_class, JSPROXY_CCRotateTo_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCRotateTo

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCRotateTo_class, JSPROXY_CCRotateTo_object, NULL);
	JSPROXY_CCRotateTo *proxy = [[JSPROXY_CCRotateTo alloc] initWithJSObject:jsobj];
	[proxy setRealObj:realObj];
	JS_SetPrivate(jsobj, proxy);

	if( realObj )
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCMotionStreak
 */
#pragma mark - CCMotionStreak

JSClass* JSPROXY_CCMotionStreak_class = NULL;
JSObject* JSPROXY_CCMotionStreak_object = NULL;
 // Constructor
JSBool JSPROXY_CCMotionStreak_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCMotionStreak createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCMotionStreak_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCMotionStreak *proxy = (JSPROXY_CCMotionStreak*)JS_GetPrivate(obj);
	if (proxy) {
		objc_setAssociatedObject([proxy realObj], &JSPROXY_association_proxy_key, nil, OBJC_ASSOCIATION_ASSIGN);
		/* no callbacks */
		[proxy release];
	}
}

// Arguments: float, float, float, ccColor3B, CCTexture2D*
// Ret value: None
JSBool JSPROXY_CCMotionStreak_initWithFade_minSeg_width_color_texture_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 5, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );
	double arg1; JS_ValueToNumber( cx, *argvp++, &arg1 );
	double arg2; JS_ValueToNumber( cx, *argvp++, &arg2 );

	JSObject *tmp_arg3;
	JS_ValueToObject( cx, *argvp++, &tmp_arg3 );
	ccColor3B arg3 = *(ccColor3B*)JS_GetTypedArrayData( tmp_arg3);

	CCTexture2D* arg4 = (CCTexture2D*) jsval_to_nsobject( *argvp++, cx);

	CCMotionStreak *real = [[CCMotionStreak alloc] initWithFade:(float)arg0 minSeg:(float)arg1 width:(float)arg2 color:(ccColor3B)arg3 texture:(CCTexture2D*)arg4  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float, float, float, ccColor3B, NSString*
// Ret value: None
JSBool JSPROXY_CCMotionStreak_initWithFade_minSeg_width_color_textureFilename_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 5, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );
	double arg1; JS_ValueToNumber( cx, *argvp++, &arg1 );
	double arg2; JS_ValueToNumber( cx, *argvp++, &arg2 );

	JSObject *tmp_arg3;
	JS_ValueToObject( cx, *argvp++, &tmp_arg3 );
	ccColor3B arg3 = *(ccColor3B*)JS_GetTypedArrayData( tmp_arg3);

	NSString *arg4 = jsval_to_nsstring( *argvp++, cx );

	CCMotionStreak *real = [[CCMotionStreak alloc] initWithFade:(float)arg0 minSeg:(float)arg1 width:(float)arg2 color:(ccColor3B)arg3 textureFilename:(NSString*)arg4  ];
	[proxy setRealObj: real];
	[real release];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCMotionStreak_isFastMode(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CCMotionStreak *real = (CCMotionStreak*) [proxy realObj];
	ret_val = [real isFastMode ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCMotionStreak_reset(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCMotionStreak *real = (CCMotionStreak*) [proxy realObj];
	[real reset ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: ccBlendFunc
// Ret value: None
JSBool JSPROXY_CCMotionStreak_setBlendFunc_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	ccBlendFunc arg0 = *(ccBlendFunc*)JS_GetTypedArrayData( tmp_arg0);

	CCMotionStreak *real = (CCMotionStreak*) [proxy realObj];
	[real setBlendFunc:(ccBlendFunc)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCMotionStreak_setFastMode_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	CCMotionStreak *real = (CCMotionStreak*) [proxy realObj];
	[real setFastMode:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCTexture2D*
// Ret value: None
JSBool JSPROXY_CCMotionStreak_setTexture_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCTexture2D* arg0 = (CCTexture2D*) jsval_to_nsobject( *argvp++, cx);

	CCMotionStreak *real = (CCMotionStreak*) [proxy realObj];
	[real setTexture:(CCTexture2D*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float, float, float, ccColor3B, CCTexture2D*
// Ret value: CCMotionStreak
JSBool JSPROXY_CCMotionStreak_streakWithFade_minSeg_width_color_texture__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 5, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );
	double arg1; JS_ValueToNumber( cx, *argvp++, &arg1 );
	double arg2; JS_ValueToNumber( cx, *argvp++, &arg2 );

	JSObject *tmp_arg3;
	JS_ValueToObject( cx, *argvp++, &tmp_arg3 );
	ccColor3B arg3 = *(ccColor3B*)JS_GetTypedArrayData( tmp_arg3);

	CCTexture2D* arg4 = (CCTexture2D*) jsval_to_nsobject( *argvp++, cx);

	CCMotionStreak *ret_val = [CCMotionStreak streakWithFade:(float)arg0 minSeg:(float)arg1 width:(float)arg2 color:(ccColor3B)arg3 texture:(CCTexture2D*)arg4  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: float, float, float, ccColor3B, NSString*
// Ret value: CCMotionStreak
JSBool JSPROXY_CCMotionStreak_streakWithFade_minSeg_width_color_textureFilename__static(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 5, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );
	double arg1; JS_ValueToNumber( cx, *argvp++, &arg1 );
	double arg2; JS_ValueToNumber( cx, *argvp++, &arg2 );

	JSObject *tmp_arg3;
	JS_ValueToObject( cx, *argvp++, &tmp_arg3 );
	ccColor3B arg3 = *(ccColor3B*)JS_GetTypedArrayData( tmp_arg3);

	NSString *arg4 = jsval_to_nsstring( *argvp++, cx );

	CCMotionStreak *ret_val = [CCMotionStreak streakWithFade:(float)arg0 minSeg:(float)arg1 width:(float)arg2 color:(ccColor3B)arg3 textureFilename:(NSString*)arg4  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: CCTexture2D*
JSBool JSPROXY_CCMotionStreak_texture(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CCTexture2D* ret_val;

	CCMotionStreak *real = (CCMotionStreak*) [proxy realObj];
	ret_val = [real texture ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( ret_val, cx );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: ccColor3B
// Ret value: None
JSBool JSPROXY_CCMotionStreak_tintWithColor_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	ccColor3B arg0 = *(ccColor3B*)JS_GetTypedArrayData( tmp_arg0);

	CCMotionStreak *real = (CCMotionStreak*) [proxy realObj];
	[real tintWithColor:(ccColor3B)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL
JSBool JSPROXY_CCMotionStreak_doesOpacityModifyRGB(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CCMotionStreak *real = (CCMotionStreak*) [proxy realObj];
	ret_val = [real doesOpacityModifyRGB ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: GLubyte
JSBool JSPROXY_CCMotionStreak_opacity(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	GLubyte ret_val;

	CCMotionStreak *real = (CCMotionStreak*) [proxy realObj];
	ret_val = [real opacity ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: ccColor3B
// Ret value: None
JSBool JSPROXY_CCMotionStreak_setColor_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	ccColor3B arg0 = *(ccColor3B*)JS_GetTypedArrayData( tmp_arg0);

	CCMotionStreak *real = (CCMotionStreak*) [proxy realObj];
	[real setColor:(ccColor3B)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: GLubyte
// Ret value: None
JSBool JSPROXY_CCMotionStreak_setOpacity_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	uint16_t arg0; JS_ValueToUint16( cx, *argvp++, &arg0 );

	CCMotionStreak *real = (CCMotionStreak*) [proxy realObj];
	[real setOpacity:(GLubyte)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCMotionStreak_setOpacityModifyRGB_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	CCMotionStreak *real = (CCMotionStreak*) [proxy realObj];
	[real setOpacityModifyRGB:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

void JSPROXY_CCMotionStreak_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCMotionStreak_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCMotionStreak_class->name = name;
	JSPROXY_CCMotionStreak_class->addProperty = JS_PropertyStub;
	JSPROXY_CCMotionStreak_class->delProperty = JS_PropertyStub;
	JSPROXY_CCMotionStreak_class->getProperty = JS_PropertyStub;
	JSPROXY_CCMotionStreak_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCMotionStreak_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCMotionStreak_class->resolve = JS_ResolveStub;
	JSPROXY_CCMotionStreak_class->convert = JS_ConvertStub;
	JSPROXY_CCMotionStreak_class->finalize = JSPROXY_CCMotionStreak_finalize;
	JSPROXY_CCMotionStreak_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("initWithFadeMinsegWidthColorTexture", JSPROXY_CCMotionStreak_initWithFade_minSeg_width_color_texture_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithFadeMinsegWidthColorTexturefilename", JSPROXY_CCMotionStreak_initWithFade_minSeg_width_color_textureFilename_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("isFastMode", JSPROXY_CCMotionStreak_isFastMode, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("reset", JSPROXY_CCMotionStreak_reset, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setBlendFunc", JSPROXY_CCMotionStreak_setBlendFunc_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setFastMode", JSPROXY_CCMotionStreak_setFastMode_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setTexture", JSPROXY_CCMotionStreak_setTexture_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("texture", JSPROXY_CCMotionStreak_texture, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("tintWithColor", JSPROXY_CCMotionStreak_tintWithColor_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("doesOpacityModifyRGB", JSPROXY_CCMotionStreak_doesOpacityModifyRGB, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("opacity", JSPROXY_CCMotionStreak_opacity, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setColor", JSPROXY_CCMotionStreak_setColor_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setOpacity", JSPROXY_CCMotionStreak_setOpacity_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setOpacityModifyRGB", JSPROXY_CCMotionStreak_setOpacityModifyRGB_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("streakWithFadeMinsegWidthColorTexture", JSPROXY_CCMotionStreak_streakWithFade_minSeg_width_color_texture__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FN("streakWithFadeMinsegWidthColorTexturefilename", JSPROXY_CCMotionStreak_streakWithFade_minSeg_width_color_textureFilename__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FS_END
	};

	JSPROXY_CCMotionStreak_object = JS_InitClass(cx, globalObj, JSPROXY_CCNode_object, JSPROXY_CCMotionStreak_class, JSPROXY_CCMotionStreak_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCMotionStreak

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCMotionStreak_class, JSPROXY_CCMotionStreak_object, NULL);
	JSPROXY_CCMotionStreak *proxy = [[JSPROXY_CCMotionStreak alloc] initWithJSObject:jsobj];
	[proxy setRealObj:realObj];
	JS_SetPrivate(jsobj, proxy);

	if( realObj )
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCActionManager
 */
#pragma mark - CCActionManager

JSClass* JSPROXY_CCActionManager_class = NULL;
JSObject* JSPROXY_CCActionManager_object = NULL;
 // Constructor
JSBool JSPROXY_CCActionManager_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CCActionManager createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */

    return JS_TRUE;
}

// Destructor
void JSPROXY_CCActionManager_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCActionManager *proxy = (JSPROXY_CCActionManager*)JS_GetPrivate(obj);
	if (proxy) {
		objc_setAssociatedObject([proxy realObj], &JSPROXY_association_proxy_key, nil, OBJC_ASSOCIATION_ASSIGN);
		/* no callbacks */
		[proxy release];
	}
}

// Arguments: CCAction*
// Ret value: None
JSBool JSPROXY_CCActionManager_removeAction_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	CCAction* arg0 = (CCAction*) jsval_to_nsobject( *argvp++, cx);

	CCActionManager *real = (CCActionManager*) [proxy realObj];
	[real removeAction:(CCAction*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCActionManager_removeAllActions(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCActionManager *real = (CCActionManager*) [proxy realObj];
	[real removeAllActions ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

void JSPROXY_CCActionManager_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CCActionManager_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCActionManager_class->name = name;
	JSPROXY_CCActionManager_class->addProperty = JS_PropertyStub;
	JSPROXY_CCActionManager_class->delProperty = JS_PropertyStub;
	JSPROXY_CCActionManager_class->getProperty = JS_PropertyStub;
	JSPROXY_CCActionManager_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCActionManager_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCActionManager_class->resolve = JS_ResolveStub;
	JSPROXY_CCActionManager_class->convert = JS_ConvertStub;
	JSPROXY_CCActionManager_class->finalize = JSPROXY_CCActionManager_finalize;
	JSPROXY_CCActionManager_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("removeAction", JSPROXY_CCActionManager_removeAction_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("removeAllActions", JSPROXY_CCActionManager_removeAllActions, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FS_END
	};

	JSPROXY_CCActionManager_object = JS_InitClass(cx, globalObj, JSPROXY_NSObject_object, JSPROXY_CCActionManager_class, JSPROXY_CCActionManager_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CCActionManager

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCActionManager_class, JSPROXY_CCActionManager_object, NULL);
	JSPROXY_CCActionManager *proxy = [[JSPROXY_CCActionManager alloc] initWithJSObject:jsobj];
	[proxy setRealObj:realObj];
	JS_SetPrivate(jsobj, proxy);

	if( realObj )
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_ASSIGN);

	[self swizzleMethods];

	return jsobj;
}

@end
