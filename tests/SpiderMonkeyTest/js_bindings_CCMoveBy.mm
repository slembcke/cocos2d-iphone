/*
* AUTOGENERATED FILE. DO NOT EDIT IT
* Generated by ../../tools/js/generate_spidermonkey_bindings.py on 2012-05-30
*/

// needed for callbacks from objective-c to JS
#import <objc/runtime.h>
#import "JRSwizzle.h"

#import "jstypedarray.h"
#import "ScriptingCore.h"   

#import "js_bindings_CCMoveBy.h"
#import "js_bindings_cocos2d.h"


JSClass* JSPROXY_CCMoveBy_class = NULL;
JSObject* JSPROXY_CCMoveBy_object = NULL;
 // Constructor
JSBool JSPROXY_CCMoveBy_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCMoveBy_class, JSPROXY_CCMoveBy_object, NULL);

    JSPROXY_CCMoveBy *proxy = [[JSPROXY_CCMoveBy alloc] initWithJSObject:jsobj];

    JS_SetPrivate(jsobj, proxy);
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */
    
    return JS_TRUE;
}

// Destructor
void JSPROXY_CCMoveBy_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCMoveBy *pt = (JSPROXY_CCMoveBy*)JS_GetPrivate(obj);
	if (pt) {
		// id real = [pt realObj];
	
		/* no callbacks */

		[pt release];

		JS_free(cx, pt);
	}
}

// Arguments: ccTime, CGPoint
// Ret value: CCMoveBy
JSBool JSPROXY_CCMoveBy_actionWithDuration_position_(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	JSObject *tmp_arg1;
	JS_ValueToObject( cx, *argvp++, &tmp_arg1 );
	NSCAssert( JS_GetTypedArrayByteLength( tmp_arg1 ) == 8, @"Invalid length");
#ifdef __CC_PLATFORM_IOS
	CGPoint arg1 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg1 );
#elif defined(__CC_PLATFORM_MAC)
	float* arg1_array = (float*)JS_GetTypedArrayData( tmp_arg1 );
	CGPoint arg1 = ccp(arg1_array[0], arg1_array[1] );
#else
#error Unsupported Platform
#endif  

	CCMoveBy *real = [CCMoveBy actionWithDuration:(ccTime)arg0 position:(CGPoint)arg1  ];

	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCMoveBy_class, JSPROXY_CCMoveBy_object, NULL);
	JSPROXY_CCMoveBy *ret_proxy = [[JSPROXY_CCMoveBy alloc] initWithJSObject:jsobj];
	[ret_proxy setRealObj: real];
	JS_SetPrivate(jsobj, ret_proxy);
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: ccTime, CGPoint
// Ret value: None
JSBool JSPROXY_CCMoveBy_initWithDuration_position_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	JSObject *tmp_arg1;
	JS_ValueToObject( cx, *argvp++, &tmp_arg1 );
	NSCAssert( JS_GetTypedArrayByteLength( tmp_arg1 ) == 8, @"Invalid length");
#ifdef __CC_PLATFORM_IOS
	CGPoint arg1 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg1 );
#elif defined(__CC_PLATFORM_MAC)
	float* arg1_array = (float*)JS_GetTypedArrayData( tmp_arg1 );
	CGPoint arg1 = ccp(arg1_array[0], arg1_array[1] );
#else
#error Unsupported Platform
#endif  

	CCMoveBy *real = [[CCMoveBy alloc] initWithDuration:(ccTime)arg0 position:(CGPoint)arg1  ];
	[proxy setRealObj: real];
	[real release];

	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

@implementation JSPROXY_CCMoveBy

+(void) createClassWithContext:(JSContext*)cx object:(JSObject*)globalObj name:(NSString*)name
{
	JSPROXY_CCMoveBy_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCMoveBy_class->name = [name UTF8String];
	JSPROXY_CCMoveBy_class->addProperty = JS_PropertyStub;
	JSPROXY_CCMoveBy_class->delProperty = JS_PropertyStub;
	JSPROXY_CCMoveBy_class->getProperty = JS_PropertyStub;
	JSPROXY_CCMoveBy_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCMoveBy_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCMoveBy_class->resolve = JS_ResolveStub;
	JSPROXY_CCMoveBy_class->convert = JS_ConvertStub;
	JSPROXY_CCMoveBy_class->finalize = JSPROXY_CCMoveBy_finalize;
	JSPROXY_CCMoveBy_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("initWithDurationPosition", JSPROXY_CCMoveBy_initWithDuration_position_, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("actionWithDurationPosition", JSPROXY_CCMoveBy_actionWithDuration_position_, 1, JSPROP_PERMANENT | JSPROP_SHARED),
		JS_FS_END
	};

	JSPROXY_CCMoveBy_object = JS_InitClass(cx, globalObj, JSPROXY_CCMoveTo_object, JSPROXY_CCMoveBy_class, JSPROXY_CCMoveBy_constructor,0,properties,funcs,NULL,st_funcs);
}

@end
