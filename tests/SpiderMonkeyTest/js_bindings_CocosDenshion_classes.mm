/*
* AUTOGENERATED FILE. DO NOT EDIT IT
* Generated by "generate_spidermonkey_bindings.py -c CocosDenshion_spidermonkey.ini" on 2012-07-02
*/

// needed for callbacks from objective-c to JS
#import <objc/runtime.h>
#import "JRSwizzle.h"

#import "jstypedarray.h"
#import "js_bindings_config.h"
#import "ScriptingCore.h"

#import "js_bindings_CocosDenshion_classes.h"


/*
 * CDBufferManager
 */
#pragma mark - CDBufferManager

JSClass* JSPROXY_CDBufferManager_class = NULL;
JSObject* JSPROXY_CDBufferManager_object = NULL;
 // Constructor
JSBool JSPROXY_CDBufferManager_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CDBufferManager createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    return JS_TRUE;
}

// Destructor
void JSPROXY_CDBufferManager_finalize(JSContext *cx, JSObject *obj)
{
	CCLOGINFO(@"spidermonkey: finalizing JS object %p (CDBufferManager)", obj);
}

// Arguments: NSString*, BOOL
// Ret value: int (i)
JSBool JSPROXY_CDBufferManager_bufferForFile_create_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; JSBool arg1; 

	ok &= jsval_to_nsstring( cx, *argvp++, &arg0 );
	ok &= JS_ValueToBoolean( cx, *argvp++, &arg1 );
	if( ! ok ) return JS_FALSE;
	int ret_val;

	CDBufferManager *real = (CDBufferManager*) [proxy realObj];
	ret_val = [real bufferForFile:(NSString*)arg0 create:(BOOL)arg1  ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: CDSoundEngine*
// Ret value: None (None)
JSBool JSPROXY_CDBufferManager_initWithEngine_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && ![proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	id arg0; 

	ok &= jsval_to_nsobject( cx, *argvp++, &arg0);
	if( ! ok ) return JS_FALSE;

	CDBufferManager *real = [(CDBufferManager*)[proxy.klass alloc] initWithEngine:(CDSoundEngine*)arg0  ];
	[proxy setRealObj: real];
	[real autorelease];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
	[proxy release];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: void (None)
JSBool JSPROXY_CDBufferManager_releaseBufferForFile_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; 

	ok &= jsval_to_nsstring( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	CDBufferManager *real = (CDBufferManager*) [proxy realObj];
	[real releaseBufferForFile:(NSString*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

void JSPROXY_CDBufferManager_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CDBufferManager_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CDBufferManager_class->name = name;
	JSPROXY_CDBufferManager_class->addProperty = JS_PropertyStub;
	JSPROXY_CDBufferManager_class->delProperty = JS_PropertyStub;
	JSPROXY_CDBufferManager_class->getProperty = JS_PropertyStub;
	JSPROXY_CDBufferManager_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CDBufferManager_class->enumerate = JS_EnumerateStub;
	JSPROXY_CDBufferManager_class->resolve = JS_ResolveStub;
	JSPROXY_CDBufferManager_class->convert = JS_ConvertStub;
	JSPROXY_CDBufferManager_class->finalize = JSPROXY_CDBufferManager_finalize;
//	JSPROXY_CDBufferManager_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("bufferForFileCreate", JSPROXY_CDBufferManager_bufferForFile_create_, 2, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("initWithEngine", JSPROXY_CDBufferManager_initWithEngine_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("releaseBufferForFile", JSPROXY_CDBufferManager_releaseBufferForFile_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FS_END
	};

	JSPROXY_CDBufferManager_object = JS_InitClass(cx, globalObj, JSPROXY_NSObject_object, JSPROXY_CDBufferManager_class, JSPROXY_CDBufferManager_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CDBufferManager

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CDBufferManager_class, JSPROXY_CDBufferManager_object, NULL);
	JSPROXY_CDBufferManager *proxy = [[JSPROXY_CDBufferManager alloc] initWithJSObject:jsobj class:[CDBufferManager class]];
	[proxy setRealObj:realObj];

	if( realObj ) {
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
		[proxy release];
	}

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CDBufferLoadRequest
 */
#pragma mark - CDBufferLoadRequest

JSClass* JSPROXY_CDBufferLoadRequest_class = NULL;
JSObject* JSPROXY_CDBufferLoadRequest_object = NULL;
 // Constructor
JSBool JSPROXY_CDBufferLoadRequest_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CDBufferLoadRequest createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    return JS_TRUE;
}

// Destructor
void JSPROXY_CDBufferLoadRequest_finalize(JSContext *cx, JSObject *obj)
{
	CCLOGINFO(@"spidermonkey: finalizing JS object %p (CDBufferLoadRequest)", obj);
}

// Arguments: 
// Ret value: NSString* (S)
JSBool JSPROXY_CDBufferLoadRequest_filePath(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	NSString* ret_val;

	CDBufferLoadRequest *real = (CDBufferLoadRequest*) [proxy realObj];
	ret_val = [real filePath ];

	JSString *ret_obj = JS_NewStringCopyZ(cx, [ret_val UTF8String]);
	JS_SET_RVAL(cx, vp, STRING_TO_JSVAL(ret_obj) );

	return JS_TRUE;
}

// Arguments: int, NSString*
// Ret value: None (None)
JSBool JSPROXY_CDBufferLoadRequest_init_filePath_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && ![proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	int32_t arg0; NSString* arg1; 

	ok &= JS_ValueToECMAInt32( cx, *argvp++, &arg0 );
	ok &= jsval_to_nsstring( cx, *argvp++, &arg1 );
	if( ! ok ) return JS_FALSE;

	CDBufferLoadRequest *real = [(CDBufferLoadRequest*)[proxy.klass alloc] init:(int)arg0 filePath:(NSString*)arg1  ];
	[proxy setRealObj: real];
	[real autorelease];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
	[proxy release];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: int (i)
JSBool JSPROXY_CDBufferLoadRequest_soundId(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	int ret_val;

	CDBufferLoadRequest *real = (CDBufferLoadRequest*) [proxy realObj];
	ret_val = [real soundId ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

void JSPROXY_CDBufferLoadRequest_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CDBufferLoadRequest_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CDBufferLoadRequest_class->name = name;
	JSPROXY_CDBufferLoadRequest_class->addProperty = JS_PropertyStub;
	JSPROXY_CDBufferLoadRequest_class->delProperty = JS_PropertyStub;
	JSPROXY_CDBufferLoadRequest_class->getProperty = JS_PropertyStub;
	JSPROXY_CDBufferLoadRequest_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CDBufferLoadRequest_class->enumerate = JS_EnumerateStub;
	JSPROXY_CDBufferLoadRequest_class->resolve = JS_ResolveStub;
	JSPROXY_CDBufferLoadRequest_class->convert = JS_ConvertStub;
	JSPROXY_CDBufferLoadRequest_class->finalize = JSPROXY_CDBufferLoadRequest_finalize;
//	JSPROXY_CDBufferLoadRequest_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("filePath", JSPROXY_CDBufferLoadRequest_filePath, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("initFilePath", JSPROXY_CDBufferLoadRequest_init_filePath_, 2, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("soundId", JSPROXY_CDBufferLoadRequest_soundId, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FS_END
	};

	JSPROXY_CDBufferLoadRequest_object = JS_InitClass(cx, globalObj, JSPROXY_NSObject_object, JSPROXY_CDBufferLoadRequest_class, JSPROXY_CDBufferLoadRequest_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CDBufferLoadRequest

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CDBufferLoadRequest_class, JSPROXY_CDBufferLoadRequest_object, NULL);
	JSPROXY_CDBufferLoadRequest *proxy = [[JSPROXY_CDBufferLoadRequest alloc] initWithJSObject:jsobj class:[CDBufferLoadRequest class]];
	[proxy setRealObj:realObj];

	if( realObj ) {
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
		[proxy release];
	}

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CDSoundEngine
 */
#pragma mark - CDSoundEngine

JSClass* JSPROXY_CDSoundEngine_class = NULL;
JSObject* JSPROXY_CDSoundEngine_object = NULL;
 // Constructor
JSBool JSPROXY_CDSoundEngine_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CDSoundEngine createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    return JS_TRUE;
}

// Destructor
void JSPROXY_CDSoundEngine_finalize(JSContext *cx, JSObject *obj)
{
	CCLOGINFO(@"spidermonkey: finalizing JS object %p (CDSoundEngine)", obj);
}

// Arguments: CDSoundSource*
// Ret value: void (None)
JSBool JSPROXY_CDSoundEngine__soundSourcePreRelease_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	id arg0; 

	ok &= jsval_to_nsobject( cx, *argvp++, &arg0);
	if( ! ok ) return JS_FALSE;

	CDSoundEngine *real = (CDSoundEngine*) [proxy realObj];
	[real _soundSourcePreRelease:(CDSoundSource*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: float (d)
JSBool JSPROXY_CDSoundEngine_asynchLoadProgress(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CDSoundEngine *real = (CDSoundEngine*) [proxy realObj];
	ret_val = [real asynchLoadProgress ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: int
// Ret value: float (d)
JSBool JSPROXY_CDSoundEngine_bufferDurationInSeconds_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	int32_t arg0; 

	ok &= JS_ValueToECMAInt32( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;
	float ret_val;

	CDSoundEngine *real = (CDSoundEngine*) [proxy realObj];
	ret_val = [real bufferDurationInSeconds:(int)arg0  ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: int
// Ret value: ALsizei (i)
JSBool JSPROXY_CDSoundEngine_bufferFrequencyInHertz_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	int32_t arg0; 

	ok &= JS_ValueToECMAInt32( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;
	ALsizei ret_val;

	CDSoundEngine *real = (CDSoundEngine*) [proxy realObj];
	ret_val = [real bufferFrequencyInHertz:(int)arg0  ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: int
// Ret value: ALsizei (i)
JSBool JSPROXY_CDSoundEngine_bufferSizeInBytes_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	int32_t arg0; 

	ok &= JS_ValueToECMAInt32( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;
	ALsizei ret_val;

	CDSoundEngine *real = (CDSoundEngine*) [proxy realObj];
	ret_val = [real bufferSizeInBytes:(int)arg0  ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: NSArray*
// Ret value: void (None)
JSBool JSPROXY_CDSoundEngine_defineSourceGroups_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSArray* arg0; 

	ok &= jsval_to_nsarray( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	CDSoundEngine *real = (CDSoundEngine*) [proxy realObj];
	[real defineSourceGroups:(NSArray*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSPROXY_CDSoundEngine_functioning(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CDSoundEngine *real = (CDSoundEngine*) [proxy realObj];
	ret_val = [real functioning ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSPROXY_CDSoundEngine_getGainWorks(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CDSoundEngine *real = (CDSoundEngine*) [proxy realObj];
	ret_val = [real getGainWorks ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: None (None)
JSBool JSPROXY_CDSoundEngine_init(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && ![proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );

	CDSoundEngine *real = [(CDSoundEngine*)[proxy.klass alloc] init ];
	[proxy setRealObj: real];
	[real autorelease];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
	[proxy release];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: ALenum (i)
JSBool JSPROXY_CDSoundEngine_lastErrorCode(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	ALenum ret_val;

	CDSoundEngine *real = (CDSoundEngine*) [proxy realObj];
	ret_val = [real lastErrorCode ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: int, NSString*
// Ret value: BOOL (b)
JSBool JSPROXY_CDSoundEngine_loadBuffer_filePath_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	int32_t arg0; NSString* arg1; 

	ok &= JS_ValueToECMAInt32( cx, *argvp++, &arg0 );
	ok &= jsval_to_nsstring( cx, *argvp++, &arg1 );
	if( ! ok ) return JS_FALSE;
	BOOL ret_val;

	CDSoundEngine *real = (CDSoundEngine*) [proxy realObj];
	ret_val = [real loadBuffer:(int)arg0 filePath:(NSString*)arg1  ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: NSArray*
// Ret value: void (None)
JSBool JSPROXY_CDSoundEngine_loadBuffersAsynchronously_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSArray* arg0; 

	ok &= jsval_to_nsarray( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	CDSoundEngine *real = (CDSoundEngine*) [proxy realObj];
	[real loadBuffersAsynchronously:(NSArray*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: ALfloat (d)
JSBool JSPROXY_CDSoundEngine_masterGain(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	ALfloat ret_val;

	CDSoundEngine *real = (CDSoundEngine*) [proxy realObj];
	ret_val = [real masterGain ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: int, int, float, float, float, BOOL
// Ret value: ALuint (u)
JSBool JSPROXY_CDSoundEngine_playSound_sourceGroupId_pitch_pan_gain_loop_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 6, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	int32_t arg0; int32_t arg1; double arg2; double arg3; double arg4; JSBool arg5; 

	ok &= JS_ValueToECMAInt32( cx, *argvp++, &arg0 );
	ok &= JS_ValueToECMAInt32( cx, *argvp++, &arg1 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg2 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg3 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg4 );
	ok &= JS_ValueToBoolean( cx, *argvp++, &arg5 );
	if( ! ok ) return JS_FALSE;
	ALuint ret_val;

	CDSoundEngine *real = (CDSoundEngine*) [proxy realObj];
	ret_val = [real playSound:(int)arg0 sourceGroupId:(int)arg1 pitch:(float)arg2 pan:(float)arg3 gain:(float)arg4 loop:(BOOL)arg5  ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: float
// Ret value: void (None)
JSBool JSPROXY_CDSoundEngine_setAsynchLoadProgress_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	double arg0; 

	ok &= JS_ValueToNumber( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	CDSoundEngine *real = (CDSoundEngine*) [proxy realObj];
	[real setAsynchLoadProgress:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: ALfloat
// Ret value: void (None)
JSBool JSPROXY_CDSoundEngine_setMasterGain_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	double arg0; 

	ok &= JS_ValueToNumber( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	CDSoundEngine *real = (CDSoundEngine*) [proxy realObj];
	[real setMasterGain:(ALfloat)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: Float32
// Ret value: void (None)
JSBool JSPROXY_CDSoundEngine_setMixerSampleRate__static(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	double arg0; 

	ok &= JS_ValueToNumber( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	[CDSoundEngine setMixerSampleRate:(Float32)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: int, BOOL
// Ret value: void (None)
JSBool JSPROXY_CDSoundEngine_setSourceGroupEnabled_enabled_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	int32_t arg0; JSBool arg1; 

	ok &= JS_ValueToECMAInt32( cx, *argvp++, &arg0 );
	ok &= JS_ValueToBoolean( cx, *argvp++, &arg1 );
	if( ! ok ) return JS_FALSE;

	CDSoundEngine *real = (CDSoundEngine*) [proxy realObj];
	[real setSourceGroupEnabled:(int)arg0 enabled:(BOOL)arg1  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: int, BOOL
// Ret value: void (None)
JSBool JSPROXY_CDSoundEngine_setSourceGroupNonInterruptible_isNonInterruptible_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	int32_t arg0; JSBool arg1; 

	ok &= JS_ValueToECMAInt32( cx, *argvp++, &arg0 );
	ok &= JS_ValueToBoolean( cx, *argvp++, &arg1 );
	if( ! ok ) return JS_FALSE;

	CDSoundEngine *real = (CDSoundEngine*) [proxy realObj];
	[real setSourceGroupNonInterruptible:(int)arg0 isNonInterruptible:(BOOL)arg1  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: int, int
// Ret value: CDSoundSource* (o)
JSBool JSPROXY_CDSoundEngine_soundSourceForSound_sourceGroupId_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	int32_t arg0; int32_t arg1; 

	ok &= JS_ValueToECMAInt32( cx, *argvp++, &arg0 );
	ok &= JS_ValueToECMAInt32( cx, *argvp++, &arg1 );
	if( ! ok ) return JS_FALSE;
	CDSoundSource* ret_val;

	CDSoundEngine *real = (CDSoundEngine*) [proxy realObj];
	ret_val = [real soundSourceForSound:(int)arg0 sourceGroupId:(int)arg1  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( cx, ret_val );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: int
// Ret value: BOOL (b)
JSBool JSPROXY_CDSoundEngine_sourceGroupEnabled_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	int32_t arg0; 

	ok &= JS_ValueToECMAInt32( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;
	BOOL ret_val;

	CDSoundEngine *real = (CDSoundEngine*) [proxy realObj];
	ret_val = [real sourceGroupEnabled:(int)arg0  ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSUInteger (u)
JSBool JSPROXY_CDSoundEngine_sourceGroupTotal(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	NSUInteger ret_val;

	CDSoundEngine *real = (CDSoundEngine*) [proxy realObj];
	ret_val = [real sourceGroupTotal ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: int (i)
JSBool JSPROXY_CDSoundEngine_sourceTotal(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	int ret_val;

	CDSoundEngine *real = (CDSoundEngine*) [proxy realObj];
	ret_val = [real sourceTotal ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: void (None)
JSBool JSPROXY_CDSoundEngine_stopAllSounds(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );

	CDSoundEngine *real = (CDSoundEngine*) [proxy realObj];
	[real stopAllSounds ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: ALuint
// Ret value: void (None)
JSBool JSPROXY_CDSoundEngine_stopSound_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	uint32_t arg0; 

	ok &= JS_ValueToECMAUint32( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	CDSoundEngine *real = (CDSoundEngine*) [proxy realObj];
	[real stopSound:(ALuint)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: int
// Ret value: void (None)
JSBool JSPROXY_CDSoundEngine_stopSourceGroup_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	int32_t arg0; 

	ok &= JS_ValueToECMAInt32( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	CDSoundEngine *real = (CDSoundEngine*) [proxy realObj];
	[real stopSourceGroup:(int)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: int
// Ret value: BOOL (b)
JSBool JSPROXY_CDSoundEngine_unloadBuffer_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	int32_t arg0; 

	ok &= JS_ValueToECMAInt32( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;
	BOOL ret_val;

	CDSoundEngine *real = (CDSoundEngine*) [proxy realObj];
	ret_val = [real unloadBuffer:(int)arg0  ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSPROXY_CDSoundEngine_enabled(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CDSoundEngine *real = (CDSoundEngine*) [proxy realObj];
	ret_val = [real enabled ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSPROXY_CDSoundEngine_mute(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CDSoundEngine *real = (CDSoundEngine*) [proxy realObj];
	ret_val = [real mute ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: void (None)
JSBool JSPROXY_CDSoundEngine_setEnabled_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	JSBool arg0; 

	ok &= JS_ValueToBoolean( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	CDSoundEngine *real = (CDSoundEngine*) [proxy realObj];
	[real setEnabled:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: void (None)
JSBool JSPROXY_CDSoundEngine_setMute_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	JSBool arg0; 

	ok &= JS_ValueToBoolean( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	CDSoundEngine *real = (CDSoundEngine*) [proxy realObj];
	[real setMute:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

void JSPROXY_CDSoundEngine_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CDSoundEngine_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CDSoundEngine_class->name = name;
	JSPROXY_CDSoundEngine_class->addProperty = JS_PropertyStub;
	JSPROXY_CDSoundEngine_class->delProperty = JS_PropertyStub;
	JSPROXY_CDSoundEngine_class->getProperty = JS_PropertyStub;
	JSPROXY_CDSoundEngine_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CDSoundEngine_class->enumerate = JS_EnumerateStub;
	JSPROXY_CDSoundEngine_class->resolve = JS_ResolveStub;
	JSPROXY_CDSoundEngine_class->convert = JS_ConvertStub;
	JSPROXY_CDSoundEngine_class->finalize = JSPROXY_CDSoundEngine_finalize;
//	JSPROXY_CDSoundEngine_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("_soundSourcePreRelease", JSPROXY_CDSoundEngine__soundSourcePreRelease_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("asynchLoadProgress", JSPROXY_CDSoundEngine_asynchLoadProgress, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("bufferDurationInSeconds", JSPROXY_CDSoundEngine_bufferDurationInSeconds_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("bufferFrequencyInHertz", JSPROXY_CDSoundEngine_bufferFrequencyInHertz_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("bufferSizeInBytes", JSPROXY_CDSoundEngine_bufferSizeInBytes_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("defineSourceGroups", JSPROXY_CDSoundEngine_defineSourceGroups_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("functioning", JSPROXY_CDSoundEngine_functioning, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getGainWorks", JSPROXY_CDSoundEngine_getGainWorks, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("init", JSPROXY_CDSoundEngine_init, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("lastErrorCode", JSPROXY_CDSoundEngine_lastErrorCode, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("loadBufferFilePath", JSPROXY_CDSoundEngine_loadBuffer_filePath_, 2, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("loadBuffersAsynchronously", JSPROXY_CDSoundEngine_loadBuffersAsynchronously_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("masterGain", JSPROXY_CDSoundEngine_masterGain, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("playSoundSourceGroupIdPitchPanGainLoop", JSPROXY_CDSoundEngine_playSound_sourceGroupId_pitch_pan_gain_loop_, 6, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setAsynchLoadProgress", JSPROXY_CDSoundEngine_setAsynchLoadProgress_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setMasterGain", JSPROXY_CDSoundEngine_setMasterGain_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setSourceGroupEnabledEnabled", JSPROXY_CDSoundEngine_setSourceGroupEnabled_enabled_, 2, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setSourceGroupNonInterruptibleIsNonInterruptible", JSPROXY_CDSoundEngine_setSourceGroupNonInterruptible_isNonInterruptible_, 2, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("soundSourceForSoundSourceGroupId", JSPROXY_CDSoundEngine_soundSourceForSound_sourceGroupId_, 2, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("sourceGroupEnabled", JSPROXY_CDSoundEngine_sourceGroupEnabled_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("sourceGroupTotal", JSPROXY_CDSoundEngine_sourceGroupTotal, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("sourceTotal", JSPROXY_CDSoundEngine_sourceTotal, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("stopAllSounds", JSPROXY_CDSoundEngine_stopAllSounds, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("stopSound", JSPROXY_CDSoundEngine_stopSound_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("stopSourceGroup", JSPROXY_CDSoundEngine_stopSourceGroup_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("unloadBuffer", JSPROXY_CDSoundEngine_unloadBuffer_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("enabled", JSPROXY_CDSoundEngine_enabled, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("mute", JSPROXY_CDSoundEngine_mute, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setEnabled", JSPROXY_CDSoundEngine_setEnabled_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setMute", JSPROXY_CDSoundEngine_setMute_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("setMixerSampleRate", JSPROXY_CDSoundEngine_setMixerSampleRate__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FS_END
	};

	JSPROXY_CDSoundEngine_object = JS_InitClass(cx, globalObj, JSPROXY_NSObject_object, JSPROXY_CDSoundEngine_class, JSPROXY_CDSoundEngine_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CDSoundEngine

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CDSoundEngine_class, JSPROXY_CDSoundEngine_object, NULL);
	JSPROXY_CDSoundEngine *proxy = [[JSPROXY_CDSoundEngine alloc] initWithJSObject:jsobj class:[CDSoundEngine class]];
	[proxy setRealObj:realObj];

	if( realObj ) {
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
		[proxy release];
	}

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * SimpleAudioEngine
 */
#pragma mark - SimpleAudioEngine

JSClass* JSPROXY_SimpleAudioEngine_class = NULL;
JSObject* JSPROXY_SimpleAudioEngine_object = NULL;
 // Constructor
JSBool JSPROXY_SimpleAudioEngine_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_SimpleAudioEngine createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    return JS_TRUE;
}

// Destructor
void JSPROXY_SimpleAudioEngine_finalize(JSContext *cx, JSObject *obj)
{
	CCLOGINFO(@"spidermonkey: finalizing JS object %p (SimpleAudioEngine)", obj);
}

// Arguments: 
// Ret value: float (d)
JSBool JSPROXY_SimpleAudioEngine_backgroundMusicVolume(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	SimpleAudioEngine *real = (SimpleAudioEngine*) [proxy realObj];
	ret_val = [real backgroundMusicVolume ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float (d)
JSBool JSPROXY_SimpleAudioEngine_effectsVolume(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	SimpleAudioEngine *real = (SimpleAudioEngine*) [proxy realObj];
	ret_val = [real effectsVolume ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: void (None)
JSBool JSPROXY_SimpleAudioEngine_end_static(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );

	[SimpleAudioEngine end ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSPROXY_SimpleAudioEngine_isBackgroundMusicPlaying(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	SimpleAudioEngine *real = (SimpleAudioEngine*) [proxy realObj];
	ret_val = [real isBackgroundMusicPlaying ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: void (None)
JSBool JSPROXY_SimpleAudioEngine_pauseBackgroundMusic(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );

	SimpleAudioEngine *real = (SimpleAudioEngine*) [proxy realObj];
	[real pauseBackgroundMusic ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: void (None)
JSBool JSPROXY_SimpleAudioEngine_playBackgroundMusic_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; 

	ok &= jsval_to_nsstring( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	SimpleAudioEngine *real = (SimpleAudioEngine*) [proxy realObj];
	[real playBackgroundMusic:(NSString*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: NSString*, BOOL
// Ret value: void (None)
JSBool JSPROXY_SimpleAudioEngine_playBackgroundMusic_loop_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; JSBool arg1; 

	ok &= jsval_to_nsstring( cx, *argvp++, &arg0 );
	ok &= JS_ValueToBoolean( cx, *argvp++, &arg1 );
	if( ! ok ) return JS_FALSE;

	SimpleAudioEngine *real = (SimpleAudioEngine*) [proxy realObj];
	[real playBackgroundMusic:(NSString*)arg0 loop:(BOOL)arg1  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: ALuint (u)
JSBool JSPROXY_SimpleAudioEngine_playEffect_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; 

	ok &= jsval_to_nsstring( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;
	ALuint ret_val;

	SimpleAudioEngine *real = (SimpleAudioEngine*) [proxy realObj];
	ret_val = [real playEffect:(NSString*)arg0  ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: NSString*, Float32, Float32, Float32
// Ret value: ALuint (u)
JSBool JSPROXY_SimpleAudioEngine_playEffect_pitch_pan_gain_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 4, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; double arg1; double arg2; double arg3; 

	ok &= jsval_to_nsstring( cx, *argvp++, &arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg2 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg3 );
	if( ! ok ) return JS_FALSE;
	ALuint ret_val;

	SimpleAudioEngine *real = (SimpleAudioEngine*) [proxy realObj];
	ret_val = [real playEffect:(NSString*)arg0 pitch:(Float32)arg1 pan:(Float32)arg2 gain:(Float32)arg3  ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: void (None)
JSBool JSPROXY_SimpleAudioEngine_preloadBackgroundMusic_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; 

	ok &= jsval_to_nsstring( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	SimpleAudioEngine *real = (SimpleAudioEngine*) [proxy realObj];
	[real preloadBackgroundMusic:(NSString*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: void (None)
JSBool JSPROXY_SimpleAudioEngine_preloadEffect_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; 

	ok &= jsval_to_nsstring( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	SimpleAudioEngine *real = (SimpleAudioEngine*) [proxy realObj];
	[real preloadEffect:(NSString*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: void (None)
JSBool JSPROXY_SimpleAudioEngine_resumeBackgroundMusic(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );

	SimpleAudioEngine *real = (SimpleAudioEngine*) [proxy realObj];
	[real resumeBackgroundMusic ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: void (None)
JSBool JSPROXY_SimpleAudioEngine_rewindBackgroundMusic(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );

	SimpleAudioEngine *real = (SimpleAudioEngine*) [proxy realObj];
	[real rewindBackgroundMusic ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: float
// Ret value: void (None)
JSBool JSPROXY_SimpleAudioEngine_setBackgroundMusicVolume_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	double arg0; 

	ok &= JS_ValueToNumber( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	SimpleAudioEngine *real = (SimpleAudioEngine*) [proxy realObj];
	[real setBackgroundMusicVolume:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: float
// Ret value: void (None)
JSBool JSPROXY_SimpleAudioEngine_setEffectsVolume_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	double arg0; 

	ok &= JS_ValueToNumber( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	SimpleAudioEngine *real = (SimpleAudioEngine*) [proxy realObj];
	[real setEffectsVolume:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: SimpleAudioEngine* (o)
JSBool JSPROXY_SimpleAudioEngine_sharedEngine_static(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	SimpleAudioEngine* ret_val;

	ret_val = [SimpleAudioEngine sharedEngine ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( cx, ret_val );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: CDSoundSource* (o)
JSBool JSPROXY_SimpleAudioEngine_soundSourceForFile_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; 

	ok &= jsval_to_nsstring( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;
	CDSoundSource* ret_val;

	SimpleAudioEngine *real = (SimpleAudioEngine*) [proxy realObj];
	ret_val = [real soundSourceForFile:(NSString*)arg0  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( cx, ret_val );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: void (None)
JSBool JSPROXY_SimpleAudioEngine_stopBackgroundMusic(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );

	SimpleAudioEngine *real = (SimpleAudioEngine*) [proxy realObj];
	[real stopBackgroundMusic ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: ALuint
// Ret value: void (None)
JSBool JSPROXY_SimpleAudioEngine_stopEffect_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	uint32_t arg0; 

	ok &= JS_ValueToECMAUint32( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	SimpleAudioEngine *real = (SimpleAudioEngine*) [proxy realObj];
	[real stopEffect:(ALuint)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: void (None)
JSBool JSPROXY_SimpleAudioEngine_unloadEffect_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; 

	ok &= jsval_to_nsstring( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	SimpleAudioEngine *real = (SimpleAudioEngine*) [proxy realObj];
	[real unloadEffect:(NSString*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSPROXY_SimpleAudioEngine_willPlayBackgroundMusic(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	SimpleAudioEngine *real = (SimpleAudioEngine*) [proxy realObj];
	ret_val = [real willPlayBackgroundMusic ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSPROXY_SimpleAudioEngine_enabled(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	SimpleAudioEngine *real = (SimpleAudioEngine*) [proxy realObj];
	ret_val = [real enabled ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSPROXY_SimpleAudioEngine_mute(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	SimpleAudioEngine *real = (SimpleAudioEngine*) [proxy realObj];
	ret_val = [real mute ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: void (None)
JSBool JSPROXY_SimpleAudioEngine_setEnabled_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	JSBool arg0; 

	ok &= JS_ValueToBoolean( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	SimpleAudioEngine *real = (SimpleAudioEngine*) [proxy realObj];
	[real setEnabled:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: void (None)
JSBool JSPROXY_SimpleAudioEngine_setMute_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	JSBool arg0; 

	ok &= JS_ValueToBoolean( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	SimpleAudioEngine *real = (SimpleAudioEngine*) [proxy realObj];
	[real setMute:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

void JSPROXY_SimpleAudioEngine_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_SimpleAudioEngine_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_SimpleAudioEngine_class->name = name;
	JSPROXY_SimpleAudioEngine_class->addProperty = JS_PropertyStub;
	JSPROXY_SimpleAudioEngine_class->delProperty = JS_PropertyStub;
	JSPROXY_SimpleAudioEngine_class->getProperty = JS_PropertyStub;
	JSPROXY_SimpleAudioEngine_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_SimpleAudioEngine_class->enumerate = JS_EnumerateStub;
	JSPROXY_SimpleAudioEngine_class->resolve = JS_ResolveStub;
	JSPROXY_SimpleAudioEngine_class->convert = JS_ConvertStub;
	JSPROXY_SimpleAudioEngine_class->finalize = JSPROXY_SimpleAudioEngine_finalize;
//	JSPROXY_SimpleAudioEngine_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("backgroundMusicVolume", JSPROXY_SimpleAudioEngine_backgroundMusicVolume, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("effectsVolume", JSPROXY_SimpleAudioEngine_effectsVolume, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("isBackgroundMusicPlaying", JSPROXY_SimpleAudioEngine_isBackgroundMusicPlaying, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("pauseBackgroundMusic", JSPROXY_SimpleAudioEngine_pauseBackgroundMusic, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("playBackgroundMusic", JSPROXY_SimpleAudioEngine_playBackgroundMusic_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("playBackgroundMusicLoop", JSPROXY_SimpleAudioEngine_playBackgroundMusic_loop_, 2, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("playEffect", JSPROXY_SimpleAudioEngine_playEffect_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("playEffectPitchPanGain", JSPROXY_SimpleAudioEngine_playEffect_pitch_pan_gain_, 4, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("preloadBackgroundMusic", JSPROXY_SimpleAudioEngine_preloadBackgroundMusic_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("preloadEffect", JSPROXY_SimpleAudioEngine_preloadEffect_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("resumeBackgroundMusic", JSPROXY_SimpleAudioEngine_resumeBackgroundMusic, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("rewindBackgroundMusic", JSPROXY_SimpleAudioEngine_rewindBackgroundMusic, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setBackgroundMusicVolume", JSPROXY_SimpleAudioEngine_setBackgroundMusicVolume_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setEffectsVolume", JSPROXY_SimpleAudioEngine_setEffectsVolume_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("soundSourceForFile", JSPROXY_SimpleAudioEngine_soundSourceForFile_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("stopBackgroundMusic", JSPROXY_SimpleAudioEngine_stopBackgroundMusic, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("stopEffect", JSPROXY_SimpleAudioEngine_stopEffect_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("unloadEffect", JSPROXY_SimpleAudioEngine_unloadEffect_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("willPlayBackgroundMusic", JSPROXY_SimpleAudioEngine_willPlayBackgroundMusic, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("enabled", JSPROXY_SimpleAudioEngine_enabled, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("mute", JSPROXY_SimpleAudioEngine_mute, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setEnabled", JSPROXY_SimpleAudioEngine_setEnabled_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setMute", JSPROXY_SimpleAudioEngine_setMute_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("end", JSPROXY_SimpleAudioEngine_end_static, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("sharedEngine", JSPROXY_SimpleAudioEngine_sharedEngine_static, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FS_END
	};

	JSPROXY_SimpleAudioEngine_object = JS_InitClass(cx, globalObj, JSPROXY_NSObject_object, JSPROXY_SimpleAudioEngine_class, JSPROXY_SimpleAudioEngine_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_SimpleAudioEngine

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_SimpleAudioEngine_class, JSPROXY_SimpleAudioEngine_object, NULL);
	JSPROXY_SimpleAudioEngine *proxy = [[JSPROXY_SimpleAudioEngine alloc] initWithJSObject:jsobj class:[SimpleAudioEngine class]];
	[proxy setRealObj:realObj];

	if( realObj ) {
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
		[proxy release];
	}

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CDSoundSource
 */
#pragma mark - CDSoundSource

JSClass* JSPROXY_CDSoundSource_class = NULL;
JSObject* JSPROXY_CDSoundSource_object = NULL;
 // Constructor
JSBool JSPROXY_CDSoundSource_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CDSoundSource createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    return JS_TRUE;
}

// Destructor
void JSPROXY_CDSoundSource_finalize(JSContext *cx, JSObject *obj)
{
	CCLOGINFO(@"spidermonkey: finalizing JS object %p (CDSoundSource)", obj);
}

// Arguments: 
// Ret value: float (d)
JSBool JSPROXY_CDSoundSource_durationInSeconds(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CDSoundSource *real = (CDSoundSource*) [proxy realObj];
	ret_val = [real durationInSeconds ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float (d)
JSBool JSPROXY_CDSoundSource_gain(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CDSoundSource *real = (CDSoundSource*) [proxy realObj];
	ret_val = [real gain ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: ALuint, int, CDSoundEngine*
// Ret value: None (None)
JSBool JSPROXY_CDSoundSource_init_sourceIndex_soundEngine_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && ![proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 3, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	uint32_t arg0; int32_t arg1; id arg2; 

	ok &= JS_ValueToECMAUint32( cx, *argvp++, &arg0 );
	ok &= JS_ValueToECMAInt32( cx, *argvp++, &arg1 );
	ok &= jsval_to_nsobject( cx, *argvp++, &arg2);
	if( ! ok ) return JS_FALSE;

	CDSoundSource *real = [(CDSoundSource*)[proxy.klass alloc] init:(ALuint)arg0 sourceIndex:(int)arg1 soundEngine:(CDSoundEngine*)arg2  ];
	[proxy setRealObj: real];
	[real autorelease];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
	[proxy release];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSPROXY_CDSoundSource_isPlaying(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CDSoundSource *real = (CDSoundSource*) [proxy realObj];
	ret_val = [real isPlaying ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: ALenum (i)
JSBool JSPROXY_CDSoundSource_lastError(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	ALenum ret_val;

	CDSoundSource *real = (CDSoundSource*) [proxy realObj];
	ret_val = [real lastError ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSPROXY_CDSoundSource_looping(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CDSoundSource *real = (CDSoundSource*) [proxy realObj];
	ret_val = [real looping ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float (d)
JSBool JSPROXY_CDSoundSource_pan(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CDSoundSource *real = (CDSoundSource*) [proxy realObj];
	ret_val = [real pan ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float (d)
JSBool JSPROXY_CDSoundSource_pitch(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CDSoundSource *real = (CDSoundSource*) [proxy realObj];
	ret_val = [real pitch ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: float
// Ret value: void (None)
JSBool JSPROXY_CDSoundSource_setGain_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	double arg0; 

	ok &= JS_ValueToNumber( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	CDSoundSource *real = (CDSoundSource*) [proxy realObj];
	[real setGain:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: void (None)
JSBool JSPROXY_CDSoundSource_setLooping_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	JSBool arg0; 

	ok &= JS_ValueToBoolean( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	CDSoundSource *real = (CDSoundSource*) [proxy realObj];
	[real setLooping:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: float
// Ret value: void (None)
JSBool JSPROXY_CDSoundSource_setPan_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	double arg0; 

	ok &= JS_ValueToNumber( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	CDSoundSource *real = (CDSoundSource*) [proxy realObj];
	[real setPan:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: float
// Ret value: void (None)
JSBool JSPROXY_CDSoundSource_setPitch_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	double arg0; 

	ok &= JS_ValueToNumber( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	CDSoundSource *real = (CDSoundSource*) [proxy realObj];
	[real setPitch:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: int
// Ret value: void (None)
JSBool JSPROXY_CDSoundSource_setSoundId_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	int32_t arg0; 

	ok &= JS_ValueToECMAInt32( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	CDSoundSource *real = (CDSoundSource*) [proxy realObj];
	[real setSoundId:(int)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: int (i)
JSBool JSPROXY_CDSoundSource_soundId(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	int ret_val;

	CDSoundSource *real = (CDSoundSource*) [proxy realObj];
	ret_val = [real soundId ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSPROXY_CDSoundSource_pause(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CDSoundSource *real = (CDSoundSource*) [proxy realObj];
	ret_val = [real pause ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSPROXY_CDSoundSource_play(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CDSoundSource *real = (CDSoundSource*) [proxy realObj];
	ret_val = [real play ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSPROXY_CDSoundSource_rewind(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CDSoundSource *real = (CDSoundSource*) [proxy realObj];
	ret_val = [real rewind ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSPROXY_CDSoundSource_stop(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CDSoundSource *real = (CDSoundSource*) [proxy realObj];
	ret_val = [real stop ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSPROXY_CDSoundSource_enabled(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CDSoundSource *real = (CDSoundSource*) [proxy realObj];
	ret_val = [real enabled ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSPROXY_CDSoundSource_mute(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CDSoundSource *real = (CDSoundSource*) [proxy realObj];
	ret_val = [real mute ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: void (None)
JSBool JSPROXY_CDSoundSource_setEnabled_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	JSBool arg0; 

	ok &= JS_ValueToBoolean( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	CDSoundSource *real = (CDSoundSource*) [proxy realObj];
	[real setEnabled:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: void (None)
JSBool JSPROXY_CDSoundSource_setMute_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	JSBool arg0; 

	ok &= JS_ValueToBoolean( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	CDSoundSource *real = (CDSoundSource*) [proxy realObj];
	[real setMute:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

void JSPROXY_CDSoundSource_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CDSoundSource_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CDSoundSource_class->name = name;
	JSPROXY_CDSoundSource_class->addProperty = JS_PropertyStub;
	JSPROXY_CDSoundSource_class->delProperty = JS_PropertyStub;
	JSPROXY_CDSoundSource_class->getProperty = JS_PropertyStub;
	JSPROXY_CDSoundSource_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CDSoundSource_class->enumerate = JS_EnumerateStub;
	JSPROXY_CDSoundSource_class->resolve = JS_ResolveStub;
	JSPROXY_CDSoundSource_class->convert = JS_ConvertStub;
	JSPROXY_CDSoundSource_class->finalize = JSPROXY_CDSoundSource_finalize;
//	JSPROXY_CDSoundSource_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("durationInSeconds", JSPROXY_CDSoundSource_durationInSeconds, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("gain", JSPROXY_CDSoundSource_gain, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("initSourceIndexSoundEngine", JSPROXY_CDSoundSource_init_sourceIndex_soundEngine_, 3, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("isPlaying", JSPROXY_CDSoundSource_isPlaying, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("lastError", JSPROXY_CDSoundSource_lastError, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("looping", JSPROXY_CDSoundSource_looping, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("pan", JSPROXY_CDSoundSource_pan, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("pitch", JSPROXY_CDSoundSource_pitch, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setGain", JSPROXY_CDSoundSource_setGain_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setLooping", JSPROXY_CDSoundSource_setLooping_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setPan", JSPROXY_CDSoundSource_setPan_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setPitch", JSPROXY_CDSoundSource_setPitch_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setSoundId", JSPROXY_CDSoundSource_setSoundId_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("soundId", JSPROXY_CDSoundSource_soundId, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("pause", JSPROXY_CDSoundSource_pause, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("play", JSPROXY_CDSoundSource_play, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("rewind", JSPROXY_CDSoundSource_rewind, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("stop", JSPROXY_CDSoundSource_stop, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("enabled", JSPROXY_CDSoundSource_enabled, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("mute", JSPROXY_CDSoundSource_mute, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setEnabled", JSPROXY_CDSoundSource_setEnabled_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setMute", JSPROXY_CDSoundSource_setMute_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FS_END
	};

	JSPROXY_CDSoundSource_object = JS_InitClass(cx, globalObj, JSPROXY_NSObject_object, JSPROXY_CDSoundSource_class, JSPROXY_CDSoundSource_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CDSoundSource

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CDSoundSource_class, JSPROXY_CDSoundSource_object, NULL);
	JSPROXY_CDSoundSource *proxy = [[JSPROXY_CDSoundSource alloc] initWithJSObject:jsobj class:[CDSoundSource class]];
	[proxy setRealObj:realObj];

	if( realObj ) {
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
		[proxy release];
	}

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CDUtilities
 */
#pragma mark - CDUtilities

JSClass* JSPROXY_CDUtilities_class = NULL;
JSObject* JSPROXY_CDUtilities_object = NULL;
 // Constructor
JSBool JSPROXY_CDUtilities_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CDUtilities createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    return JS_TRUE;
}

// Destructor
void JSPROXY_CDUtilities_finalize(JSContext *cx, JSObject *obj)
{
	CCLOGINFO(@"spidermonkey: finalizing JS object %p (CDUtilities)", obj);
}

// Arguments: NSString*
// Ret value: NSString* (S)
JSBool JSPROXY_CDUtilities_fullPathFromRelativePath__static(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; 

	ok &= jsval_to_nsstring( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;
	NSString* ret_val;

	ret_val = [CDUtilities fullPathFromRelativePath:(NSString*)arg0  ];

	JSString *ret_obj = JS_NewStringCopyZ(cx, [ret_val UTF8String]);
	JS_SET_RVAL(cx, vp, STRING_TO_JSVAL(ret_obj) );

	return JS_TRUE;
}

void JSPROXY_CDUtilities_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CDUtilities_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CDUtilities_class->name = name;
	JSPROXY_CDUtilities_class->addProperty = JS_PropertyStub;
	JSPROXY_CDUtilities_class->delProperty = JS_PropertyStub;
	JSPROXY_CDUtilities_class->getProperty = JS_PropertyStub;
	JSPROXY_CDUtilities_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CDUtilities_class->enumerate = JS_EnumerateStub;
	JSPROXY_CDUtilities_class->resolve = JS_ResolveStub;
	JSPROXY_CDUtilities_class->convert = JS_ConvertStub;
	JSPROXY_CDUtilities_class->finalize = JSPROXY_CDUtilities_finalize;
//	JSPROXY_CDUtilities_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("fullPathFromRelativePath", JSPROXY_CDUtilities_fullPathFromRelativePath__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FS_END
	};

	JSPROXY_CDUtilities_object = JS_InitClass(cx, globalObj, JSPROXY_NSObject_object, JSPROXY_CDUtilities_class, JSPROXY_CDUtilities_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CDUtilities

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CDUtilities_class, JSPROXY_CDUtilities_object, NULL);
	JSPROXY_CDUtilities *proxy = [[JSPROXY_CDUtilities alloc] initWithJSObject:jsobj class:[CDUtilities class]];
	[proxy setRealObj:realObj];

	if( realObj ) {
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
		[proxy release];
	}

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CDLongAudioSource
 */
#pragma mark - CDLongAudioSource

JSClass* JSPROXY_CDLongAudioSource_class = NULL;
JSObject* JSPROXY_CDLongAudioSource_object = NULL;
 // Constructor
JSBool JSPROXY_CDLongAudioSource_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CDLongAudioSource createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    return JS_TRUE;
}

// Destructor
void JSPROXY_CDLongAudioSource_finalize(JSContext *cx, JSObject *obj)
{
	CCLOGINFO(@"spidermonkey: finalizing JS object %p (CDLongAudioSource)", obj);
}

// Arguments: 
// Ret value: NSString* (S)
JSBool JSPROXY_CDLongAudioSource_audioSourceFilePath(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	NSString* ret_val;

	CDLongAudioSource *real = (CDLongAudioSource*) [proxy realObj];
	ret_val = [real audioSourceFilePath ];

	JSString *ret_obj = JS_NewStringCopyZ(cx, [ret_val UTF8String]);
	JS_SET_RVAL(cx, vp, STRING_TO_JSVAL(ret_obj) );

	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSPROXY_CDLongAudioSource_backgroundMusic(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CDLongAudioSource *real = (CDLongAudioSource*) [proxy realObj];
	ret_val = [real backgroundMusic ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSPROXY_CDLongAudioSource_isPlaying(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CDLongAudioSource *real = (CDLongAudioSource*) [proxy realObj];
	ret_val = [real isPlaying ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: void (None)
JSBool JSPROXY_CDLongAudioSource_load_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; 

	ok &= jsval_to_nsstring( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	CDLongAudioSource *real = (CDLongAudioSource*) [proxy realObj];
	[real load:(NSString*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSInteger (i)
JSBool JSPROXY_CDLongAudioSource_numberOfLoops(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	NSInteger ret_val;

	CDLongAudioSource *real = (CDLongAudioSource*) [proxy realObj];
	ret_val = [real numberOfLoops ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: void (None)
JSBool JSPROXY_CDLongAudioSource_pause(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );

	CDLongAudioSource *real = (CDLongAudioSource*) [proxy realObj];
	[real pause ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: void (None)
JSBool JSPROXY_CDLongAudioSource_play(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );

	CDLongAudioSource *real = (CDLongAudioSource*) [proxy realObj];
	[real play ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: void (None)
JSBool JSPROXY_CDLongAudioSource_resume(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );

	CDLongAudioSource *real = (CDLongAudioSource*) [proxy realObj];
	[real resume ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: void (None)
JSBool JSPROXY_CDLongAudioSource_rewind(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );

	CDLongAudioSource *real = (CDLongAudioSource*) [proxy realObj];
	[real rewind ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: void (None)
JSBool JSPROXY_CDLongAudioSource_setBackgroundMusic_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	JSBool arg0; 

	ok &= JS_ValueToBoolean( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	CDLongAudioSource *real = (CDLongAudioSource*) [proxy realObj];
	[real setBackgroundMusic:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: NSInteger
// Ret value: void (None)
JSBool JSPROXY_CDLongAudioSource_setNumberOfLoops_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	int32_t arg0; 

	ok &= JS_ValueToECMAInt32( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	CDLongAudioSource *real = (CDLongAudioSource*) [proxy realObj];
	[real setNumberOfLoops:(NSInteger)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: float
// Ret value: void (None)
JSBool JSPROXY_CDLongAudioSource_setVolume_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	double arg0; 

	ok &= JS_ValueToNumber( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	CDLongAudioSource *real = (CDLongAudioSource*) [proxy realObj];
	[real setVolume:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: void (None)
JSBool JSPROXY_CDLongAudioSource_stop(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );

	CDLongAudioSource *real = (CDLongAudioSource*) [proxy realObj];
	[real stop ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: float (d)
JSBool JSPROXY_CDLongAudioSource_volume(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CDLongAudioSource *real = (CDLongAudioSource*) [proxy realObj];
	ret_val = [real volume ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSPROXY_CDLongAudioSource_enabled(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CDLongAudioSource *real = (CDLongAudioSource*) [proxy realObj];
	ret_val = [real enabled ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSPROXY_CDLongAudioSource_mute(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CDLongAudioSource *real = (CDLongAudioSource*) [proxy realObj];
	ret_val = [real mute ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: void (None)
JSBool JSPROXY_CDLongAudioSource_setEnabled_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	JSBool arg0; 

	ok &= JS_ValueToBoolean( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	CDLongAudioSource *real = (CDLongAudioSource*) [proxy realObj];
	[real setEnabled:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: void (None)
JSBool JSPROXY_CDLongAudioSource_setMute_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	JSBool arg0; 

	ok &= JS_ValueToBoolean( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	CDLongAudioSource *real = (CDLongAudioSource*) [proxy realObj];
	[real setMute:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

void JSPROXY_CDLongAudioSource_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CDLongAudioSource_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CDLongAudioSource_class->name = name;
	JSPROXY_CDLongAudioSource_class->addProperty = JS_PropertyStub;
	JSPROXY_CDLongAudioSource_class->delProperty = JS_PropertyStub;
	JSPROXY_CDLongAudioSource_class->getProperty = JS_PropertyStub;
	JSPROXY_CDLongAudioSource_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CDLongAudioSource_class->enumerate = JS_EnumerateStub;
	JSPROXY_CDLongAudioSource_class->resolve = JS_ResolveStub;
	JSPROXY_CDLongAudioSource_class->convert = JS_ConvertStub;
	JSPROXY_CDLongAudioSource_class->finalize = JSPROXY_CDLongAudioSource_finalize;
//	JSPROXY_CDLongAudioSource_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("audioSourceFilePath", JSPROXY_CDLongAudioSource_audioSourceFilePath, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("backgroundMusic", JSPROXY_CDLongAudioSource_backgroundMusic, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("isPlaying", JSPROXY_CDLongAudioSource_isPlaying, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("load", JSPROXY_CDLongAudioSource_load_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("numberOfLoops", JSPROXY_CDLongAudioSource_numberOfLoops, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("pause", JSPROXY_CDLongAudioSource_pause, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("play", JSPROXY_CDLongAudioSource_play, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("resume", JSPROXY_CDLongAudioSource_resume, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("rewind", JSPROXY_CDLongAudioSource_rewind, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setBackgroundMusic", JSPROXY_CDLongAudioSource_setBackgroundMusic_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setNumberOfLoops", JSPROXY_CDLongAudioSource_setNumberOfLoops_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setVolume", JSPROXY_CDLongAudioSource_setVolume_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("stop", JSPROXY_CDLongAudioSource_stop, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("volume", JSPROXY_CDLongAudioSource_volume, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("enabled", JSPROXY_CDLongAudioSource_enabled, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("mute", JSPROXY_CDLongAudioSource_mute, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setEnabled", JSPROXY_CDLongAudioSource_setEnabled_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setMute", JSPROXY_CDLongAudioSource_setMute_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FS_END
	};

	JSPROXY_CDLongAudioSource_object = JS_InitClass(cx, globalObj, JSPROXY_NSObject_object, JSPROXY_CDLongAudioSource_class, JSPROXY_CDLongAudioSource_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CDLongAudioSource

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CDLongAudioSource_class, JSPROXY_CDLongAudioSource_object, NULL);
	JSPROXY_CDLongAudioSource *proxy = [[JSPROXY_CDLongAudioSource alloc] initWithJSObject:jsobj class:[CDLongAudioSource class]];
	[proxy setRealObj:realObj];

	if( realObj ) {
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
		[proxy release];
	}

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CDAudioManager
 */
#pragma mark - CDAudioManager

JSClass* JSPROXY_CDAudioManager_class = NULL;
JSObject* JSPROXY_CDAudioManager_object = NULL;
 // Constructor
JSBool JSPROXY_CDAudioManager_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CDAudioManager createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    return JS_TRUE;
}

// Destructor
void JSPROXY_CDAudioManager_finalize(JSContext *cx, JSObject *obj)
{
	CCLOGINFO(@"spidermonkey: finalizing JS object %p (CDAudioManager)", obj);
}

// Arguments: 
// Ret value: void (None)
JSBool JSPROXY_CDAudioManager_applicationDidBecomeActive(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );

	CDAudioManager *real = (CDAudioManager*) [proxy realObj];
	[real applicationDidBecomeActive ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: void (None)
JSBool JSPROXY_CDAudioManager_applicationWillResignActive(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );

	CDAudioManager *real = (CDAudioManager*) [proxy realObj];
	[real applicationWillResignActive ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: void (None)
JSBool JSPROXY_CDAudioManager_audioSessionInterrupted(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );

	CDAudioManager *real = (CDAudioManager*) [proxy realObj];
	[real audioSessionInterrupted ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: void (None)
JSBool JSPROXY_CDAudioManager_audioSessionResumed(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );

	CDAudioManager *real = (CDAudioManager*) [proxy realObj];
	[real audioSessionResumed ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: tAudioSourceChannel
// Ret value: CDLongAudioSource* (o)
JSBool JSPROXY_CDAudioManager_audioSourceForChannel_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	int32_t arg0; 

	ok &= JS_ValueToECMAInt32( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;
	CDLongAudioSource* ret_val;

	CDAudioManager *real = (CDAudioManager*) [proxy realObj];
	ret_val = [real audioSourceForChannel:(tAudioSourceChannel)arg0  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( cx, ret_val );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: NSString*, tAudioSourceChannel
// Ret value: CDLongAudioSource* (o)
JSBool JSPROXY_CDAudioManager_audioSourceLoad_channel_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; int32_t arg1; 

	ok &= jsval_to_nsstring( cx, *argvp++, &arg0 );
	ok &= JS_ValueToECMAInt32( cx, *argvp++, &arg1 );
	if( ! ok ) return JS_FALSE;
	CDLongAudioSource* ret_val;

	CDAudioManager *real = (CDAudioManager*) [proxy realObj];
	ret_val = [real audioSourceLoad:(NSString*)arg0 channel:(tAudioSourceChannel)arg1  ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( cx, ret_val );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: CDLongAudioSource* (o)
JSBool JSPROXY_CDAudioManager_backgroundMusic(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	CDLongAudioSource* ret_val;

	CDAudioManager *real = (CDAudioManager*) [proxy realObj];
	ret_val = [real backgroundMusic ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( cx, ret_val );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: tAudioManagerMode
// Ret value: void (None)
JSBool JSPROXY_CDAudioManager_configure__static(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	int32_t arg0; 

	ok &= JS_ValueToECMAInt32( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	[CDAudioManager configure:(tAudioManagerMode)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: void (None)
JSBool JSPROXY_CDAudioManager_end_static(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );

	[CDAudioManager end ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: tAudioManagerMode
// Ret value: None (None)
JSBool JSPROXY_CDAudioManager_init_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && ![proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	int32_t arg0; 

	ok &= JS_ValueToECMAInt32( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	CDAudioManager *real = [(CDAudioManager*)[proxy.klass alloc] init:(tAudioManagerMode)arg0  ];
	[proxy setRealObj: real];
	[real autorelease];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
	[proxy release];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: tAudioManagerMode
// Ret value: void (None)
JSBool JSPROXY_CDAudioManager_initAsynchronously__static(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	int32_t arg0; 

	ok &= JS_ValueToECMAInt32( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	[CDAudioManager initAsynchronously:(tAudioManagerMode)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSPROXY_CDAudioManager_isBackgroundMusicPlaying(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CDAudioManager *real = (CDAudioManager*) [proxy realObj];
	ret_val = [real isBackgroundMusicPlaying ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSPROXY_CDAudioManager_isDeviceMuted(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CDAudioManager *real = (CDAudioManager*) [proxy realObj];
	ret_val = [real isDeviceMuted ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSPROXY_CDAudioManager_isOtherAudioPlaying(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CDAudioManager *real = (CDAudioManager*) [proxy realObj];
	ret_val = [real isOtherAudioPlaying ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: void (None)
JSBool JSPROXY_CDAudioManager_pauseBackgroundMusic(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );

	CDAudioManager *real = (CDAudioManager*) [proxy realObj];
	[real pauseBackgroundMusic ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: NSString*, BOOL
// Ret value: void (None)
JSBool JSPROXY_CDAudioManager_playBackgroundMusic_loop_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; JSBool arg1; 

	ok &= jsval_to_nsstring( cx, *argvp++, &arg0 );
	ok &= JS_ValueToBoolean( cx, *argvp++, &arg1 );
	if( ! ok ) return JS_FALSE;

	CDAudioManager *real = (CDAudioManager*) [proxy realObj];
	[real playBackgroundMusic:(NSString*)arg0 loop:(BOOL)arg1  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: void (None)
JSBool JSPROXY_CDAudioManager_preloadBackgroundMusic_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; 

	ok &= jsval_to_nsstring( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	CDAudioManager *real = (CDAudioManager*) [proxy realObj];
	[real preloadBackgroundMusic:(NSString*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: void (None)
JSBool JSPROXY_CDAudioManager_resumeBackgroundMusic(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );

	CDAudioManager *real = (CDAudioManager*) [proxy realObj];
	[real resumeBackgroundMusic ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: void (None)
JSBool JSPROXY_CDAudioManager_rewindBackgroundMusic(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );

	CDAudioManager *real = (CDAudioManager*) [proxy realObj];
	[real rewindBackgroundMusic ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: tAudioManagerMode
// Ret value: void (None)
JSBool JSPROXY_CDAudioManager_setMode_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	int32_t arg0; 

	ok &= JS_ValueToECMAInt32( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	CDAudioManager *real = (CDAudioManager*) [proxy realObj];
	[real setMode:(tAudioManagerMode)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: tAudioManagerResignBehavior, BOOL
// Ret value: void (None)
JSBool JSPROXY_CDAudioManager_setResignBehavior_autoHandle_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	int32_t arg0; JSBool arg1; 

	ok &= JS_ValueToECMAInt32( cx, *argvp++, &arg0 );
	ok &= JS_ValueToBoolean( cx, *argvp++, &arg1 );
	if( ! ok ) return JS_FALSE;

	CDAudioManager *real = (CDAudioManager*) [proxy realObj];
	[real setResignBehavior:(tAudioManagerResignBehavior)arg0 autoHandle:(BOOL)arg1  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: CDAudioManager* (o)
JSBool JSPROXY_CDAudioManager_sharedManager_static(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	CDAudioManager* ret_val;

	ret_val = [CDAudioManager sharedManager ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( cx, ret_val );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: tAudioManagerState (i)
JSBool JSPROXY_CDAudioManager_sharedManagerState_static(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	tAudioManagerState ret_val;

	ret_val = [CDAudioManager sharedManagerState ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: CDSoundEngine* (o)
JSBool JSPROXY_CDAudioManager_soundEngine(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	CDSoundEngine* ret_val;

	CDAudioManager *real = (CDAudioManager*) [proxy realObj];
	ret_val = [real soundEngine ];

	JSObject *jsobj = get_or_create_jsobject_from_realobj( cx, ret_val );
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: void (None)
JSBool JSPROXY_CDAudioManager_stopBackgroundMusic(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );

	CDAudioManager *real = (CDAudioManager*) [proxy realObj];
	[real stopBackgroundMusic ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSPROXY_CDAudioManager_willPlayBackgroundMusic(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CDAudioManager *real = (CDAudioManager*) [proxy realObj];
	ret_val = [real willPlayBackgroundMusic ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: CDLongAudioSource*
// Ret value: void (None)
JSBool JSPROXY_CDAudioManager_cdAudioSourceDidFinishPlaying_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	id arg0; 

	ok &= jsval_to_nsobject( cx, *argvp++, &arg0);
	if( ! ok ) return JS_FALSE;

	CDAudioManager *real = (CDAudioManager*) [proxy realObj];
	[real cdAudioSourceDidFinishPlaying:(CDLongAudioSource*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: CDLongAudioSource*
// Ret value: void (None)
JSBool JSPROXY_CDAudioManager_cdAudioSourceFileDidChange_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	id arg0; 

	ok &= jsval_to_nsobject( cx, *argvp++, &arg0);
	if( ! ok ) return JS_FALSE;

	CDAudioManager *real = (CDAudioManager*) [proxy realObj];
	[real cdAudioSourceFileDidChange:(CDLongAudioSource*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSPROXY_CDAudioManager_enabled(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CDAudioManager *real = (CDAudioManager*) [proxy realObj];
	ret_val = [real enabled ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSPROXY_CDAudioManager_mute(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CDAudioManager *real = (CDAudioManager*) [proxy realObj];
	ret_val = [real mute ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: void (None)
JSBool JSPROXY_CDAudioManager_setEnabled_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	JSBool arg0; 

	ok &= JS_ValueToBoolean( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	CDAudioManager *real = (CDAudioManager*) [proxy realObj];
	[real setEnabled:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: void (None)
JSBool JSPROXY_CDAudioManager_setMute_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	JSBool arg0; 

	ok &= JS_ValueToBoolean( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	CDAudioManager *real = (CDAudioManager*) [proxy realObj];
	[real setMute:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

void JSPROXY_CDAudioManager_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CDAudioManager_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CDAudioManager_class->name = name;
	JSPROXY_CDAudioManager_class->addProperty = JS_PropertyStub;
	JSPROXY_CDAudioManager_class->delProperty = JS_PropertyStub;
	JSPROXY_CDAudioManager_class->getProperty = JS_PropertyStub;
	JSPROXY_CDAudioManager_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CDAudioManager_class->enumerate = JS_EnumerateStub;
	JSPROXY_CDAudioManager_class->resolve = JS_ResolveStub;
	JSPROXY_CDAudioManager_class->convert = JS_ConvertStub;
	JSPROXY_CDAudioManager_class->finalize = JSPROXY_CDAudioManager_finalize;
//	JSPROXY_CDAudioManager_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("applicationDidBecomeActive", JSPROXY_CDAudioManager_applicationDidBecomeActive, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("applicationWillResignActive", JSPROXY_CDAudioManager_applicationWillResignActive, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("audioSessionInterrupted", JSPROXY_CDAudioManager_audioSessionInterrupted, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("audioSessionResumed", JSPROXY_CDAudioManager_audioSessionResumed, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("audioSourceForChannel", JSPROXY_CDAudioManager_audioSourceForChannel_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("audioSourceLoadChannel", JSPROXY_CDAudioManager_audioSourceLoad_channel_, 2, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("backgroundMusic", JSPROXY_CDAudioManager_backgroundMusic, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("init", JSPROXY_CDAudioManager_init_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("isBackgroundMusicPlaying", JSPROXY_CDAudioManager_isBackgroundMusicPlaying, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("isDeviceMuted", JSPROXY_CDAudioManager_isDeviceMuted, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("isOtherAudioPlaying", JSPROXY_CDAudioManager_isOtherAudioPlaying, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("pauseBackgroundMusic", JSPROXY_CDAudioManager_pauseBackgroundMusic, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("playBackgroundMusicLoop", JSPROXY_CDAudioManager_playBackgroundMusic_loop_, 2, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("preloadBackgroundMusic", JSPROXY_CDAudioManager_preloadBackgroundMusic_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("resumeBackgroundMusic", JSPROXY_CDAudioManager_resumeBackgroundMusic, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("rewindBackgroundMusic", JSPROXY_CDAudioManager_rewindBackgroundMusic, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setMode", JSPROXY_CDAudioManager_setMode_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setResignBehaviorAutoHandle", JSPROXY_CDAudioManager_setResignBehavior_autoHandle_, 2, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("soundEngine", JSPROXY_CDAudioManager_soundEngine, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("stopBackgroundMusic", JSPROXY_CDAudioManager_stopBackgroundMusic, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("willPlayBackgroundMusic", JSPROXY_CDAudioManager_willPlayBackgroundMusic, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("cdAudioSourceDidFinishPlaying", JSPROXY_CDAudioManager_cdAudioSourceDidFinishPlaying_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("cdAudioSourceFileDidChange", JSPROXY_CDAudioManager_cdAudioSourceFileDidChange_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("enabled", JSPROXY_CDAudioManager_enabled, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("mute", JSPROXY_CDAudioManager_mute, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setEnabled", JSPROXY_CDAudioManager_setEnabled_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setMute", JSPROXY_CDAudioManager_setMute_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("configure", JSPROXY_CDAudioManager_configure__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("end", JSPROXY_CDAudioManager_end_static, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("initAsynchronously", JSPROXY_CDAudioManager_initAsynchronously__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("sharedManager", JSPROXY_CDAudioManager_sharedManager_static, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("sharedManagerState", JSPROXY_CDAudioManager_sharedManagerState_static, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FS_END
	};

	JSPROXY_CDAudioManager_object = JS_InitClass(cx, globalObj, JSPROXY_NSObject_object, JSPROXY_CDAudioManager_class, JSPROXY_CDAudioManager_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CDAudioManager

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CDAudioManager_class, JSPROXY_CDAudioManager_object, NULL);
	JSPROXY_CDAudioManager *proxy = [[JSPROXY_CDAudioManager alloc] initWithJSObject:jsobj class:[CDAudioManager class]];
	[proxy setRealObj:realObj];

	if( realObj ) {
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
		[proxy release];
	}

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CDFloatInterpolator
 */
#pragma mark - CDFloatInterpolator

JSClass* JSPROXY_CDFloatInterpolator_class = NULL;
JSObject* JSPROXY_CDFloatInterpolator_object = NULL;
 // Constructor
JSBool JSPROXY_CDFloatInterpolator_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CDFloatInterpolator createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    return JS_TRUE;
}

// Destructor
void JSPROXY_CDFloatInterpolator_finalize(JSContext *cx, JSObject *obj)
{
	CCLOGINFO(@"spidermonkey: finalizing JS object %p (CDFloatInterpolator)", obj);
}

// Arguments: 
// Ret value: float (d)
JSBool JSPROXY_CDFloatInterpolator_end(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CDFloatInterpolator *real = (CDFloatInterpolator*) [proxy realObj];
	ret_val = [real end ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: tCDInterpolationType, float, float
// Ret value: None (None)
JSBool JSPROXY_CDFloatInterpolator_init_startVal_endVal_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && ![proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 3, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	int32_t arg0; double arg1; double arg2; 

	ok &= JS_ValueToECMAInt32( cx, *argvp++, &arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg2 );
	if( ! ok ) return JS_FALSE;

	CDFloatInterpolator *real = [(CDFloatInterpolator*)[proxy.klass alloc] init:(tCDInterpolationType)arg0 startVal:(float)arg1 endVal:(float)arg2  ];
	[proxy setRealObj: real];
	[real autorelease];

	objc_setAssociatedObject(real, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
	[proxy release];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: float
// Ret value: float (d)
JSBool JSPROXY_CDFloatInterpolator_interpolate_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	double arg0; 

	ok &= JS_ValueToNumber( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;
	float ret_val;

	CDFloatInterpolator *real = (CDFloatInterpolator*) [proxy realObj];
	ret_val = [real interpolate:(float)arg0  ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: tCDInterpolationType (i)
JSBool JSPROXY_CDFloatInterpolator_interpolationType(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	tCDInterpolationType ret_val;

	CDFloatInterpolator *real = (CDFloatInterpolator*) [proxy realObj];
	ret_val = [real interpolationType ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: float
// Ret value: void (None)
JSBool JSPROXY_CDFloatInterpolator_setEnd_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	double arg0; 

	ok &= JS_ValueToNumber( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	CDFloatInterpolator *real = (CDFloatInterpolator*) [proxy realObj];
	[real setEnd:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: tCDInterpolationType
// Ret value: void (None)
JSBool JSPROXY_CDFloatInterpolator_setInterpolationType_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	int32_t arg0; 

	ok &= JS_ValueToECMAInt32( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	CDFloatInterpolator *real = (CDFloatInterpolator*) [proxy realObj];
	[real setInterpolationType:(tCDInterpolationType)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: float
// Ret value: void (None)
JSBool JSPROXY_CDFloatInterpolator_setStart_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	double arg0; 

	ok &= JS_ValueToNumber( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	CDFloatInterpolator *real = (CDFloatInterpolator*) [proxy realObj];
	[real setStart:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: float (d)
JSBool JSPROXY_CDFloatInterpolator_start(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CDFloatInterpolator *real = (CDFloatInterpolator*) [proxy realObj];
	ret_val = [real start ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

void JSPROXY_CDFloatInterpolator_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CDFloatInterpolator_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CDFloatInterpolator_class->name = name;
	JSPROXY_CDFloatInterpolator_class->addProperty = JS_PropertyStub;
	JSPROXY_CDFloatInterpolator_class->delProperty = JS_PropertyStub;
	JSPROXY_CDFloatInterpolator_class->getProperty = JS_PropertyStub;
	JSPROXY_CDFloatInterpolator_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CDFloatInterpolator_class->enumerate = JS_EnumerateStub;
	JSPROXY_CDFloatInterpolator_class->resolve = JS_ResolveStub;
	JSPROXY_CDFloatInterpolator_class->convert = JS_ConvertStub;
	JSPROXY_CDFloatInterpolator_class->finalize = JSPROXY_CDFloatInterpolator_finalize;
//	JSPROXY_CDFloatInterpolator_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("end", JSPROXY_CDFloatInterpolator_end, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("initStartValEndVal", JSPROXY_CDFloatInterpolator_init_startVal_endVal_, 3, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("interpolate", JSPROXY_CDFloatInterpolator_interpolate_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("interpolationType", JSPROXY_CDFloatInterpolator_interpolationType, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setEnd", JSPROXY_CDFloatInterpolator_setEnd_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setInterpolationType", JSPROXY_CDFloatInterpolator_setInterpolationType_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setStart", JSPROXY_CDFloatInterpolator_setStart_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("start", JSPROXY_CDFloatInterpolator_start, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FS_END
	};

	JSPROXY_CDFloatInterpolator_object = JS_InitClass(cx, globalObj, JSPROXY_NSObject_object, JSPROXY_CDFloatInterpolator_class, JSPROXY_CDFloatInterpolator_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CDFloatInterpolator

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CDFloatInterpolator_class, JSPROXY_CDFloatInterpolator_object, NULL);
	JSPROXY_CDFloatInterpolator *proxy = [[JSPROXY_CDFloatInterpolator alloc] initWithJSObject:jsobj class:[CDFloatInterpolator class]];
	[proxy setRealObj:realObj];

	if( realObj ) {
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
		[proxy release];
	}

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CDPropertyModifier
 */
#pragma mark - CDPropertyModifier

JSClass* JSPROXY_CDPropertyModifier_class = NULL;
JSObject* JSPROXY_CDPropertyModifier_object = NULL;
 // Constructor
JSBool JSPROXY_CDPropertyModifier_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CDPropertyModifier createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    return JS_TRUE;
}

// Destructor
void JSPROXY_CDPropertyModifier_finalize(JSContext *cx, JSObject *obj)
{
	CCLOGINFO(@"spidermonkey: finalizing JS object %p (CDPropertyModifier)", obj);
}

// Arguments: 
// Ret value: float (d)
JSBool JSPROXY_CDPropertyModifier__getTargetProperty(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CDPropertyModifier *real = (CDPropertyModifier*) [proxy realObj];
	ret_val = [real _getTargetProperty ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: float
// Ret value: void (None)
JSBool JSPROXY_CDPropertyModifier__setTargetProperty_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	double arg0; 

	ok &= JS_ValueToNumber( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	CDPropertyModifier *real = (CDPropertyModifier*) [proxy realObj];
	[real _setTargetProperty:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: void (None)
JSBool JSPROXY_CDPropertyModifier__stopTarget(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );

	CDPropertyModifier *real = (CDPropertyModifier*) [proxy realObj];
	[real _stopTarget ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: float (d)
JSBool JSPROXY_CDPropertyModifier_endValue(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CDPropertyModifier *real = (CDPropertyModifier*) [proxy realObj];
	ret_val = [real endValue ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: tCDInterpolationType (i)
JSBool JSPROXY_CDPropertyModifier_interpolationType(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	tCDInterpolationType ret_val;

	CDPropertyModifier *real = (CDPropertyModifier*) [proxy realObj];
	ret_val = [real interpolationType ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: float
// Ret value: void (None)
JSBool JSPROXY_CDPropertyModifier_modify_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	double arg0; 

	ok &= JS_ValueToNumber( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	CDPropertyModifier *real = (CDPropertyModifier*) [proxy realObj];
	[real modify:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: float
// Ret value: void (None)
JSBool JSPROXY_CDPropertyModifier_setEndValue_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	double arg0; 

	ok &= JS_ValueToNumber( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	CDPropertyModifier *real = (CDPropertyModifier*) [proxy realObj];
	[real setEndValue:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: tCDInterpolationType
// Ret value: void (None)
JSBool JSPROXY_CDPropertyModifier_setInterpolationType_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	int32_t arg0; 

	ok &= JS_ValueToECMAInt32( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	CDPropertyModifier *real = (CDPropertyModifier*) [proxy realObj];
	[real setInterpolationType:(tCDInterpolationType)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: float
// Ret value: void (None)
JSBool JSPROXY_CDPropertyModifier_setStartValue_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	double arg0; 

	ok &= JS_ValueToNumber( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	CDPropertyModifier *real = (CDPropertyModifier*) [proxy realObj];
	[real setStartValue:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: void (None)
JSBool JSPROXY_CDPropertyModifier_setStopTargetWhenComplete_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	JSBool arg0; 

	ok &= JS_ValueToBoolean( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	CDPropertyModifier *real = (CDPropertyModifier*) [proxy realObj];
	[real setStopTargetWhenComplete:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: float (d)
JSBool JSPROXY_CDPropertyModifier_startValue(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	float ret_val;

	CDPropertyModifier *real = (CDPropertyModifier*) [proxy realObj];
	ret_val = [real startValue ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSPROXY_CDPropertyModifier_stopTargetWhenComplete(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CDPropertyModifier *real = (CDPropertyModifier*) [proxy realObj];
	ret_val = [real stopTargetWhenComplete ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

void JSPROXY_CDPropertyModifier_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CDPropertyModifier_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CDPropertyModifier_class->name = name;
	JSPROXY_CDPropertyModifier_class->addProperty = JS_PropertyStub;
	JSPROXY_CDPropertyModifier_class->delProperty = JS_PropertyStub;
	JSPROXY_CDPropertyModifier_class->getProperty = JS_PropertyStub;
	JSPROXY_CDPropertyModifier_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CDPropertyModifier_class->enumerate = JS_EnumerateStub;
	JSPROXY_CDPropertyModifier_class->resolve = JS_ResolveStub;
	JSPROXY_CDPropertyModifier_class->convert = JS_ConvertStub;
	JSPROXY_CDPropertyModifier_class->finalize = JSPROXY_CDPropertyModifier_finalize;
//	JSPROXY_CDPropertyModifier_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("_getTargetProperty", JSPROXY_CDPropertyModifier__getTargetProperty, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("_setTargetProperty", JSPROXY_CDPropertyModifier__setTargetProperty_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("_stopTarget", JSPROXY_CDPropertyModifier__stopTarget, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("endValue", JSPROXY_CDPropertyModifier_endValue, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("interpolationType", JSPROXY_CDPropertyModifier_interpolationType, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("modify", JSPROXY_CDPropertyModifier_modify_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setEndValue", JSPROXY_CDPropertyModifier_setEndValue_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setInterpolationType", JSPROXY_CDPropertyModifier_setInterpolationType_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setStartValue", JSPROXY_CDPropertyModifier_setStartValue_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setStopTargetWhenComplete", JSPROXY_CDPropertyModifier_setStopTargetWhenComplete_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("startValue", JSPROXY_CDPropertyModifier_startValue, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("stopTargetWhenComplete", JSPROXY_CDPropertyModifier_stopTargetWhenComplete, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FS_END
	};

	JSPROXY_CDPropertyModifier_object = JS_InitClass(cx, globalObj, JSPROXY_NSObject_object, JSPROXY_CDPropertyModifier_class, JSPROXY_CDPropertyModifier_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CDPropertyModifier

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CDPropertyModifier_class, JSPROXY_CDPropertyModifier_object, NULL);
	JSPROXY_CDPropertyModifier *proxy = [[JSPROXY_CDPropertyModifier alloc] initWithJSObject:jsobj class:[CDPropertyModifier class]];
	[proxy setRealObj:realObj];

	if( realObj ) {
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
		[proxy release];
	}

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CDAudioInterruptTargetGroup
 */
#pragma mark - CDAudioInterruptTargetGroup

JSClass* JSPROXY_CDAudioInterruptTargetGroup_class = NULL;
JSObject* JSPROXY_CDAudioInterruptTargetGroup_object = NULL;
 // Constructor
JSBool JSPROXY_CDAudioInterruptTargetGroup_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = [JSPROXY_CDAudioInterruptTargetGroup createJSObjectWithRealObject:nil context:cx];
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    return JS_TRUE;
}

// Destructor
void JSPROXY_CDAudioInterruptTargetGroup_finalize(JSContext *cx, JSObject *obj)
{
	CCLOGINFO(@"spidermonkey: finalizing JS object %p (CDAudioInterruptTargetGroup)", obj);
}

// Arguments: NSObject*
// Ret value: void (None)
JSBool JSPROXY_CDAudioInterruptTargetGroup_addAudioInterruptTarget_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	id arg0; 

	ok &= jsval_to_nsobject( cx, *argvp++, &arg0);
	if( ! ok ) return JS_FALSE;

	CDAudioInterruptTargetGroup *real = (CDAudioInterruptTargetGroup*) [proxy realObj];
	[real addAudioInterruptTarget:(NSObject*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSPROXY_CDAudioInterruptTargetGroup_enabled(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CDAudioInterruptTargetGroup *real = (CDAudioInterruptTargetGroup*) [proxy realObj];
	ret_val = [real enabled ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSPROXY_CDAudioInterruptTargetGroup_mute(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 0, @"Invalid number of arguments" );
	BOOL ret_val;

	CDAudioInterruptTargetGroup *real = (CDAudioInterruptTargetGroup*) [proxy realObj];
	ret_val = [real mute ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: void (None)
JSBool JSPROXY_CDAudioInterruptTargetGroup_setEnabled_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	JSBool arg0; 

	ok &= JS_ValueToBoolean( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	CDAudioInterruptTargetGroup *real = (CDAudioInterruptTargetGroup*) [proxy realObj];
	[real setEnabled:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: void (None)
JSBool JSPROXY_CDAudioInterruptTargetGroup_setMute_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = get_proxy_for_jsobject(obj);

	NSCAssert( proxy && [proxy realObj], @"Invalid Proxy object");
	JSB_PRECONDITION( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	JSBool arg0; 

	ok &= JS_ValueToBoolean( cx, *argvp++, &arg0 );
	if( ! ok ) return JS_FALSE;

	CDAudioInterruptTargetGroup *real = (CDAudioInterruptTargetGroup*) [proxy realObj];
	[real setMute:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

void JSPROXY_CDAudioInterruptTargetGroup_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSPROXY_CDAudioInterruptTargetGroup_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CDAudioInterruptTargetGroup_class->name = name;
	JSPROXY_CDAudioInterruptTargetGroup_class->addProperty = JS_PropertyStub;
	JSPROXY_CDAudioInterruptTargetGroup_class->delProperty = JS_PropertyStub;
	JSPROXY_CDAudioInterruptTargetGroup_class->getProperty = JS_PropertyStub;
	JSPROXY_CDAudioInterruptTargetGroup_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CDAudioInterruptTargetGroup_class->enumerate = JS_EnumerateStub;
	JSPROXY_CDAudioInterruptTargetGroup_class->resolve = JS_ResolveStub;
	JSPROXY_CDAudioInterruptTargetGroup_class->convert = JS_ConvertStub;
	JSPROXY_CDAudioInterruptTargetGroup_class->finalize = JSPROXY_CDAudioInterruptTargetGroup_finalize;
//	JSPROXY_CDAudioInterruptTargetGroup_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("addAudioInterruptTarget", JSPROXY_CDAudioInterruptTargetGroup_addAudioInterruptTarget_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("enabled", JSPROXY_CDAudioInterruptTargetGroup_enabled, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("mute", JSPROXY_CDAudioInterruptTargetGroup_mute, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setEnabled", JSPROXY_CDAudioInterruptTargetGroup_setEnabled_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setMute", JSPROXY_CDAudioInterruptTargetGroup_setMute_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FS_END
	};

	JSPROXY_CDAudioInterruptTargetGroup_object = JS_InitClass(cx, globalObj, JSPROXY_NSObject_object, JSPROXY_CDAudioInterruptTargetGroup_class, JSPROXY_CDAudioInterruptTargetGroup_constructor,0,properties,funcs,NULL,st_funcs);
}

@implementation JSPROXY_CDAudioInterruptTargetGroup

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CDAudioInterruptTargetGroup_class, JSPROXY_CDAudioInterruptTargetGroup_object, NULL);
	JSPROXY_CDAudioInterruptTargetGroup *proxy = [[JSPROXY_CDAudioInterruptTargetGroup alloc] initWithJSObject:jsobj class:[CDAudioInterruptTargetGroup class]];
	[proxy setRealObj:realObj];

	if( realObj ) {
		objc_setAssociatedObject(realObj, &JSPROXY_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
		[proxy release];
	}

	[self swizzleMethods];

	return jsobj;
}

@end
