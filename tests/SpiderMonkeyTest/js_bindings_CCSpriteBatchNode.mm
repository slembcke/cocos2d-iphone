/*
* AUTOGENERATED FILE. DO NOT EDIT IT
* Generated by ../../tools/js/generate_spidermonkey_bindings.py on 2012-05-31
*/

// needed for callbacks from objective-c to JS
#import <objc/runtime.h>
#import "JRSwizzle.h"

#import "jstypedarray.h"
#import "ScriptingCore.h"   

#import "js_bindings_CCSpriteBatchNode.h"
#import "js_bindings_cocos2d.h"


JSClass* JSPROXY_CCSpriteBatchNode_class = NULL;
JSObject* JSPROXY_CCSpriteBatchNode_object = NULL;
 // Constructor
JSBool JSPROXY_CCSpriteBatchNode_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCSpriteBatchNode_class, JSPROXY_CCSpriteBatchNode_object, NULL);

    JSPROXY_CCSpriteBatchNode *proxy = [[JSPROXY_CCSpriteBatchNode alloc] initWithJSObject:jsobj];

    JS_SetPrivate(jsobj, proxy);
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */
    
    return JS_TRUE;
}

// Destructor
void JSPROXY_CCSpriteBatchNode_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCSpriteBatchNode *pt = (JSPROXY_CCSpriteBatchNode*)JS_GetPrivate(obj);
	if (pt) {
		// id real = [pt realObj];
	
		/* no callbacks */

		[pt release];

		JS_free(cx, pt);
	}
}

// Arguments: CCSprite*, NSUInteger
// Ret value: None
JSBool JSPROXY_CCSpriteBatchNode_addQuadFromSprite_quadIndex_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	JSPROXY_CCSprite* proxy_arg0 = (JSPROXY_CCSprite*) JS_GetPrivate( tmp_arg0 ); 
	CCSprite* arg0 = (CCSprite*) [proxy_arg0 realObj];
	uint32_t arg1; JS_ValueToECMAUint32( cx, *argvp++, &arg1 );

	CCSpriteBatchNode *real = (CCSpriteBatchNode*) [proxy realObj];
	[real addQuadFromSprite:(CCSprite*)arg0 quadIndex:(NSUInteger)arg1  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCSprite*
// Ret value: None
JSBool JSPROXY_CCSpriteBatchNode_appendChild_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	JSPROXY_CCSprite* proxy_arg0 = (JSPROXY_CCSprite*) JS_GetPrivate( tmp_arg0 ); 
	CCSprite* arg0 = (CCSprite*) [proxy_arg0 realObj];

	CCSpriteBatchNode *real = (CCSpriteBatchNode*) [proxy realObj];
	[real appendChild:(CCSprite*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCSprite*, NSInteger
// Ret value: NSUInteger
JSBool JSPROXY_CCSpriteBatchNode_atlasIndexForChild_atZ_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	JSPROXY_CCSprite* proxy_arg0 = (JSPROXY_CCSprite*) JS_GetPrivate( tmp_arg0 ); 
	CCSprite* arg0 = (CCSprite*) [proxy_arg0 realObj];
	int32_t arg1; JS_ValueToECMAInt32( cx, *argvp++, &arg1 );
	NSUInteger ret_val;

	CCSpriteBatchNode *real = (CCSpriteBatchNode*) [proxy realObj];
	ret_val = [real atlasIndexForChild:(CCSprite*)arg0 atZ:(NSInteger)arg1  ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: CCSpriteBatchNode
JSBool JSPROXY_CCSpriteBatchNode_batchNodeWithFile_(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSString *tmp_arg0 = JS_ValueToString( cx, *argvp++ );
	NSString *arg0 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg0)];

	CCSpriteBatchNode *real = [CCSpriteBatchNode batchNodeWithFile:(NSString*)arg0  ];

	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCSpriteBatchNode_class, JSPROXY_CCSpriteBatchNode_object, NULL);
	JSPROXY_CCSpriteBatchNode *ret_proxy = [[JSPROXY_CCSpriteBatchNode alloc] initWithJSObject:jsobj];
	[ret_proxy setRealObj: real];
	JS_SetPrivate(jsobj, ret_proxy);
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: NSString*, NSUInteger
// Ret value: CCSpriteBatchNode
JSBool JSPROXY_CCSpriteBatchNode_batchNodeWithFile_capacity_(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSString *tmp_arg0 = JS_ValueToString( cx, *argvp++ );
	NSString *arg0 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg0)];
	uint32_t arg1; JS_ValueToECMAUint32( cx, *argvp++, &arg1 );

	CCSpriteBatchNode *real = [CCSpriteBatchNode batchNodeWithFile:(NSString*)arg0 capacity:(NSUInteger)arg1  ];

	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCSpriteBatchNode_class, JSPROXY_CCSpriteBatchNode_object, NULL);
	JSPROXY_CCSpriteBatchNode *ret_proxy = [[JSPROXY_CCSpriteBatchNode alloc] initWithJSObject:jsobj];
	[ret_proxy setRealObj: real];
	JS_SetPrivate(jsobj, ret_proxy);
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCSpriteBatchNode_increaseAtlasCapacity(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCSpriteBatchNode *real = (CCSpriteBatchNode*) [proxy realObj];
	[real increaseAtlasCapacity ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*, NSUInteger
// Ret value: None
JSBool JSPROXY_CCSpriteBatchNode_initWithFile_capacity_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSString *tmp_arg0 = JS_ValueToString( cx, *argvp++ );
	NSString *arg0 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg0)];
	uint32_t arg1; JS_ValueToECMAUint32( cx, *argvp++, &arg1 );

	CCSpriteBatchNode *real = [[CCSpriteBatchNode alloc] initWithFile:(NSString*)arg0 capacity:(NSUInteger)arg1  ];
	[proxy setRealObj: real];
	[real release];

	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCSprite*, NSUInteger
// Ret value: None
JSBool JSPROXY_CCSpriteBatchNode_insertChild_inAtlasAtIndex_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	JSPROXY_CCSprite* proxy_arg0 = (JSPROXY_CCSprite*) JS_GetPrivate( tmp_arg0 ); 
	CCSprite* arg0 = (CCSprite*) [proxy_arg0 realObj];
	uint32_t arg1; JS_ValueToECMAUint32( cx, *argvp++, &arg1 );

	CCSpriteBatchNode *real = (CCSpriteBatchNode*) [proxy realObj];
	[real insertChild:(CCSprite*)arg0 inAtlasAtIndex:(NSUInteger)arg1  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCSprite*, NSUInteger
// Ret value: NSUInteger
JSBool JSPROXY_CCSpriteBatchNode_rebuildIndexInOrder_atlasIndex_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	JSPROXY_CCSprite* proxy_arg0 = (JSPROXY_CCSprite*) JS_GetPrivate( tmp_arg0 ); 
	CCSprite* arg0 = (CCSprite*) [proxy_arg0 realObj];
	uint32_t arg1; JS_ValueToECMAUint32( cx, *argvp++, &arg1 );
	NSUInteger ret_val;

	CCSpriteBatchNode *real = (CCSpriteBatchNode*) [proxy realObj];
	ret_val = [real rebuildIndexInOrder:(CCSprite*)arg0 atlasIndex:(NSUInteger)arg1  ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: CCSprite*, BOOL
// Ret value: None
JSBool JSPROXY_CCSpriteBatchNode_removeChild_cleanup_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	JSPROXY_CCSprite* proxy_arg0 = (JSPROXY_CCSprite*) JS_GetPrivate( tmp_arg0 ); 
	CCSprite* arg0 = (CCSprite*) [proxy_arg0 realObj];
	JSBool arg1; JS_ValueToBoolean( cx, *argvp++, &arg1 );

	CCSpriteBatchNode *real = (CCSpriteBatchNode*) [proxy realObj];
	[real removeChild:(CCSprite*)arg0 cleanup:(BOOL)arg1  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSUInteger, BOOL
// Ret value: None
JSBool JSPROXY_CCSpriteBatchNode_removeChildAtIndex_cleanup_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	uint32_t arg0; JS_ValueToECMAUint32( cx, *argvp++, &arg0 );
	JSBool arg1; JS_ValueToBoolean( cx, *argvp++, &arg1 );

	CCSpriteBatchNode *real = (CCSpriteBatchNode*) [proxy realObj];
	[real removeChildAtIndex:(NSUInteger)arg0 cleanup:(BOOL)arg1  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCSprite*
// Ret value: None
JSBool JSPROXY_CCSpriteBatchNode_removeSpriteFromAtlas_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	JSPROXY_CCSprite* proxy_arg0 = (JSPROXY_CCSprite*) JS_GetPrivate( tmp_arg0 ); 
	CCSprite* arg0 = (CCSprite*) [proxy_arg0 realObj];

	CCSpriteBatchNode *real = (CCSpriteBatchNode*) [proxy realObj];
	[real removeSpriteFromAtlas:(CCSprite*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: None
JSBool JSPROXY_CCSpriteBatchNode_reorderBatch_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool arg0; JS_ValueToBoolean( cx, *argvp++, &arg0 );

	CCSpriteBatchNode *real = (CCSpriteBatchNode*) [proxy realObj];
	[real reorderBatch:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: ccBlendFunc
// Ret value: None
JSBool JSPROXY_CCSpriteBatchNode_setBlendFunc_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	ccBlendFunc arg0 = *(ccBlendFunc*)JS_GetTypedArrayData( tmp_arg0);

	CCSpriteBatchNode *real = (CCSpriteBatchNode*) [proxy realObj];
	[real setBlendFunc:(ccBlendFunc)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

@implementation JSPROXY_CCSpriteBatchNode

+(void) createClassWithContext:(JSContext*)cx object:(JSObject*)globalObj name:(NSString*)name
{
	JSPROXY_CCSpriteBatchNode_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCSpriteBatchNode_class->name = [name UTF8String];
	JSPROXY_CCSpriteBatchNode_class->addProperty = JS_PropertyStub;
	JSPROXY_CCSpriteBatchNode_class->delProperty = JS_PropertyStub;
	JSPROXY_CCSpriteBatchNode_class->getProperty = JS_PropertyStub;
	JSPROXY_CCSpriteBatchNode_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCSpriteBatchNode_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCSpriteBatchNode_class->resolve = JS_ResolveStub;
	JSPROXY_CCSpriteBatchNode_class->convert = JS_ConvertStub;
	JSPROXY_CCSpriteBatchNode_class->finalize = JSPROXY_CCSpriteBatchNode_finalize;
	JSPROXY_CCSpriteBatchNode_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("addQuadFromSpriteQuadindex", JSPROXY_CCSpriteBatchNode_addQuadFromSprite_quadIndex_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("appendChild", JSPROXY_CCSpriteBatchNode_appendChild_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("atlasIndexForChildAtz", JSPROXY_CCSpriteBatchNode_atlasIndexForChild_atZ_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("increaseAtlasCapacity", JSPROXY_CCSpriteBatchNode_increaseAtlasCapacity, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithFileCapacity", JSPROXY_CCSpriteBatchNode_initWithFile_capacity_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("insertChildInatlasatindex", JSPROXY_CCSpriteBatchNode_insertChild_inAtlasAtIndex_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("rebuildIndexInOrderAtlasindex", JSPROXY_CCSpriteBatchNode_rebuildIndexInOrder_atlasIndex_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("removeChildCleanup", JSPROXY_CCSpriteBatchNode_removeChild_cleanup_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("removeChildAtIndexCleanup", JSPROXY_CCSpriteBatchNode_removeChildAtIndex_cleanup_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("removeSpriteFromAtlas", JSPROXY_CCSpriteBatchNode_removeSpriteFromAtlas_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("reorderBatch", JSPROXY_CCSpriteBatchNode_reorderBatch_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setBlendFunc", JSPROXY_CCSpriteBatchNode_setBlendFunc_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("batchNodeWithFile", JSPROXY_CCSpriteBatchNode_batchNodeWithFile_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FN("batchNodeWithFileCapacity", JSPROXY_CCSpriteBatchNode_batchNodeWithFile_capacity_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FS_END
	};

	JSPROXY_CCSpriteBatchNode_object = JS_InitClass(cx, globalObj, JSPROXY_CCNode_object, JSPROXY_CCSpriteBatchNode_class, JSPROXY_CCSpriteBatchNode_constructor,0,properties,funcs,NULL,st_funcs);
}

@end
