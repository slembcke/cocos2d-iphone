/*
* AUTOGENERATED FILE. DO NOT EDIT IT
* Generated by ../../tools/js/generate_spidermonkey_bindings.py on 2012-05-31
*/

// needed for callbacks from objective-c to JS
#import <objc/runtime.h>
#import "JRSwizzle.h"

#import "jstypedarray.h"
#import "ScriptingCore.h"   

#import "js_bindings_CCLabelBMFont.h"
#import "js_bindings_cocos2d.h"


JSClass* JSPROXY_CCLabelBMFont_class = NULL;
JSObject* JSPROXY_CCLabelBMFont_object = NULL;
 // Constructor
JSBool JSPROXY_CCLabelBMFont_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCLabelBMFont_class, JSPROXY_CCLabelBMFont_object, NULL);

    JSPROXY_CCLabelBMFont *proxy = [[JSPROXY_CCLabelBMFont alloc] initWithJSObject:jsobj];

    JS_SetPrivate(jsobj, proxy);
    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

    /* no callbacks */
    
    return JS_TRUE;
}

// Destructor
void JSPROXY_CCLabelBMFont_finalize(JSContext *cx, JSObject *obj)
{
	JSPROXY_CCLabelBMFont *pt = (JSPROXY_CCLabelBMFont*)JS_GetPrivate(obj);
	if (pt) {
		// id real = [pt realObj];
	
		/* no callbacks */

		[pt release];

		JS_free(cx, pt);
	}
}

// Arguments: 
// Ret value: CCTextAlignment
JSBool JSPROXY_CCLabelBMFont_alignment(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	CCTextAlignment ret_val;

	CCLabelBMFont *real = (CCLabelBMFont*) [proxy realObj];
	ret_val = [real alignment ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCLabelBMFont_createFontChars(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	CCLabelBMFont *real = (CCLabelBMFont*) [proxy realObj];
	[real createFontChars ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSString*
JSBool JSPROXY_CCLabelBMFont_fntFile(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	NSString* ret_val;

	CCLabelBMFont *real = (CCLabelBMFont*) [proxy realObj];
	ret_val = [real fntFile ];

	JSString *ret_obj = JS_NewStringCopyZ(cx, [ret_val UTF8String]);
	JS_SET_RVAL(cx, vp, STRING_TO_JSVAL(ret_obj) );

	return JS_TRUE;
}

// Arguments: NSString*, NSString*
// Ret value: None
JSBool JSPROXY_CCLabelBMFont_initWithString_fntFile_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSString *tmp_arg0 = JS_ValueToString( cx, *argvp++ );
	NSString *arg0 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg0)];
	JSString *tmp_arg1 = JS_ValueToString( cx, *argvp++ );
	NSString *arg1 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg1)];

	CCLabelBMFont *real = [[CCLabelBMFont alloc] initWithString:(NSString*)arg0 fntFile:(NSString*)arg1  ];
	[proxy setRealObj: real];
	[real release];

	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*, NSString*, float, CCTextAlignment
// Ret value: None
JSBool JSPROXY_CCLabelBMFont_initWithString_fntFile_width_alignment_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 4, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSString *tmp_arg0 = JS_ValueToString( cx, *argvp++ );
	NSString *arg0 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg0)];
	JSString *tmp_arg1 = JS_ValueToString( cx, *argvp++ );
	NSString *arg1 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg1)];
	double arg2; JS_ValueToNumber( cx, *argvp++, &arg2 );
	int32_t arg3; JS_ValueToECMAInt32( cx, *argvp++, &arg3 );

	CCLabelBMFont *real = [[CCLabelBMFont alloc] initWithString:(NSString*)arg0 fntFile:(NSString*)arg1 width:(float)arg2 alignment:(CCTextAlignment)arg3  ];
	[proxy setRealObj: real];
	[real release];

	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*, NSString*, float, CCTextAlignment, CGPoint
// Ret value: None
JSBool JSPROXY_CCLabelBMFont_initWithString_fntFile_width_alignment_imageOffset_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( ![proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 5, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSString *tmp_arg0 = JS_ValueToString( cx, *argvp++ );
	NSString *arg0 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg0)];
	JSString *tmp_arg1 = JS_ValueToString( cx, *argvp++ );
	NSString *arg1 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg1)];
	double arg2; JS_ValueToNumber( cx, *argvp++, &arg2 );
	int32_t arg3; JS_ValueToECMAInt32( cx, *argvp++, &arg3 );

	JSObject *tmp_arg4;
	JS_ValueToObject( cx, *argvp++, &tmp_arg4 );
	NSCAssert( JS_GetTypedArrayByteLength( tmp_arg4 ) == 8, @"Invalid length");
#ifdef __CC_PLATFORM_IOS
	CGPoint arg4 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg4 );
#elif defined(__CC_PLATFORM_MAC)
	float* arg4_array = (float*)JS_GetTypedArrayData( tmp_arg4 );
	CGPoint arg4 = ccp(arg4_array[0], arg4_array[1] );
#else
#error Unsupported Platform
#endif  

	CCLabelBMFont *real = [[CCLabelBMFont alloc] initWithString:(NSString*)arg0 fntFile:(NSString*)arg1 width:(float)arg2 alignment:(CCTextAlignment)arg3 imageOffset:(CGPoint)arg4  ];
	[proxy setRealObj: real];
	[real release];

	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*, NSString*
// Ret value: CCLabelBMFont
JSBool JSPROXY_CCLabelBMFont_labelWithString_fntFile_(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 2, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSString *tmp_arg0 = JS_ValueToString( cx, *argvp++ );
	NSString *arg0 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg0)];
	JSString *tmp_arg1 = JS_ValueToString( cx, *argvp++ );
	NSString *arg1 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg1)];

	CCLabelBMFont *real = [CCLabelBMFont labelWithString:(NSString*)arg0 fntFile:(NSString*)arg1  ];

	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCLabelBMFont_class, JSPROXY_CCLabelBMFont_object, NULL);
	JSPROXY_CCLabelBMFont *ret_proxy = [[JSPROXY_CCLabelBMFont alloc] initWithJSObject:jsobj];
	[ret_proxy setRealObj: real];
	JS_SetPrivate(jsobj, ret_proxy);
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: NSString*, NSString*, float, CCTextAlignment
// Ret value: CCLabelBMFont
JSBool JSPROXY_CCLabelBMFont_labelWithString_fntFile_width_alignment_(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 4, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSString *tmp_arg0 = JS_ValueToString( cx, *argvp++ );
	NSString *arg0 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg0)];
	JSString *tmp_arg1 = JS_ValueToString( cx, *argvp++ );
	NSString *arg1 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg1)];
	double arg2; JS_ValueToNumber( cx, *argvp++, &arg2 );
	int32_t arg3; JS_ValueToECMAInt32( cx, *argvp++, &arg3 );

	CCLabelBMFont *real = [CCLabelBMFont labelWithString:(NSString*)arg0 fntFile:(NSString*)arg1 width:(float)arg2 alignment:(CCTextAlignment)arg3  ];

	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCLabelBMFont_class, JSPROXY_CCLabelBMFont_object, NULL);
	JSPROXY_CCLabelBMFont *ret_proxy = [[JSPROXY_CCLabelBMFont alloc] initWithJSObject:jsobj];
	[ret_proxy setRealObj: real];
	JS_SetPrivate(jsobj, ret_proxy);
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: NSString*, NSString*, float, CCTextAlignment, CGPoint
// Ret value: CCLabelBMFont
JSBool JSPROXY_CCLabelBMFont_labelWithString_fntFile_width_alignment_imageOffset_(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 5, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSString *tmp_arg0 = JS_ValueToString( cx, *argvp++ );
	NSString *arg0 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg0)];
	JSString *tmp_arg1 = JS_ValueToString( cx, *argvp++ );
	NSString *arg1 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg1)];
	double arg2; JS_ValueToNumber( cx, *argvp++, &arg2 );
	int32_t arg3; JS_ValueToECMAInt32( cx, *argvp++, &arg3 );

	JSObject *tmp_arg4;
	JS_ValueToObject( cx, *argvp++, &tmp_arg4 );
	NSCAssert( JS_GetTypedArrayByteLength( tmp_arg4 ) == 8, @"Invalid length");
#ifdef __CC_PLATFORM_IOS
	CGPoint arg4 = *(CGPoint*)JS_GetTypedArrayData( tmp_arg4 );
#elif defined(__CC_PLATFORM_MAC)
	float* arg4_array = (float*)JS_GetTypedArrayData( tmp_arg4 );
	CGPoint arg4 = ccp(arg4_array[0], arg4_array[1] );
#else
#error Unsupported Platform
#endif  

	CCLabelBMFont *real = [CCLabelBMFont labelWithString:(NSString*)arg0 fntFile:(NSString*)arg1 width:(float)arg2 alignment:(CCTextAlignment)arg3 imageOffset:(CGPoint)arg4  ];

	JSObject *jsobj = JS_NewObject(cx, JSPROXY_CCLabelBMFont_class, JSPROXY_CCLabelBMFont_object, NULL);
	JSPROXY_CCLabelBMFont *ret_proxy = [[JSPROXY_CCLabelBMFont alloc] initWithJSObject:jsobj];
	[ret_proxy setRealObj: real];
	JS_SetPrivate(jsobj, ret_proxy);
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));

	return JS_TRUE;
}

// Arguments: 
// Ret value: GLubyte
JSBool JSPROXY_CCLabelBMFont_opacity(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 0, @"Invalid number of arguments" );
	GLubyte ret_val;

	CCLabelBMFont *real = (CCLabelBMFont*) [proxy realObj];
	ret_val = [real opacity ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: None
JSBool JSPROXY_CCLabelBMFont_purgeCachedData(JSContext *cx, uint32_t argc, jsval *vp) {
	NSCAssert( argc == 0, @"Invalid number of arguments" );

	[CCLabelBMFont purgeCachedData ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCTextAlignment
// Ret value: None
JSBool JSPROXY_CCLabelBMFont_setAlignment_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	int32_t arg0; JS_ValueToECMAInt32( cx, *argvp++, &arg0 );

	CCLabelBMFont *real = (CCLabelBMFont*) [proxy realObj];
	[real setAlignment:(CCTextAlignment)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: ccColor3B
// Ret value: None
JSBool JSPROXY_CCLabelBMFont_setColor_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);

	JSObject *tmp_arg0;
	JS_ValueToObject( cx, *argvp++, &tmp_arg0 );
	ccColor3B arg0 = *(ccColor3B*)JS_GetTypedArrayData( tmp_arg0);

	CCLabelBMFont *real = (CCLabelBMFont*) [proxy realObj];
	[real setColor:(ccColor3B)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: None
JSBool JSPROXY_CCLabelBMFont_setFntFile_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSString *tmp_arg0 = JS_ValueToString( cx, *argvp++ );
	NSString *arg0 = [NSString stringWithUTF8String: JS_EncodeString(cx, tmp_arg0)];

	CCLabelBMFont *real = (CCLabelBMFont*) [proxy realObj];
	[real setFntFile:(NSString*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: GLubyte
// Ret value: None
JSBool JSPROXY_CCLabelBMFont_setOpacity_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	uint16_t arg0; JS_ValueToUint16( cx, *argvp++, &arg0 );

	CCLabelBMFont *real = (CCLabelBMFont*) [proxy realObj];
	[real setOpacity:(GLubyte)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: float
// Ret value: None
JSBool JSPROXY_CCLabelBMFont_setWidth_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSPROXY_NSObject *proxy = (JSPROXY_NSObject*) JS_GetPrivate( obj );
	NSCAssert( proxy, @"Invalid Proxy object");
	NSCAssert( [proxy realObj], @"Object not initialzied. error");
	NSCAssert( argc == 1, @"Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	double arg0; JS_ValueToNumber( cx, *argvp++, &arg0 );

	CCLabelBMFont *real = (CCLabelBMFont*) [proxy realObj];
	[real setWidth:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

@implementation JSPROXY_CCLabelBMFont

+(void) createClassWithContext:(JSContext*)cx object:(JSObject*)globalObj name:(NSString*)name
{
	JSPROXY_CCLabelBMFont_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSPROXY_CCLabelBMFont_class->name = [name UTF8String];
	JSPROXY_CCLabelBMFont_class->addProperty = JS_PropertyStub;
	JSPROXY_CCLabelBMFont_class->delProperty = JS_PropertyStub;
	JSPROXY_CCLabelBMFont_class->getProperty = JS_PropertyStub;
	JSPROXY_CCLabelBMFont_class->setProperty = JS_StrictPropertyStub;
	JSPROXY_CCLabelBMFont_class->enumerate = JS_EnumerateStub;
	JSPROXY_CCLabelBMFont_class->resolve = JS_ResolveStub;
	JSPROXY_CCLabelBMFont_class->convert = JS_ConvertStub;
	JSPROXY_CCLabelBMFont_class->finalize = JSPROXY_CCLabelBMFont_finalize;
	JSPROXY_CCLabelBMFont_class->flags = JSCLASS_HAS_PRIVATE;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("alignment", JSPROXY_CCLabelBMFont_alignment, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("createFontChars", JSPROXY_CCLabelBMFont_createFontChars, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("fntFile", JSPROXY_CCLabelBMFont_fntFile, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithStringFntfile", JSPROXY_CCLabelBMFont_initWithString_fntFile_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithStringFntfileWidthAlignment", JSPROXY_CCLabelBMFont_initWithString_fntFile_width_alignment_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("initWithStringFntfileWidthAlignmentImageoffset", JSPROXY_CCLabelBMFont_initWithString_fntFile_width_alignment_imageOffset_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("opacity", JSPROXY_CCLabelBMFont_opacity, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setAlignment", JSPROXY_CCLabelBMFont_setAlignment_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setColor", JSPROXY_CCLabelBMFont_setColor_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setFntFile", JSPROXY_CCLabelBMFont_setFntFile_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setOpacity", JSPROXY_CCLabelBMFont_setOpacity_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FN("setWidth", JSPROXY_CCLabelBMFont_setWidth_, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("labelWithStringFntfile", JSPROXY_CCLabelBMFont_labelWithString_fntFile_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FN("labelWithStringFntfileWidthAlignment", JSPROXY_CCLabelBMFont_labelWithString_fntFile_width_alignment_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FN("labelWithStringFntfileWidthAlignmentImageoffset", JSPROXY_CCLabelBMFont_labelWithString_fntFile_width_alignment_imageOffset_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSFUN_CONSTRUCTOR),
		JS_FN("purgeCachedData", JSPROXY_CCLabelBMFont_purgeCachedData, 1, JSPROP_PERMANENT | JSPROP_SHARED ),
		JS_FS_END
	};

	JSPROXY_CCLabelBMFont_object = JS_InitClass(cx, globalObj, JSPROXY_CCSpriteBatchNode_object, JSPROXY_CCLabelBMFont_class, JSPROXY_CCLabelBMFont_constructor,0,properties,funcs,NULL,st_funcs);
}

@end
